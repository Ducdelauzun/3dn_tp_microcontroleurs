
3DN_tp_microcontroleurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800838c  0800838c  0000938c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087dc  080087dc  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080087dc  080087dc  000097dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087e4  080087e4  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087e4  080087e4  000097e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087e8  080087e8  000097e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080087ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000068  08008854  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  08008854  0000a8c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151d6  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331c  00000000  00000000  0001f26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00022590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da9  00000000  00000000  00023748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002919b  00000000  00000000  000244f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018634  00000000  00000000  0004d68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f178e  00000000  00000000  00065cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015744e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f6c  00000000  00000000  00157494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0015c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008374 	.word	0x08008374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08008374 	.word	0x08008374

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <MX_DMA_Init+0x48>)
 80005a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005a6:	4a0f      	ldr	r2, [pc, #60]	@ (80005e4 <MX_DMA_Init+0x48>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80005ae:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <MX_DMA_Init+0x48>)
 80005b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	2010      	movs	r0, #16
 80005c0:	f001 fa59 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005c4:	2010      	movs	r0, #16
 80005c6:	f001 fa72 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2011      	movs	r0, #17
 80005d0:	f001 fa51 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005d4:	2011      	movs	r0, #17
 80005d6:	f001 fa6a 	bl	8001aae <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	@ 0x28
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b38      	ldr	r3, [pc, #224]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a37      	ldr	r2, [pc, #220]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b35      	ldr	r3, [pc, #212]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	4b32      	ldr	r3, [pc, #200]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	4a31      	ldr	r2, [pc, #196]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000622:	4b2f      	ldr	r3, [pc, #188]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	4a2b      	ldr	r2, [pc, #172]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063a:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	4a25      	ldr	r2, [pc, #148]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000652:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_nRESET_GPIO_Port, SPI3_nRESET_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2101      	movs	r1, #1
 8000662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000666:	f001 fe5d 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2120      	movs	r1, #32
 800066e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000672:	f001 fe57 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_nCS_GPIO_Port, SPI3_nCS_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2180      	movs	r1, #128	@ 0x80
 800067a:	481a      	ldr	r0, [pc, #104]	@ (80006e4 <MX_GPIO_Init+0xfc>)
 800067c:	f001 fe52 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000680:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000686:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	4814      	ldr	r0, [pc, #80]	@ (80006e8 <MX_GPIO_Init+0x100>)
 8000698:	f001 fc9a 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SPI3_nRESET_Pin|LD2_Pin;
 800069c:	2321      	movs	r3, #33	@ 0x21
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b6:	f001 fc8b 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_nCS_Pin */
  GPIO_InitStruct.Pin = SPI3_nCS_Pin;
 80006ba:	2380      	movs	r3, #128	@ 0x80
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_nCS_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_GPIO_Init+0xfc>)
 80006d2:	f001 fc7d 	bl	8001fd0 <HAL_GPIO_Init>

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	@ 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800

080006ec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_I2C2_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000764 <MX_I2C2_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_I2C2_Init+0x74>)
 80006f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <MX_I2C2_Init+0x7c>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_I2C2_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_I2C2_Init+0x74>)
 8000704:	2201      	movs	r2, #1
 8000706:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_I2C2_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_I2C2_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_I2C2_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_I2C2_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_I2C2_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <MX_I2C2_Init+0x74>)
 8000728:	f001 fe2e 	bl	8002388 <HAL_I2C_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000732:	f000 fa40 	bl	8000bb6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <MX_I2C2_Init+0x74>)
 800073a:	f002 fbb1 	bl	8002ea0 <HAL_I2CEx_ConfigAnalogFilter>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000744:	f000 fa37 	bl	8000bb6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_I2C2_Init+0x74>)
 800074c:	f002 fbf3 	bl	8002f36 <HAL_I2CEx_ConfigDigitalFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 fa2e 	bl	8000bb6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000084 	.word	0x20000084
 8000764:	40005800 	.word	0x40005800
 8000768:	10d19ce4 	.word	0x10d19ce4

0800076c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0ac      	sub	sp, #176	@ 0xb0
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2288      	movs	r2, #136	@ 0x88
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f007 f86f 	bl	8007870 <memset>
  if(i2cHandle->Instance==I2C2)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a21      	ldr	r2, [pc, #132]	@ (800081c <HAL_I2C_MspInit+0xb0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d13b      	bne.n	8000814 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800079c:	2380      	movs	r3, #128	@ 0x80
 800079e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fa75 	bl	8003c98 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007b4:	f000 f9ff 	bl	8000bb6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007bc:	4a18      	ldr	r2, [pc, #96]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 80007be:	f043 0302 	orr.w	r3, r3, #2
 80007c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c4:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d8:	2312      	movs	r3, #18
 80007da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007ea:	2304      	movs	r3, #4
 80007ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007f4:	4619      	mov	r1, r3
 80007f6:	480b      	ldr	r0, [pc, #44]	@ (8000824 <HAL_I2C_MspInit+0xb8>)
 80007f8:	f001 fbea 	bl	8001fd0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 80007fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000800:	4a07      	ldr	r2, [pc, #28]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 8000802:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000806:	6593      	str	r3, [r2, #88]	@ 0x58
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 800080a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000814:	bf00      	nop
 8000816:	37b0      	adds	r7, #176	@ 0xb0
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40005800 	.word	0x40005800
 8000820:	40021000 	.word	0x40021000
 8000824:	48000400 	.word	0x48000400

08000828 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000830:	1d39      	adds	r1, r7, #4
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2201      	movs	r2, #1
 8000838:	4803      	ldr	r0, [pc, #12]	@ (8000848 <__io_putchar+0x20>)
 800083a:	f006 f8b1 	bl	80069a0 <HAL_UART_Transmit>
	return chr;
 800083e:	687b      	ldr	r3, [r7, #4]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200006e8 	.word	0x200006e8

0800084c <Read_CODEC_ChipID>:

void Read_CODEC_ChipID(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af04      	add	r7, sp, #16
	uint8_t chip_id[2] = {0}; // Stockage du registre CHIP_ID (16 bits)
 8000852:	2300      	movs	r3, #0
 8000854:	80bb      	strh	r3, [r7, #4]

	// Lecture du registre CHIP_ID
	if (HAL_I2C_Mem_Read(&hi2c2, (CODEC_I2C_ADDRESS << 1), CHIP_ID_REG,
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	9302      	str	r3, [sp, #8]
 800085c:	2302      	movs	r3, #2
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2302      	movs	r3, #2
 8000866:	2200      	movs	r2, #0
 8000868:	2114      	movs	r1, #20
 800086a:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <Read_CODEC_ChipID+0x58>)
 800086c:	f001 ff3c 	bl	80026e8 <HAL_I2C_Mem_Read>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10e      	bne.n	8000894 <Read_CODEC_ChipID+0x48>
			I2C_MEMADD_SIZE_16BIT, chip_id, 2, HAL_MAX_DELAY) == HAL_OK) {
		uint16_t chip_id_value = (chip_id[0] << 8) | chip_id[1];
 8000876:	793b      	ldrb	r3, [r7, #4]
 8000878:	b21b      	sxth	r3, r3
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	b21a      	sxth	r2, r3
 800087e:	797b      	ldrb	r3, [r7, #5]
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21b      	sxth	r3, r3
 8000886:	80fb      	strh	r3, [r7, #6]
		printf("CHIP ID: 0x%04X\r\n", chip_id_value);
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	4619      	mov	r1, r3
 800088c:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <Read_CODEC_ChipID+0x5c>)
 800088e:	f006 fea7 	bl	80075e0 <iprintf>
	} else {
		printf("Erreur lors de la lecture du CHIP ID\r\n");
	}
}
 8000892:	e002      	b.n	800089a <Read_CODEC_ChipID+0x4e>
		printf("Erreur lors de la lecture du CHIP ID\r\n");
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <Read_CODEC_ChipID+0x60>)
 8000896:	f006 ff0b 	bl	80076b0 <puts>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000084 	.word	0x20000084
 80008a8:	0800838c 	.word	0x0800838c
 80008ac:	080083a0 	.word	0x080083a0

080008b0 <Start_SAI_Audio>:

void Start_SAI_Audio(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status_tx = HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)txBuffer, AUDIO_BUFFER_SIZE);
 80008b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ba:	4913      	ldr	r1, [pc, #76]	@ (8000908 <Start_SAI_Audio+0x58>)
 80008bc:	4813      	ldr	r0, [pc, #76]	@ (800090c <Start_SAI_Audio+0x5c>)
 80008be:	f004 ff0f 	bl	80056e0 <HAL_SAI_Transmit_DMA>
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]

	if (status_tx != HAL_OK) {
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d005      	beq.n	80008d8 <Start_SAI_Audio+0x28>
		printf("Erreur SAI TX: %d\r\n", status_tx);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4619      	mov	r1, r3
 80008d0:	480f      	ldr	r0, [pc, #60]	@ (8000910 <Start_SAI_Audio+0x60>)
 80008d2:	f006 fe85 	bl	80075e0 <iprintf>
 80008d6:	e002      	b.n	80008de <Start_SAI_Audio+0x2e>
	} else {
		printf("SAI TX démarré avec succès\r\n");
 80008d8:	480e      	ldr	r0, [pc, #56]	@ (8000914 <Start_SAI_Audio+0x64>)
 80008da:	f006 fee9 	bl	80076b0 <puts>
	}

	if (HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)rxBuffer, AUDIO_BUFFER_SIZE) != HAL_OK) {
 80008de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008e2:	490d      	ldr	r1, [pc, #52]	@ (8000918 <Start_SAI_Audio+0x68>)
 80008e4:	480d      	ldr	r0, [pc, #52]	@ (800091c <Start_SAI_Audio+0x6c>)
 80008e6:	f004 ffab 	bl	8005840 <HAL_SAI_Receive_DMA>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d003      	beq.n	80008f8 <Start_SAI_Audio+0x48>
		printf("Erreur démarrage SAI RX\r\n");
 80008f0:	480b      	ldr	r0, [pc, #44]	@ (8000920 <Start_SAI_Audio+0x70>)
 80008f2:	f006 fedd 	bl	80076b0 <puts>
	} else {
		printf("SAI RX démarré\r\n");
	}
}
 80008f6:	e002      	b.n	80008fe <Start_SAI_Audio+0x4e>
		printf("SAI RX démarré\r\n");
 80008f8:	480a      	ldr	r0, [pc, #40]	@ (8000924 <Start_SAI_Audio+0x74>)
 80008fa:	f006 fed9 	bl	80076b0 <puts>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200002e4 	.word	0x200002e4
 800090c:	200004e4 	.word	0x200004e4
 8000910:	080083c8 	.word	0x080083c8
 8000914:	080083dc 	.word	0x080083dc
 8000918:	200000e4 	.word	0x200000e4
 800091c:	20000568 	.word	0x20000568
 8000920:	080083fc 	.word	0x080083fc
 8000924:	08008418 	.word	0x08008418

08000928 <Fill_Triangle_Wave>:

void Fill_Triangle_Wave(uint16_t *buffer, int length) {
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	@ 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
	int cycles = 10; // 10 cycles dans le buffer
 8000932:	230a      	movs	r3, #10
 8000934:	61bb      	str	r3, [r7, #24]
	int samples_per_cycle = length / cycles;
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	fb92 f3f3 	sdiv	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
	int half = samples_per_cycle / 2;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	0fda      	lsrs	r2, r3, #31
 8000944:	4413      	add	r3, r2
 8000946:	105b      	asrs	r3, r3, #1
 8000948:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < length; i++) {
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
 800094e:	e03a      	b.n	80009c6 <Fill_Triangle_Wave+0x9e>
		int pos = i % samples_per_cycle;
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	fb93 f2f2 	sdiv	r2, r3, r2
 8000958:	6979      	ldr	r1, [r7, #20]
 800095a:	fb01 f202 	mul.w	r2, r1, r2
 800095e:	1a9b      	subs	r3, r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
		int16_t val = (pos < half)
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	429a      	cmp	r2, r3
 8000968:	da0f      	bge.n	800098a <Fill_Triangle_Wave+0x62>
			? (-0x3FFF + (2 * 0x3FFF * pos) / half)
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	4613      	mov	r3, r2
 800096e:	039b      	lsls	r3, r3, #14
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	461a      	mov	r2, r3
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	fb92 f3f3 	sdiv	r3, r2, r3
 800097c:	b29b      	uxth	r3, r3
 800097e:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8000982:	3b3f      	subs	r3, #63	@ 0x3f
 8000984:	b29b      	uxth	r3, r3
		int16_t val = (pos < half)
 8000986:	b21b      	sxth	r3, r3
 8000988:	e010      	b.n	80009ac <Fill_Triangle_Wave+0x84>
			: (0x3FFF - (2 * 0x3FFF * (pos - half)) / half);
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	1ad2      	subs	r2, r2, r3
 8000990:	4613      	mov	r3, r2
 8000992:	039b      	lsls	r3, r3, #14
 8000994:	1a9b      	subs	r3, r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	461a      	mov	r2, r3
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	fb92 f3f3 	sdiv	r3, r2, r3
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	f5c3 537f 	rsb	r3, r3, #16320	@ 0x3fc0
 80009a6:	333f      	adds	r3, #63	@ 0x3f
 80009a8:	b29b      	uxth	r3, r3
		int16_t val = (pos < half)
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	817b      	strh	r3, [r7, #10]
		buffer[i] = (uint16_t)(val + 0x8000); // Décalage pour DAC
 80009ae:	897a      	ldrh	r2, [r7, #10]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	440b      	add	r3, r1
 80009b8:	f5a2 4200 	sub.w	r2, r2, #32768	@ 0x8000
 80009bc:	b292      	uxth	r2, r2
 80009be:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	3301      	adds	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dbc0      	blt.n	8000950 <Fill_Triangle_Wave+0x28>
	}
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	3724      	adds	r7, #36	@ 0x24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009e2:	f000 fecd 	bl	8001780 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009e6:	f000 f86b 	bl	8000ac0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80009ea:	f000 f8ba 	bl	8000b62 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009ee:	f7ff fdfb 	bl	80005e8 <MX_GPIO_Init>
	MX_DMA_Init();
 80009f2:	f7ff fdd3 	bl	800059c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80009f6:	f000 fe0d 	bl	8001614 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 80009fa:	f000 fc3f 	bl	800127c <MX_SPI3_Init>
	MX_I2C2_Init();
 80009fe:	f7ff fe75 	bl	80006ec <MX_I2C2_Init>
	MX_SAI2_Init();
 8000a02:	f000 f98d 	bl	8000d20 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000a06:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <main+0xc4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <main+0xc4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000a14:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8000a16:	200a      	movs	r0, #10
 8000a18:	f000 ff2e 	bl	8001878 <HAL_Delay>
	SGTL5000_Init();
 8000a1c:	f000 fb16 	bl	800104c <SGTL5000_Init>
	mcp23s17.hspi = &hspi3;
 8000a20:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <main+0xc8>)
 8000a22:	4a21      	ldr	r2, [pc, #132]	@ (8000aa8 <main+0xcc>)
 8000a24:	601a      	str	r2, [r3, #0]
	mcp23s17.CS_Port = SPI3_nCS_GPIO_Port;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <main+0xc8>)
 8000a28:	4a20      	ldr	r2, [pc, #128]	@ (8000aac <main+0xd0>)
 8000a2a:	605a      	str	r2, [r3, #4]
	mcp23s17.CS_Pin = SPI3_nCS_Pin;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <main+0xc8>)
 8000a2e:	2280      	movs	r2, #128	@ 0x80
 8000a30:	811a      	strh	r2, [r3, #8]
	MCP23S17_Init(&mcp23s17);
 8000a32:	481c      	ldr	r0, [pc, #112]	@ (8000aa4 <main+0xc8>)
 8000a34:	f000 f8f0 	bl	8000c18 <MCP23S17_Init>

	Read_CODEC_ChipID();
 8000a38:	f7ff ff08 	bl	800084c <Read_CODEC_ChipID>

	Fill_Triangle_Wave(txBuffer, AUDIO_BUFFER_SIZE);
 8000a3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a40:	481b      	ldr	r0, [pc, #108]	@ (8000ab0 <main+0xd4>)
 8000a42:	f7ff ff71 	bl	8000928 <Fill_Triangle_Wave>
	for (int i = 0; i < 10; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	e00b      	b.n	8000a64 <main+0x88>
		printf("txBuffer[%d] = 0x%04X\r\n", i, txBuffer[i]);
 8000a4c:	4a18      	ldr	r2, [pc, #96]	@ (8000ab0 <main+0xd4>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a54:	461a      	mov	r2, r3
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	4816      	ldr	r0, [pc, #88]	@ (8000ab4 <main+0xd8>)
 8000a5a:	f006 fdc1 	bl	80075e0 <iprintf>
	for (int i = 0; i < 10; i++) {
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3301      	adds	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b09      	cmp	r3, #9
 8000a68:	ddf0      	ble.n	8000a4c <main+0x70>
	}
	printf("Dernier échantillon : txBuffer[%d] = 0x%04X\r\n", AUDIO_BUFFER_SIZE - 1, txBuffer[AUDIO_BUFFER_SIZE - 1]);
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <main+0xd4>)
 8000a6c:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	@ 0x1fe
 8000a70:	461a      	mov	r2, r3
 8000a72:	21ff      	movs	r1, #255	@ 0xff
 8000a74:	4810      	ldr	r0, [pc, #64]	@ (8000ab8 <main+0xdc>)
 8000a76:	f006 fdb3 	bl	80075e0 <iprintf>
	Start_SAI_Audio();
 8000a7a:	f7ff ff19 	bl	80008b0 <Start_SAI_Audio>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a7e:	2120      	movs	r1, #32
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f001 fc66 	bl	8002354 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a88:	2064      	movs	r0, #100	@ 0x64
 8000a8a:	f000 fef5 	bl	8001878 <HAL_Delay>
		printf("Test printf bien\r\n");
 8000a8e:	480b      	ldr	r0, [pc, #44]	@ (8000abc <main+0xe0>)
 8000a90:	f006 fe0e 	bl	80076b0 <puts>

		MCP23S17_Chenillard(&mcp23s17, 200);
 8000a94:	21c8      	movs	r1, #200	@ 0xc8
 8000a96:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <main+0xc8>)
 8000a98:	f000 f913 	bl	8000cc2 <MCP23S17_Chenillard>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a9c:	bf00      	nop
 8000a9e:	e7ee      	b.n	8000a7e <main+0xa2>
 8000aa0:	200004e4 	.word	0x200004e4
 8000aa4:	200000d8 	.word	0x200000d8
 8000aa8:	20000680 	.word	0x20000680
 8000aac:	48000400 	.word	0x48000400
 8000ab0:	200002e4 	.word	0x200002e4
 8000ab4:	0800842c 	.word	0x0800842c
 8000ab8:	08008444 	.word	0x08008444
 8000abc:	08008474 	.word	0x08008474

08000ac0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b096      	sub	sp, #88	@ 0x58
 8000ac4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2244      	movs	r2, #68	@ 0x44
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f006 fece 	bl	8007870 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ae2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ae6:	f002 fa81 	bl	8002fec <HAL_PWREx_ControlVoltageScaling>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000af0:	f000 f861 	bl	8000bb6 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000afc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afe:	2310      	movs	r3, #16
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b02:	2302      	movs	r3, #2
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b06:	2302      	movs	r3, #2
 8000b08:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000b0e:	230a      	movs	r3, #10
 8000b10:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b12:	2307      	movs	r3, #7
 8000b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fab8 	bl	8003098 <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000b2e:	f000 f842 	bl	8000bb6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	230f      	movs	r3, #15
 8000b34:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2303      	movs	r3, #3
 8000b38:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b46:	463b      	mov	r3, r7
 8000b48:	2104      	movs	r1, #4
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fe80 	bl	8003850 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000b56:	f000 f82e 	bl	8000bb6 <Error_Handler>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3758      	adds	r7, #88	@ 0x58
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b0a2      	sub	sp, #136	@ 0x88
 8000b66:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2288      	movs	r2, #136	@ 0x88
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f006 fe7e 	bl	8007870 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000b74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b78:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000b86:	230d      	movs	r3, #13
 8000b88:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000b8a:	2311      	movs	r3, #17
 8000b8c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000b96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9a:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 f87a 	bl	8003c98 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000baa:	f000 f804 	bl	8000bb6 <Error_Handler>
	}
}
 8000bae:	bf00      	nop
 8000bb0:	3788      	adds	r7, #136	@ 0x88
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bba:	b672      	cpsid	i
}
 8000bbc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bbe:	bf00      	nop
 8000bc0:	e7fd      	b.n	8000bbe <Error_Handler+0x8>

08000bc2 <MCP23S17_WriteRegister>:
#include <string.h>
#include <stdlib.h>
#include "stdio.h"

// Écriture d'un registre du MCP23S17
static void MCP23S17_WriteRegister(MCP23S17_HandleTypeDef *dev, uint8_t reg, uint8_t value) {
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	70fb      	strb	r3, [r7, #3]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	70bb      	strb	r3, [r7, #2]
	uint8_t data[3] = {MCP23S17_OPCODE_WRITE, reg, value};
 8000bd2:	2340      	movs	r3, #64	@ 0x40
 8000bd4:	733b      	strb	r3, [r7, #12]
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	737b      	strb	r3, [r7, #13]
 8000bda:	78bb      	ldrb	r3, [r7, #2]
 8000bdc:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_RESET);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6858      	ldr	r0, [r3, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	891b      	ldrh	r3, [r3, #8]
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	f001 fb9b 	bl	8002324 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspi, data, 3, HAL_MAX_DELAY);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	f107 010c 	add.w	r1, r7, #12
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	f005 fba7 	bl	800634e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_SET);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6858      	ldr	r0, [r3, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	891b      	ldrh	r3, [r3, #8]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f001 fb8a 	bl	8002324 <HAL_GPIO_WritePin>
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <MCP23S17_Init>:

// Initialisation du MCP23S17
void MCP23S17_Init(MCP23S17_HandleTypeDef *dev) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	MCP23S17_WriteRegister(dev, MCP23S17_IODIRA, 0x00);  // GPA en sortie
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ffcc 	bl	8000bc2 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(dev, MCP23S17_IODIRB, 0x00);  // GPB en sortie
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffc7 	bl	8000bc2 <MCP23S17_WriteRegister>
	MCP23S17_ClearAllLEDs(dev);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 f832 	bl	8000c9e <MCP23S17_ClearAllLEDs>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <MCP23S17_SetLED>:

void MCP23S17_SetLED(MCP23S17_HandleTypeDef *dev, uint8_t gpio, uint8_t led) {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	70fb      	strb	r3, [r7, #3]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	70bb      	strb	r3, [r7, #2]
	// Éteindre toutes les LEDs du port en cours
	if (gpio == 0) {
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10f      	bne.n	8000c78 <MCP23S17_SetLED+0x36>
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, (1 << led));  // Allume une seule LED sur GPA
 8000c58:	78bb      	ldrb	r3, [r7, #2]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	2112      	movs	r1, #18
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffab 	bl	8000bc2 <MCP23S17_WriteRegister>
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, 0x00);        // Éteint toutes les LEDs sur GPB
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2113      	movs	r1, #19
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ffa6 	bl	8000bc2 <MCP23S17_WriteRegister>
	} else {
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, (1 << led));  // Allume une seule LED sur GPB
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, 0x00);        // Éteint toutes les LEDs sur GPA
	}
}
 8000c76:	e00e      	b.n	8000c96 <MCP23S17_SetLED+0x54>
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, (1 << led));  // Allume une seule LED sur GPB
 8000c78:	78bb      	ldrb	r3, [r7, #2]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	2113      	movs	r1, #19
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ff9b 	bl	8000bc2 <MCP23S17_WriteRegister>
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, 0x00);        // Éteint toutes les LEDs sur GPA
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2112      	movs	r1, #18
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff96 	bl	8000bc2 <MCP23S17_WriteRegister>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <MCP23S17_ClearAllLEDs>:

// Éteindre toutes les LEDs
void MCP23S17_ClearAllLEDs(MCP23S17_HandleTypeDef *dev) {
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, 0x00);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2112      	movs	r1, #18
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ff89 	bl	8000bc2 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, 0x00);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2113      	movs	r1, #19
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff84 	bl	8000bc2 <MCP23S17_WriteRegister>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <MCP23S17_Chenillard>:

void MCP23S17_Chenillard(MCP23S17_HandleTypeDef *dev, uint8_t delay_ms) {
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	70fb      	strb	r3, [r7, #3]
	uint8_t step = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
	uint8_t gpio = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73bb      	strb	r3, [r7, #14]

	while (1) {
		MCP23S17_ClearAllLEDs(dev);  // Éteindre toutes les LEDs avant d'en allumer une
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffe1 	bl	8000c9e <MCP23S17_ClearAllLEDs>

		MCP23S17_SetLED(dev, gpio, step);
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffad 	bl	8000c42 <MCP23S17_SetLED>
		HAL_Delay(delay_ms);
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fdc4 	bl	8001878 <HAL_Delay>

		if (gpio == 0) {
 8000cf0:	7bbb      	ldrb	r3, [r7, #14]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10a      	bne.n	8000d0c <MCP23S17_Chenillard+0x4a>
			step++;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
			if (step > 7) {
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d9e9      	bls.n	8000cd6 <MCP23S17_Chenillard+0x14>
				step = 7;
 8000d02:	2307      	movs	r3, #7
 8000d04:	73fb      	strb	r3, [r7, #15]
				gpio = 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73bb      	strb	r3, [r7, #14]
 8000d0a:	e7e4      	b.n	8000cd6 <MCP23S17_Chenillard+0x14>
			}
		} else {
			if (step == 0) {
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <MCP23S17_Chenillard+0x56>
				gpio = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	73bb      	strb	r3, [r7, #14]
 8000d16:	e7de      	b.n	8000cd6 <MCP23S17_Chenillard+0x14>
			} else {
				step--;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
		MCP23S17_ClearAllLEDs(dev);  // Éteindre toutes les LEDs avant d'en allumer une
 8000d1e:	e7da      	b.n	8000cd6 <MCP23S17_Chenillard+0x14>

08000d20 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d26:	4a2b      	ldr	r2, [pc, #172]	@ (8000dd4 <MX_SAI2_Init+0xb4>)
 8000d28:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000d48:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d4a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000d4e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000d68:	2302      	movs	r3, #2
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4818      	ldr	r0, [pc, #96]	@ (8000dd0 <MX_SAI2_Init+0xb0>)
 8000d70:	f004 faac 	bl	80052cc <HAL_SAI_InitProtocol>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000d7a:	f7ff ff1c 	bl	8000bb6 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <MX_SAI2_Init+0xb8>)
 8000d80:	4a16      	ldr	r2, [pc, #88]	@ (8000ddc <MX_SAI2_Init+0xbc>)
 8000d82:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_SAI2_Init+0xb8>)
 8000d86:	2203      	movs	r2, #3
 8000d88:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <MX_SAI2_Init+0xb8>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_SAI2_Init+0xb8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <MX_SAI2_Init+0xb8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_SAI2_Init+0xb8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <MX_SAI2_Init+0xb8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <MX_SAI2_Init+0xb8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <MX_SAI2_Init+0xb8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000db4:	2302      	movs	r3, #2
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <MX_SAI2_Init+0xb8>)
 8000dbc:	f004 fa86 	bl	80052cc <HAL_SAI_InitProtocol>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000dc6:	f7ff fef6 	bl	8000bb6 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200004e4 	.word	0x200004e4
 8000dd4:	40015804 	.word	0x40015804
 8000dd8:	20000568 	.word	0x20000568
 8000ddc:	40015824 	.word	0x40015824

08000de0 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a64      	ldr	r2, [pc, #400]	@ (8000f80 <HAL_SAI_MspInit+0x1a0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d15e      	bne.n	8000eb0 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000df2:	4b64      	ldr	r3, [pc, #400]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d113      	bne.n	8000e22 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000dfa:	4b63      	ldr	r3, [pc, #396]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfe:	4a62      	ldr	r2, [pc, #392]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000e00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e06:	4b60      	ldr	r3, [pc, #384]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	204b      	movs	r0, #75	@ 0x4b
 8000e18:	f000 fe2d 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e1c:	204b      	movs	r0, #75	@ 0x4b
 8000e1e:	f000 fe46 	bl	8001aae <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000e22:	4b58      	ldr	r3, [pc, #352]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4a56      	ldr	r2, [pc, #344]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000e2a:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e2c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e3e:	230d      	movs	r3, #13
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4850      	ldr	r0, [pc, #320]	@ (8000f8c <HAL_SAI_MspInit+0x1ac>)
 8000e4a:	f001 f8c1 	bl	8001fd0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000e4e:	4b50      	ldr	r3, [pc, #320]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e50:	4a50      	ldr	r2, [pc, #320]	@ (8000f94 <HAL_SAI_MspInit+0x1b4>)
 8000e52:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000e54:	4b4e      	ldr	r3, [pc, #312]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e60:	4b4b      	ldr	r3, [pc, #300]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000e66:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e68:	2280      	movs	r2, #128	@ 0x80
 8000e6a:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e6c:	4b48      	ldr	r3, [pc, #288]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e72:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e74:	4b46      	ldr	r3, [pc, #280]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e7a:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000e7c:	4b44      	ldr	r3, [pc, #272]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e7e:	2220      	movs	r2, #32
 8000e80:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b43      	ldr	r3, [pc, #268]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000e88:	4841      	ldr	r0, [pc, #260]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e8a:	f000 fe2b 	bl	8001ae4 <HAL_DMA_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000e94:	f7ff fe8f 	bl	8000bb6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e9c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e9e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000ea8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000eaa:	4a39      	ldr	r2, [pc, #228]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a38      	ldr	r2, [pc, #224]	@ (8000f98 <HAL_SAI_MspInit+0x1b8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d15e      	bne.n	8000f78 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000eba:	4b32      	ldr	r3, [pc, #200]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d113      	bne.n	8000eea <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000ec2:	4b31      	ldr	r3, [pc, #196]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	4a30      	ldr	r2, [pc, #192]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000ec8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ece:	4b2e      	ldr	r3, [pc, #184]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	204b      	movs	r0, #75	@ 0x4b
 8000ee0:	f000 fdc9 	bl	8001a76 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000ee4:	204b      	movs	r0, #75	@ 0x4b
 8000ee6:	f000 fde2 	bl	8001aae <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000eea:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a24      	ldr	r2, [pc, #144]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000ef2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f06:	230d      	movs	r3, #13
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4822      	ldr	r0, [pc, #136]	@ (8000f9c <HAL_SAI_MspInit+0x1bc>)
 8000f12:	f001 f85d 	bl	8001fd0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000f16:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f18:	4a22      	ldr	r2, [pc, #136]	@ (8000fa4 <HAL_SAI_MspInit+0x1c4>)
 8000f1a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f3a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f42:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f46:	2220      	movs	r2, #32
 8000f48:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000f50:	4813      	ldr	r0, [pc, #76]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f52:	f000 fdc7 	bl	8001ae4 <HAL_DMA_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000f5c:	f7ff fe2b 	bl	8000bb6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f64:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f66:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f70:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40015804 	.word	0x40015804
 8000f84:	2000067c 	.word	0x2000067c
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	200005ec 	.word	0x200005ec
 8000f94:	4002006c 	.word	0x4002006c
 8000f98:	40015824 	.word	0x40015824
 8000f9c:	48000800 	.word	0x48000800
 8000fa0:	20000634 	.word	0x20000634
 8000fa4:	40020080 	.word	0x40020080

08000fa8 <SGTL5000_WriteRegister>:
#include "sgtl5000.h"
#include "stdio.h"

// Fonction d'écriture d'un registre
HAL_StatusTypeDef SGTL5000_WriteRegister(uint16_t reg, uint16_t value) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af04      	add	r7, sp, #16
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	80fb      	strh	r3, [r7, #6]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];
	data[0] = (value >> 8) & 0xFF;  // MSB
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	733b      	strb	r3, [r7, #12]
	data[1] = value & 0xFF;         // LSB
 8000fc2:	88bb      	ldrh	r3, [r7, #4]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	737b      	strb	r3, [r7, #13]

	return HAL_I2C_Mem_Write(&hi2c2, (SGTL5000_I2C_ADDRESS << 1), reg,
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2302      	movs	r3, #2
 8000fdc:	2114      	movs	r1, #20
 8000fde:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <SGTL5000_WriteRegister+0x48>)
 8000fe0:	f001 fa6e 	bl	80024c0 <HAL_I2C_Mem_Write>
 8000fe4:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT, data, 2, HAL_MAX_DELAY);
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000084 	.word	0x20000084

08000ff4 <SGTL5000_ReadRegister>:

// Fonction de lecture d'un registre
HAL_StatusTypeDef SGTL5000_ReadRegister(uint16_t reg, uint16_t *value) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2];
	if (HAL_I2C_Mem_Read(&hi2c2, (SGTL5000_I2C_ADDRESS << 1), reg,
 8001000:	88fa      	ldrh	r2, [r7, #6]
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2302      	movs	r3, #2
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2302      	movs	r3, #2
 8001014:	2114      	movs	r1, #20
 8001016:	480c      	ldr	r0, [pc, #48]	@ (8001048 <SGTL5000_ReadRegister+0x54>)
 8001018:	f001 fb66 	bl	80026e8 <HAL_I2C_Mem_Read>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10c      	bne.n	800103c <SGTL5000_ReadRegister+0x48>
			I2C_MEMADD_SIZE_16BIT, data, 2, HAL_MAX_DELAY) == HAL_OK) {
		*value = (data[0] << 8) | data[1];
 8001022:	7b3b      	ldrb	r3, [r7, #12]
 8001024:	b21b      	sxth	r3, r3
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	7b7b      	ldrb	r3, [r7, #13]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29a      	uxth	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	801a      	strh	r2, [r3, #0]
		return HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	e000      	b.n	800103e <SGTL5000_ReadRegister+0x4a>
	}
	return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000084 	.word	0x20000084

0800104c <SGTL5000_Init>:

// Fonction d'initialisation du SGTL5000
void SGTL5000_Init(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	printf("Initialisation du SGTL5000...\r\n");
 8001052:	4875      	ldr	r0, [pc, #468]	@ (8001228 <SGTL5000_Init+0x1dc>)
 8001054:	f006 fb2c 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_LINREG_CTRL, 0x0008) != HAL_OK)
 8001058:	2108      	movs	r1, #8
 800105a:	2026      	movs	r0, #38	@ 0x26
 800105c:	f7ff ffa4 	bl	8000fa8 <SGTL5000_WriteRegister>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <SGTL5000_Init+0x20>
		printf("Erreur configuration CHIP_LINREG_CTRL\r\n");
 8001066:	4871      	ldr	r0, [pc, #452]	@ (800122c <SGTL5000_Init+0x1e0>)
 8001068:	f006 fb22 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_ANA_POWER, 0x6AFF) != HAL_OK)
 800106c:	f646 21ff 	movw	r1, #27391	@ 0x6aff
 8001070:	2030      	movs	r0, #48	@ 0x30
 8001072:	f7ff ff99 	bl	8000fa8 <SGTL5000_WriteRegister>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <SGTL5000_Init+0x36>
		printf("Erreur configuration CHIP_ANA_POWER\r\n");
 800107c:	486c      	ldr	r0, [pc, #432]	@ (8001230 <SGTL5000_Init+0x1e4>)
 800107e:	f006 fb17 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_REF_CTRL, 0x004E) != HAL_OK)
 8001082:	214e      	movs	r1, #78	@ 0x4e
 8001084:	2028      	movs	r0, #40	@ 0x28
 8001086:	f7ff ff8f 	bl	8000fa8 <SGTL5000_WriteRegister>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <SGTL5000_Init+0x4a>
		printf("Erreur configuration CHIP_REF_CTRL\r\n");
 8001090:	4868      	ldr	r0, [pc, #416]	@ (8001234 <SGTL5000_Init+0x1e8>)
 8001092:	f006 fb0d 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_LINE_OUT_CTRL, 0x0322) != HAL_OK)
 8001096:	f240 3122 	movw	r1, #802	@ 0x322
 800109a:	202c      	movs	r0, #44	@ 0x2c
 800109c:	f7ff ff84 	bl	8000fa8 <SGTL5000_WriteRegister>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <SGTL5000_Init+0x60>
		printf("Erreur configuration CHIP_LINE_OUT_CTRL\r\n");
 80010a6:	4864      	ldr	r0, [pc, #400]	@ (8001238 <SGTL5000_Init+0x1ec>)
 80010a8:	f006 fb02 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_SHORT_CTRL, 0x1106) != HAL_OK)
 80010ac:	f241 1106 	movw	r1, #4358	@ 0x1106
 80010b0:	203c      	movs	r0, #60	@ 0x3c
 80010b2:	f7ff ff79 	bl	8000fa8 <SGTL5000_WriteRegister>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <SGTL5000_Init+0x76>
		printf("Erreur configuration CHIP_SHORT_CTRL\r\n");
 80010bc:	485f      	ldr	r0, [pc, #380]	@ (800123c <SGTL5000_Init+0x1f0>)
 80010be:	f006 faf7 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_ANA_CTRL, 0x0133) != HAL_OK)
 80010c2:	f240 1133 	movw	r1, #307	@ 0x133
 80010c6:	2024      	movs	r0, #36	@ 0x24
 80010c8:	f7ff ff6e 	bl	8000fa8 <SGTL5000_WriteRegister>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <SGTL5000_Init+0x8c>
		printf("Erreur configuration CHIP_ANA_CTRL\r\n");
 80010d2:	485b      	ldr	r0, [pc, #364]	@ (8001240 <SGTL5000_Init+0x1f4>)
 80010d4:	f006 faec 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_DIG_POWER, 0x0073) != HAL_OK)
 80010d8:	2173      	movs	r1, #115	@ 0x73
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff ff64 	bl	8000fa8 <SGTL5000_WriteRegister>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <SGTL5000_Init+0xa0>
		printf("Erreur configuration CHIP_DIG_POWER\r\n");
 80010e6:	4857      	ldr	r0, [pc, #348]	@ (8001244 <SGTL5000_Init+0x1f8>)
 80010e8:	f006 fae2 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_LINE_OUT_VOL, 0x0505) != HAL_OK)
 80010ec:	f240 5105 	movw	r1, #1285	@ 0x505
 80010f0:	202e      	movs	r0, #46	@ 0x2e
 80010f2:	f7ff ff59 	bl	8000fa8 <SGTL5000_WriteRegister>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <SGTL5000_Init+0xb6>
		printf("Erreur configuration CHIP_LINE_OUT_VOL\r\n");
 80010fc:	4852      	ldr	r0, [pc, #328]	@ (8001248 <SGTL5000_Init+0x1fc>)
 80010fe:	f006 fad7 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_CLK_CTRL, 0x0008) != HAL_OK)
 8001102:	2108      	movs	r1, #8
 8001104:	2004      	movs	r0, #4
 8001106:	f7ff ff4f 	bl	8000fa8 <SGTL5000_WriteRegister>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <SGTL5000_Init+0xca>
		printf("Erreur configuration CHIP_CLK_CTRL\r\n");
 8001110:	484e      	ldr	r0, [pc, #312]	@ (800124c <SGTL5000_Init+0x200>)
 8001112:	f006 facd 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_I2S_CTRL, 0x0010) != HAL_OK)
 8001116:	2110      	movs	r1, #16
 8001118:	2006      	movs	r0, #6
 800111a:	f7ff ff45 	bl	8000fa8 <SGTL5000_WriteRegister>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <SGTL5000_Init+0xde>
		printf("Erreur configuration CHIP_I2S_CTRL\r\n");
 8001124:	484a      	ldr	r0, [pc, #296]	@ (8001250 <SGTL5000_Init+0x204>)
 8001126:	f006 fac3 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_ADCDAC_CTRL, 0x0000) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	200e      	movs	r0, #14
 800112e:	f7ff ff3b 	bl	8000fa8 <SGTL5000_WriteRegister>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <SGTL5000_Init+0xf2>
		printf("Erreur configuration CHIP_ADCDAC_CTRL\r\n");
 8001138:	4846      	ldr	r0, [pc, #280]	@ (8001254 <SGTL5000_Init+0x208>)
 800113a:	f006 fab9 	bl	80076b0 <puts>

	if (SGTL5000_WriteRegister(CHIP_DAC_VOL, 0x3C3C) != HAL_OK)
 800113e:	f643 413c 	movw	r1, #15420	@ 0x3c3c
 8001142:	2010      	movs	r0, #16
 8001144:	f7ff ff30 	bl	8000fa8 <SGTL5000_WriteRegister>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <SGTL5000_Init+0x108>
		printf("Erreur configuration CHIP_DAC_VOL\r\n");
 800114e:	4842      	ldr	r0, [pc, #264]	@ (8001258 <SGTL5000_Init+0x20c>)
 8001150:	f006 faae 	bl	80076b0 <puts>

	uint16_t val;
	SGTL5000_ReadRegister(CHIP_ANA_POWER, &val);
 8001154:	1dbb      	adds	r3, r7, #6
 8001156:	4619      	mov	r1, r3
 8001158:	2030      	movs	r0, #48	@ 0x30
 800115a:	f7ff ff4b 	bl	8000ff4 <SGTL5000_ReadRegister>
	printf("CHIP_ANA_POWER = 0x%04X\r\n", val);
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	4619      	mov	r1, r3
 8001162:	483e      	ldr	r0, [pc, #248]	@ (800125c <SGTL5000_Init+0x210>)
 8001164:	f006 fa3c 	bl	80075e0 <iprintf>

	SGTL5000_ReadRegister(CHIP_DIG_POWER, &val);
 8001168:	1dbb      	adds	r3, r7, #6
 800116a:	4619      	mov	r1, r3
 800116c:	2002      	movs	r0, #2
 800116e:	f7ff ff41 	bl	8000ff4 <SGTL5000_ReadRegister>
	printf("CHIP_DIG_POWER = 0x%04X\r\n", val);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4619      	mov	r1, r3
 8001176:	483a      	ldr	r0, [pc, #232]	@ (8001260 <SGTL5000_Init+0x214>)
 8001178:	f006 fa32 	bl	80075e0 <iprintf>

	SGTL5000_ReadRegister(0x000A, &val); // CHIP_SSS_CTRL
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	4619      	mov	r1, r3
 8001180:	200a      	movs	r0, #10
 8001182:	f7ff ff37 	bl	8000ff4 <SGTL5000_ReadRegister>
	printf("CHIP_SSS_CTRL = 0x%04X\r\n", val);
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	4619      	mov	r1, r3
 800118a:	4836      	ldr	r0, [pc, #216]	@ (8001264 <SGTL5000_Init+0x218>)
 800118c:	f006 fa28 	bl	80075e0 <iprintf>

	SGTL5000_ReadRegister(0x0100, &val); // DAP_CONTROL
 8001190:	1dbb      	adds	r3, r7, #6
 8001192:	4619      	mov	r1, r3
 8001194:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001198:	f7ff ff2c 	bl	8000ff4 <SGTL5000_ReadRegister>
	printf("DAP_CONTROL = 0x%04X\r\n", val);
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4619      	mov	r1, r3
 80011a0:	4831      	ldr	r0, [pc, #196]	@ (8001268 <SGTL5000_Init+0x21c>)
 80011a2:	f006 fa1d 	bl	80075e0 <iprintf>

	SGTL5000_ReadRegister(CHIP_ANA_CTRL, &val);
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	4619      	mov	r1, r3
 80011aa:	2024      	movs	r0, #36	@ 0x24
 80011ac:	f7ff ff22 	bl	8000ff4 <SGTL5000_ReadRegister>
	printf("CHIP_ANA_CTRL = 0x%04X\r\n", val);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	4619      	mov	r1, r3
 80011b4:	482d      	ldr	r0, [pc, #180]	@ (800126c <SGTL5000_Init+0x220>)
 80011b6:	f006 fa13 	bl	80075e0 <iprintf>

	SGTL5000_ReadRegister(CHIP_ADCDAC_CTRL, &val);
 80011ba:	1dbb      	adds	r3, r7, #6
 80011bc:	4619      	mov	r1, r3
 80011be:	200e      	movs	r0, #14
 80011c0:	f7ff ff18 	bl	8000ff4 <SGTL5000_ReadRegister>
	printf("CHIP_ADCDAC_CTRL = 0x%04X\r\n", val);
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4829      	ldr	r0, [pc, #164]	@ (8001270 <SGTL5000_Init+0x224>)
 80011ca:	f006 fa09 	bl	80075e0 <iprintf>

	SGTL5000_ReadRegister(CHIP_I2S_CTRL, &val);
 80011ce:	1dbb      	adds	r3, r7, #6
 80011d0:	4619      	mov	r1, r3
 80011d2:	2006      	movs	r0, #6
 80011d4:	f7ff ff0e 	bl	8000ff4 <SGTL5000_ReadRegister>
	printf("CHIP_I2S_CTRL = 0x%04X\r\n", val);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	4619      	mov	r1, r3
 80011dc:	4825      	ldr	r0, [pc, #148]	@ (8001274 <SGTL5000_Init+0x228>)
 80011de:	f006 f9ff 	bl	80075e0 <iprintf>

	// Démute LINEOUT
	uint16_t ana_ctrl;
	if (SGTL5000_ReadRegister(CHIP_ANA_CTRL, &ana_ctrl) == HAL_OK) {
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	2024      	movs	r0, #36	@ 0x24
 80011e8:	f7ff ff04 	bl	8000ff4 <SGTL5000_ReadRegister>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d109      	bne.n	8001206 <SGTL5000_Init+0x1ba>
		ana_ctrl &= ~(1 << 8); // Clear bit MUTE_LO
 80011f2:	88bb      	ldrh	r3, [r7, #4]
 80011f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	80bb      	strh	r3, [r7, #4]
		SGTL5000_WriteRegister(CHIP_ANA_CTRL, ana_ctrl);
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	4619      	mov	r1, r3
 8001200:	2024      	movs	r0, #36	@ 0x24
 8001202:	f7ff fed1 	bl	8000fa8 <SGTL5000_WriteRegister>
	}

	// Routing I2S_IN -> DAP -> DAC
	SGTL5000_WriteRegister(0x000A, 0x0030); // CHIP_SSS_CTRL: DAP_SELECT = I2S_IN, DAC_SELECT = DAP
 8001206:	2130      	movs	r1, #48	@ 0x30
 8001208:	200a      	movs	r0, #10
 800120a:	f7ff fecd 	bl	8000fa8 <SGTL5000_WriteRegister>
	SGTL5000_WriteRegister(0x0100, 0x0001); // DAP_CONTROL: DAP_EN = 1
 800120e:	2101      	movs	r1, #1
 8001210:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001214:	f7ff fec8 	bl	8000fa8 <SGTL5000_WriteRegister>

	printf("SGTL5000 initialisé avec succès !\r\n");
 8001218:	4817      	ldr	r0, [pc, #92]	@ (8001278 <SGTL5000_Init+0x22c>)
 800121a:	f006 fa49 	bl	80076b0 <puts>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	08008488 	.word	0x08008488
 800122c:	080084a8 	.word	0x080084a8
 8001230:	080084d0 	.word	0x080084d0
 8001234:	080084f8 	.word	0x080084f8
 8001238:	0800851c 	.word	0x0800851c
 800123c:	08008548 	.word	0x08008548
 8001240:	08008570 	.word	0x08008570
 8001244:	08008594 	.word	0x08008594
 8001248:	080085bc 	.word	0x080085bc
 800124c:	080085e4 	.word	0x080085e4
 8001250:	08008608 	.word	0x08008608
 8001254:	0800862c 	.word	0x0800862c
 8001258:	08008654 	.word	0x08008654
 800125c:	08008678 	.word	0x08008678
 8001260:	08008694 	.word	0x08008694
 8001264:	080086b0 	.word	0x080086b0
 8001268:	080086cc 	.word	0x080086cc
 800126c:	080086e4 	.word	0x080086e4
 8001270:	08008700 	.word	0x08008700
 8001274:	0800871c 	.word	0x0800871c
 8001278:	08008738 	.word	0x08008738

0800127c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <MX_SPI3_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	@ (80012f4 <MX_SPI3_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_SPI3_Init+0x74>)
 8001288:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800128c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800128e:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <MX_SPI3_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_SPI3_Init+0x74>)
 8001296:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800129a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_SPI3_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a2:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012ca:	2207      	movs	r2, #7
 80012cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012d6:	2208      	movs	r2, #8
 80012d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012dc:	f004 ff94 	bl	8006208 <HAL_SPI_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f7ff fc66 	bl	8000bb6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000680 	.word	0x20000680
 80012f4:	40003c00 	.word	0x40003c00

080012f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a25      	ldr	r2, [pc, #148]	@ (80013ac <HAL_SPI_MspInit+0xb4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d144      	bne.n	80013a4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800131a:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <HAL_SPI_MspInit+0xb8>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	4a24      	ldr	r2, [pc, #144]	@ (80013b0 <HAL_SPI_MspInit+0xb8>)
 8001320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001324:	6593      	str	r3, [r2, #88]	@ 0x58
 8001326:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <HAL_SPI_MspInit+0xb8>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <HAL_SPI_MspInit+0xb8>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a1e      	ldr	r2, [pc, #120]	@ (80013b0 <HAL_SPI_MspInit+0xb8>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <HAL_SPI_MspInit+0xb8>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <HAL_SPI_MspInit+0xb8>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	4a18      	ldr	r2, [pc, #96]	@ (80013b0 <HAL_SPI_MspInit+0xb8>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <HAL_SPI_MspInit+0xb8>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001362:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001374:	2306      	movs	r3, #6
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <HAL_SPI_MspInit+0xbc>)
 8001380:	f000 fe26 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001384:	2320      	movs	r3, #32
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001394:	2306      	movs	r3, #6
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	@ (80013b8 <HAL_SPI_MspInit+0xc0>)
 80013a0:	f000 fe16 	bl	8001fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	@ 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40003c00 	.word	0x40003c00
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000800 	.word	0x48000800
 80013b8:	48000400 	.word	0x48000400

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <HAL_MspInit+0x44>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <HAL_MspInit+0x44>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <HAL_MspInit+0x44>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_MspInit+0x44>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <NMI_Handler+0x4>

0800140c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <MemManage_Handler+0x4>

0800141c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <UsageFault_Handler+0x4>

0800142c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145a:	f000 f9ed 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <DMA1_Channel6_IRQHandler+0x10>)
 800146a:	f000 fcd2 	bl	8001e12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200005ec 	.word	0x200005ec

08001478 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <DMA1_Channel7_IRQHandler+0x10>)
 800147e:	f000 fcc8 	bl	8001e12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000634 	.word	0x20000634

0800148c <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <SAI2_IRQHandler+0x14>)
 8001492:	f004 fa63 	bl	800595c <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8001496:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <SAI2_IRQHandler+0x18>)
 8001498:	f004 fa60 	bl	800595c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200004e4 	.word	0x200004e4
 80014a4:	20000568 	.word	0x20000568

080014a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ba:	f3af 8000 	nop.w
 80014be:	4601      	mov	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
  }

  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e009      	b.n	8001508 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f993 	bl	8000828 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf1      	blt.n	80014f4 <_write+0x12>
  }
  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001542:	605a      	str	r2, [r3, #4]
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f006 f9aa 	bl	800790c <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20018000 	.word	0x20018000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	200006e4 	.word	0x200006e4
 80015ec:	200008c0 	.word	0x200008c0

080015f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <MX_USART2_UART_Init+0x58>)
 800161a:	4a15      	ldr	r2, [pc, #84]	@ (8001670 <MX_USART2_UART_Init+0x5c>)
 800161c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800161e:	4b13      	ldr	r3, [pc, #76]	@ (800166c <MX_USART2_UART_Init+0x58>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_USART2_UART_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_USART2_UART_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_USART2_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <MX_USART2_UART_Init+0x58>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <MX_USART2_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_USART2_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164a:	4b08      	ldr	r3, [pc, #32]	@ (800166c <MX_USART2_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_USART2_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_USART2_UART_Init+0x58>)
 8001658:	f005 f954 	bl	8006904 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001662:	f7ff faa8 	bl	8000bb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200006e8 	.word	0x200006e8
 8001670:	40004400 	.word	0x40004400

08001674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0ac      	sub	sp, #176	@ 0xb0
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2288      	movs	r2, #136	@ 0x88
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f006 f8eb 	bl	8007870 <memset>
  if(uartHandle->Instance==USART2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a21      	ldr	r2, [pc, #132]	@ (8001724 <HAL_UART_MspInit+0xb0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d13b      	bne.n	800171c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 faf1 	bl	8003c98 <HAL_RCCEx_PeriphCLKConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016bc:	f7ff fa7b 	bl	8000bb6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_UART_MspInit+0xb4>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	4a18      	ldr	r2, [pc, #96]	@ (8001728 <HAL_UART_MspInit+0xb4>)
 80016c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_UART_MspInit+0xb4>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <HAL_UART_MspInit+0xb4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016dc:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <HAL_UART_MspInit+0xb4>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e4:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <HAL_UART_MspInit+0xb4>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016f0:	230c      	movs	r3, #12
 80016f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001708:	2307      	movs	r3, #7
 800170a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001718:	f000 fc5a 	bl	8001fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800171c:	bf00      	nop
 800171e:	37b0      	adds	r7, #176	@ 0xb0
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40004400 	.word	0x40004400
 8001728:	40021000 	.word	0x40021000

0800172c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001730:	f7ff ff5e 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <LoopForever+0x6>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	@ (800176c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <LoopForever+0xe>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	@ (8001778 <LoopForever+0x16>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f006 f8dd 	bl	8007918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175e:	f7ff f93d 	bl	80009dc <main>

08001762 <LoopForever>:

LoopForever:
    b LoopForever
 8001762:	e7fe      	b.n	8001762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001764:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001770:	080087ec 	.word	0x080087ec
  ldr r2, =_sbss
 8001774:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001778:	200008c0 	.word	0x200008c0

0800177c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_2_IRQHandler>
	...

08001780 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178a:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <HAL_Init+0x3c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a0b      	ldr	r2, [pc, #44]	@ (80017bc <HAL_Init+0x3c>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001794:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001796:	2003      	movs	r0, #3
 8001798:	f000 f962 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179c:	2000      	movs	r0, #0
 800179e:	f000 f80f 	bl	80017c0 <HAL_InitTick>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	e001      	b.n	80017b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ae:	f7ff fe05 	bl	80013bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b2:	79fb      	ldrb	r3, [r7, #7]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <HAL_InitTick+0x6c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d023      	beq.n	800181c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017d4:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <HAL_InitTick+0x70>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b14      	ldr	r3, [pc, #80]	@ (800182c <HAL_InitTick+0x6c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f96d 	bl	8001aca <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10f      	bne.n	8001816 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d809      	bhi.n	8001810 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f937 	bl	8001a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001808:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <HAL_InitTick+0x74>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e007      	b.n	8001820 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e004      	b.n	8001820 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e001      	b.n	8001820 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_IncTick+0x20>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_IncTick+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <HAL_IncTick+0x24>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008
 800185c:	20000770 	.word	0x20000770

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000770 	.word	0x20000770

08001878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff ffee 	bl	8001860 <HAL_GetTick>
 8001884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d005      	beq.n	800189e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001892:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <HAL_Delay+0x44>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189e:	bf00      	nop
 80018a0:	f7ff ffde 	bl	8001860 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <HAL_Delay+0x28>
  {
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	@ (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	@ (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	@ (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	@ 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	@ 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e098      	b.n	8001c28 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b4d      	ldr	r3, [pc, #308]	@ (8001c34 <HAL_DMA_Init+0x150>)
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d80f      	bhi.n	8001b22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b4b      	ldr	r3, [pc, #300]	@ (8001c38 <HAL_DMA_Init+0x154>)
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c3c <HAL_DMA_Init+0x158>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	009a      	lsls	r2, r3, #2
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a48      	ldr	r2, [pc, #288]	@ (8001c40 <HAL_DMA_Init+0x15c>)
 8001b1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b20:	e00e      	b.n	8001b40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b46      	ldr	r3, [pc, #280]	@ (8001c44 <HAL_DMA_Init+0x160>)
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a43      	ldr	r2, [pc, #268]	@ (8001c3c <HAL_DMA_Init+0x158>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	009a      	lsls	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a42      	ldr	r2, [pc, #264]	@ (8001c48 <HAL_DMA_Init+0x164>)
 8001b3e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b9a:	d039      	beq.n	8001c10 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	4a27      	ldr	r2, [pc, #156]	@ (8001c40 <HAL_DMA_Init+0x15c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d11a      	bne.n	8001bdc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ba6:	4b29      	ldr	r3, [pc, #164]	@ (8001c4c <HAL_DMA_Init+0x168>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f003 031c 	and.w	r3, r3, #28
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4924      	ldr	r1, [pc, #144]	@ (8001c4c <HAL_DMA_Init+0x168>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001bc0:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <HAL_DMA_Init+0x168>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	f003 031c 	and.w	r3, r3, #28
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	491d      	ldr	r1, [pc, #116]	@ (8001c4c <HAL_DMA_Init+0x168>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
 8001bda:	e019      	b.n	8001c10 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c50 <HAL_DMA_Init+0x16c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be4:	f003 031c 	and.w	r3, r3, #28
 8001be8:	210f      	movs	r1, #15
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	4917      	ldr	r1, [pc, #92]	@ (8001c50 <HAL_DMA_Init+0x16c>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001bf6:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_DMA_Init+0x16c>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6859      	ldr	r1, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	f003 031c 	and.w	r3, r3, #28
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	4911      	ldr	r1, [pc, #68]	@ (8001c50 <HAL_DMA_Init+0x16c>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40020407 	.word	0x40020407
 8001c38:	bffdfff8 	.word	0xbffdfff8
 8001c3c:	cccccccd 	.word	0xcccccccd
 8001c40:	40020000 	.word	0x40020000
 8001c44:	bffdfbf8 	.word	0xbffdfbf8
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	400200a8 	.word	0x400200a8
 8001c50:	400204a8 	.word	0x400204a8

08001c54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_DMA_Start_IT+0x20>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e04b      	b.n	8001d0c <HAL_DMA_Start_IT+0xb8>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d13a      	bne.n	8001cfe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f95f 	bl	8001f70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d008      	beq.n	8001ccc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 020e 	orr.w	r2, r2, #14
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e00f      	b.n	8001cec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0204 	bic.w	r2, r2, #4
 8001cda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 020a 	orr.w	r2, r2, #10
 8001cea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e005      	b.n	8001d0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
 8001d08:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d008      	beq.n	8001d3e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e022      	b.n	8001d84 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 020e 	bic.w	r2, r2, #14
 8001d4c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f003 021c 	and.w	r2, r3, #28
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d005      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2204      	movs	r2, #4
 8001dac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e029      	b.n	8001e08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 020e 	bic.w	r2, r2, #14
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd8:	f003 021c 	and.w	r2, r3, #28
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
    }
  }
  return status;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	f003 031c 	and.w	r3, r3, #28
 8001e32:	2204      	movs	r2, #4
 8001e34:	409a      	lsls	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d026      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x7a>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d021      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0204 	bic.w	r2, r2, #4
 8001e64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f003 021c 	and.w	r2, r3, #28
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	2104      	movs	r1, #4
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d071      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e8a:	e06c      	b.n	8001f66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e90:	f003 031c 	and.w	r3, r3, #28
 8001e94:	2202      	movs	r2, #2
 8001e96:	409a      	lsls	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d02e      	beq.n	8001efe <HAL_DMA_IRQHandler+0xec>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d029      	beq.n	8001efe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 020a 	bic.w	r2, r2, #10
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	f003 021c 	and.w	r2, r3, #28
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	2102      	movs	r1, #2
 8001ede:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d038      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001efc:	e033      	b.n	8001f66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f003 031c 	and.w	r3, r3, #28
 8001f06:	2208      	movs	r2, #8
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d02a      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x156>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d025      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 020e 	bic.w	r2, r2, #14
 8001f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f30:	f003 021c 	and.w	r2, r3, #28
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
}
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	f003 021c 	and.w	r2, r3, #28
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d108      	bne.n	8001fb4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fb2:	e007      	b.n	8001fc4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	60da      	str	r2, [r3, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	e17f      	b.n	80022e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8171 	beq.w	80022da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d005      	beq.n	8002010 <HAL_GPIO_Init+0x40>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d130      	bne.n	8002072 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002046:	2201      	movs	r2, #1
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f003 0201 	and.w	r2, r3, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b03      	cmp	r3, #3
 800207c:	d118      	bne.n	80020b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002084:	2201      	movs	r2, #1
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	f003 0201 	and.w	r2, r3, #1
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d017      	beq.n	80020ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d123      	bne.n	8002140 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	08da      	lsrs	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3208      	adds	r2, #8
 8002100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	08da      	lsrs	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3208      	adds	r2, #8
 800213a:	6939      	ldr	r1, [r7, #16]
 800213c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0203 	and.w	r2, r3, #3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80ac 	beq.w	80022da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	4b5f      	ldr	r3, [pc, #380]	@ (8002300 <HAL_GPIO_Init+0x330>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	4a5e      	ldr	r2, [pc, #376]	@ (8002300 <HAL_GPIO_Init+0x330>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6613      	str	r3, [r2, #96]	@ 0x60
 800218e:	4b5c      	ldr	r3, [pc, #368]	@ (8002300 <HAL_GPIO_Init+0x330>)
 8002190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800219a:	4a5a      	ldr	r2, [pc, #360]	@ (8002304 <HAL_GPIO_Init+0x334>)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021c4:	d025      	beq.n	8002212 <HAL_GPIO_Init+0x242>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002308 <HAL_GPIO_Init+0x338>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01f      	beq.n	800220e <HAL_GPIO_Init+0x23e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4e      	ldr	r2, [pc, #312]	@ (800230c <HAL_GPIO_Init+0x33c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d019      	beq.n	800220a <HAL_GPIO_Init+0x23a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002310 <HAL_GPIO_Init+0x340>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <HAL_GPIO_Init+0x236>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002314 <HAL_GPIO_Init+0x344>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00d      	beq.n	8002202 <HAL_GPIO_Init+0x232>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002318 <HAL_GPIO_Init+0x348>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <HAL_GPIO_Init+0x22e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4a      	ldr	r2, [pc, #296]	@ (800231c <HAL_GPIO_Init+0x34c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_GPIO_Init+0x22a>
 80021f6:	2306      	movs	r3, #6
 80021f8:	e00c      	b.n	8002214 <HAL_GPIO_Init+0x244>
 80021fa:	2307      	movs	r3, #7
 80021fc:	e00a      	b.n	8002214 <HAL_GPIO_Init+0x244>
 80021fe:	2305      	movs	r3, #5
 8002200:	e008      	b.n	8002214 <HAL_GPIO_Init+0x244>
 8002202:	2304      	movs	r3, #4
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x244>
 8002206:	2303      	movs	r3, #3
 8002208:	e004      	b.n	8002214 <HAL_GPIO_Init+0x244>
 800220a:	2302      	movs	r3, #2
 800220c:	e002      	b.n	8002214 <HAL_GPIO_Init+0x244>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_GPIO_Init+0x244>
 8002212:	2300      	movs	r3, #0
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	f002 0203 	and.w	r2, r2, #3
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	4093      	lsls	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002224:	4937      	ldr	r1, [pc, #220]	@ (8002304 <HAL_GPIO_Init+0x334>)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002232:	4b3b      	ldr	r3, [pc, #236]	@ (8002320 <HAL_GPIO_Init+0x350>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002256:	4a32      	ldr	r2, [pc, #200]	@ (8002320 <HAL_GPIO_Init+0x350>)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800225c:	4b30      	ldr	r3, [pc, #192]	@ (8002320 <HAL_GPIO_Init+0x350>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002280:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <HAL_GPIO_Init+0x350>)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002286:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <HAL_GPIO_Init+0x350>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <HAL_GPIO_Init+0x350>)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <HAL_GPIO_Init+0x350>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022d4:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <HAL_GPIO_Init+0x350>)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f47f ae78 	bne.w	8001fe0 <HAL_GPIO_Init+0x10>
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	40010000 	.word	0x40010000
 8002308:	48000400 	.word	0x48000400
 800230c:	48000800 	.word	0x48000800
 8002310:	48000c00 	.word	0x48000c00
 8002314:	48001000 	.word	0x48001000
 8002318:	48001400 	.word	0x48001400
 800231c:	48001800 	.word	0x48001800
 8002320:	40010400 	.word	0x40010400

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002340:	e002      	b.n	8002348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4013      	ands	r3, r2
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43d9      	mvns	r1, r3
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	400b      	ands	r3, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e08d      	b.n	80024b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe f9dc 	bl	800076c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2224      	movs	r2, #36	@ 0x24
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	e006      	b.n	8002410 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800240e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d108      	bne.n	800242a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	e007      	b.n	800243a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002438:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800244c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800245c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69d9      	ldr	r1, [r3, #28]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1a      	ldr	r2, [r3, #32]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	817b      	strh	r3, [r7, #10]
 80024d2:	460b      	mov	r3, r1
 80024d4:	813b      	strh	r3, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	f040 80f9 	bne.w	80026da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_I2C_Mem_Write+0x34>
 80024ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0ed      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_I2C_Mem_Write+0x4e>
 800250a:	2302      	movs	r3, #2
 800250c:	e0e6      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002516:	f7ff f9a3 	bl	8001860 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2319      	movs	r3, #25
 8002522:	2201      	movs	r2, #1
 8002524:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fac3 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0d1      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2221      	movs	r2, #33	@ 0x21
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2240      	movs	r2, #64	@ 0x40
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a3a      	ldr	r2, [r7, #32]
 8002552:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002558:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002560:	88f8      	ldrh	r0, [r7, #6]
 8002562:	893a      	ldrh	r2, [r7, #8]
 8002564:	8979      	ldrh	r1, [r7, #10]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	4603      	mov	r3, r0
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f9d3 	bl	800291c <I2C_RequestMemoryWrite>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0a9      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2bff      	cmp	r3, #255	@ 0xff
 8002590:	d90e      	bls.n	80025b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	22ff      	movs	r2, #255	@ 0xff
 8002596:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	b2da      	uxtb	r2, r3
 800259e:	8979      	ldrh	r1, [r7, #10]
 80025a0:	2300      	movs	r3, #0
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fc47 	bl	8002e3c <I2C_TransferConfig>
 80025ae:	e00f      	b.n	80025d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	8979      	ldrh	r1, [r7, #10]
 80025c2:	2300      	movs	r3, #0
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fc36 	bl	8002e3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fac6 	bl	8002b66 <I2C_WaitOnTXISFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e07b      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d034      	beq.n	8002688 <HAL_I2C_Mem_Write+0x1c8>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002622:	2b00      	cmp	r3, #0
 8002624:	d130      	bne.n	8002688 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	@ 0x80
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fa3f 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e04d      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2bff      	cmp	r3, #255	@ 0xff
 8002648:	d90e      	bls.n	8002668 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	22ff      	movs	r2, #255	@ 0xff
 800264e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002654:	b2da      	uxtb	r2, r3
 8002656:	8979      	ldrh	r1, [r7, #10]
 8002658:	2300      	movs	r3, #0
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fbeb 	bl	8002e3c <I2C_TransferConfig>
 8002666:	e00f      	b.n	8002688 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002676:	b2da      	uxtb	r2, r3
 8002678:	8979      	ldrh	r1, [r7, #10]
 800267a:	2300      	movs	r3, #0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fbda 	bl	8002e3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d19e      	bne.n	80025d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 faac 	bl	8002bf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e01a      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2220      	movs	r2, #32
 80026ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_I2C_Mem_Write+0x224>)
 80026ba:	400b      	ands	r3, r1
 80026bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026da:	2302      	movs	r3, #2
  }
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	460b      	mov	r3, r1
 80026fc:	813b      	strh	r3, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	f040 80fd 	bne.w	800290a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_I2C_Mem_Read+0x34>
 8002716:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002722:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0f1      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Mem_Read+0x4e>
 8002732:	2302      	movs	r3, #2
 8002734:	e0ea      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800273e:	f7ff f88f 	bl	8001860 <HAL_GetTick>
 8002742:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2319      	movs	r3, #25
 800274a:	2201      	movs	r2, #1
 800274c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f9af 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0d5      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2222      	movs	r2, #34	@ 0x22
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2240      	movs	r2, #64	@ 0x40
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002780:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002788:	88f8      	ldrh	r0, [r7, #6]
 800278a:	893a      	ldrh	r2, [r7, #8]
 800278c:	8979      	ldrh	r1, [r7, #10]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4603      	mov	r3, r0
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f913 	bl	80029c4 <I2C_RequestMemoryRead>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0ad      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2bff      	cmp	r3, #255	@ 0xff
 80027b8:	d90e      	bls.n	80027d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	8979      	ldrh	r1, [r7, #10]
 80027c8:	4b52      	ldr	r3, [pc, #328]	@ (8002914 <HAL_I2C_Mem_Read+0x22c>)
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fb33 	bl	8002e3c <I2C_TransferConfig>
 80027d6:	e00f      	b.n	80027f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	8979      	ldrh	r1, [r7, #10]
 80027ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_I2C_Mem_Read+0x22c>)
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fb22 	bl	8002e3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	2200      	movs	r2, #0
 8002800:	2104      	movs	r1, #4
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f956 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07c      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d034      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x1d0>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	d130      	bne.n	80028b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285c:	2200      	movs	r2, #0
 800285e:	2180      	movs	r1, #128	@ 0x80
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f927 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e04d      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2bff      	cmp	r3, #255	@ 0xff
 8002878:	d90e      	bls.n	8002898 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002884:	b2da      	uxtb	r2, r3
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	2300      	movs	r3, #0
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fad3 	bl	8002e3c <I2C_TransferConfig>
 8002896:	e00f      	b.n	80028b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	8979      	ldrh	r1, [r7, #10]
 80028aa:	2300      	movs	r3, #0
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fac2 	bl	8002e3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d19a      	bne.n	80027f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f994 	bl	8002bf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e01a      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2220      	movs	r2, #32
 80028dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002918 <HAL_I2C_Mem_Read+0x230>)
 80028ea:	400b      	ands	r3, r1
 80028ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	80002400 	.word	0x80002400
 8002918:	fe00e800 	.word	0xfe00e800

0800291c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	460b      	mov	r3, r1
 8002930:	813b      	strh	r3, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	8979      	ldrh	r1, [r7, #10]
 800293c:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <I2C_RequestMemoryWrite+0xa4>)
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fa79 	bl	8002e3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	69b9      	ldr	r1, [r7, #24]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f909 	bl	8002b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e02c      	b.n	80029b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002964:	893b      	ldrh	r3, [r7, #8]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	629a      	str	r2, [r3, #40]	@ 0x28
 800296e:	e015      	b.n	800299c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002970:	893b      	ldrh	r3, [r7, #8]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	b29b      	uxth	r3, r3
 8002976:	b2da      	uxtb	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	69b9      	ldr	r1, [r7, #24]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f8ef 	bl	8002b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e012      	b.n	80029b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002992:	893b      	ldrh	r3, [r7, #8]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2200      	movs	r2, #0
 80029a4:	2180      	movs	r1, #128	@ 0x80
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f884 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	80002000 	.word	0x80002000

080029c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	8979      	ldrh	r1, [r7, #10]
 80029e4:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <I2C_RequestMemoryRead+0xa4>)
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2300      	movs	r3, #0
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fa26 	bl	8002e3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f8b6 	bl	8002b66 <I2C_WaitOnTXISFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e02c      	b.n	8002a5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0a:	893b      	ldrh	r3, [r7, #8]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a14:	e015      	b.n	8002a42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a16:	893b      	ldrh	r3, [r7, #8]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	69b9      	ldr	r1, [r7, #24]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f89c 	bl	8002b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e012      	b.n	8002a5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	@ 0x40
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f831 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	80002000 	.word	0x80002000

08002a6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d103      	bne.n	8002a8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d007      	beq.n	8002aa8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	619a      	str	r2, [r3, #24]
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac4:	e03b      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f8d6 	bl	8002c7c <I2C_IsErrorOccurred>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e041      	b.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d02d      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae2:	f7fe febd 	bl	8001860 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d122      	bne.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d113      	bne.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00f      	b.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4013      	ands	r3, r2
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d0b4      	beq.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b72:	e033      	b.n	8002bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f87f 	bl	8002c7c <I2C_IsErrorOccurred>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e031      	b.n	8002bec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d025      	beq.n	8002bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b90:	f7fe fe66 	bl	8001860 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11a      	bne.n	8002bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d013      	beq.n	8002bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e007      	b.n	8002bec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d1c4      	bne.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c00:	e02f      	b.n	8002c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f838 	bl	8002c7c <I2C_IsErrorOccurred>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e02d      	b.n	8002c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c16:	f7fe fe23 	bl	8001860 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d302      	bcc.n	8002c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11a      	bne.n	8002c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d013      	beq.n	8002c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e007      	b.n	8002c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d1c8      	bne.n	8002c02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	@ 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d068      	beq.n	8002d7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2210      	movs	r2, #16
 8002cae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cb0:	e049      	b.n	8002d46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d045      	beq.n	8002d46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fe fdd1 	bl	8001860 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <I2C_IsErrorOccurred+0x54>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d13a      	bne.n	8002d46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ce2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cf2:	d121      	bne.n	8002d38 <I2C_IsErrorOccurred+0xbc>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cfa:	d01d      	beq.n	8002d38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d01a      	beq.n	8002d38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d12:	f7fe fda5 	bl	8001860 <HAL_GetTick>
 8002d16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d18:	e00e      	b.n	8002d38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d1a:	f7fe fda1 	bl	8001860 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b19      	cmp	r3, #25
 8002d26:	d907      	bls.n	8002d38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f043 0320 	orr.w	r3, r3, #32
 8002d2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d36:	e006      	b.n	8002d46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d1e9      	bne.n	8002d1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d003      	beq.n	8002d5c <I2C_IsErrorOccurred+0xe0>
 8002d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0aa      	beq.n	8002cb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002de0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01c      	beq.n	8002e2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff fe3b 	bl	8002a6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <I2C_IsErrorOccurred+0x1bc>)
 8002e02:	400b      	ands	r3, r1
 8002e04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3728      	adds	r7, #40	@ 0x28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	fe00e800 	.word	0xfe00e800

08002e3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	817b      	strh	r3, [r7, #10]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e4e:	897b      	ldrh	r3, [r7, #10]
 8002e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e54:	7a7b      	ldrb	r3, [r7, #9]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	0d5b      	lsrs	r3, r3, #21
 8002e76:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e7a:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <I2C_TransferConfig+0x60>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	ea02 0103 	and.w	r1, r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e8e:	bf00      	nop
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	03ff63ff 	.word	0x03ff63ff

08002ea0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d138      	bne.n	8002f28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e032      	b.n	8002f2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	@ 0x24
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ef2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d139      	bne.n	8002fc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e033      	b.n	8002fc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2224      	movs	r2, #36	@ 0x24
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e000      	b.n	8002fc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40007000 	.word	0x40007000

08002fec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ffa:	d130      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffc:	4b23      	ldr	r3, [pc, #140]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003008:	d038      	beq.n	800307c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003012:	4a1e      	ldr	r2, [pc, #120]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003014:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2232      	movs	r2, #50	@ 0x32
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0c9b      	lsrs	r3, r3, #18
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003030:	e002      	b.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3b01      	subs	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003044:	d102      	bne.n	800304c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f2      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800304c:	4b0f      	ldr	r3, [pc, #60]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003058:	d110      	bne.n	800307c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e00f      	b.n	800307e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800305e:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306a:	d007      	beq.n	800307c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800306c:	4b07      	ldr	r3, [pc, #28]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003074:	4a05      	ldr	r2, [pc, #20]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003076:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800307a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40007000 	.word	0x40007000
 8003090:	20000000 	.word	0x20000000
 8003094:	431bde83 	.word	0x431bde83

08003098 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e3ca      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030aa:	4b97      	ldr	r3, [pc, #604]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b4:	4b94      	ldr	r3, [pc, #592]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80e4 	beq.w	8003294 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_RCC_OscConfig+0x4a>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	f040 808b 	bne.w	80031f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f040 8087 	bne.w	80031f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030e2:	4b89      	ldr	r3, [pc, #548]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_RCC_OscConfig+0x62>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e3a2      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1a      	ldr	r2, [r3, #32]
 80030fe:	4b82      	ldr	r3, [pc, #520]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <HAL_RCC_OscConfig+0x7c>
 800310a:	4b7f      	ldr	r3, [pc, #508]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003112:	e005      	b.n	8003120 <HAL_RCC_OscConfig+0x88>
 8003114:	4b7c      	ldr	r3, [pc, #496]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003120:	4293      	cmp	r3, r2
 8003122:	d223      	bcs.n	800316c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fd55 	bl	8003bd8 <RCC_SetFlashLatencyFromMSIRange>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e383      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003138:	4b73      	ldr	r3, [pc, #460]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a72      	ldr	r2, [pc, #456]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800313e:	f043 0308 	orr.w	r3, r3, #8
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b70      	ldr	r3, [pc, #448]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	496d      	ldr	r1, [pc, #436]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003156:	4b6c      	ldr	r3, [pc, #432]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	4968      	ldr	r1, [pc, #416]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003166:	4313      	orrs	r3, r2
 8003168:	604b      	str	r3, [r1, #4]
 800316a:	e025      	b.n	80031b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800316c:	4b66      	ldr	r3, [pc, #408]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a65      	ldr	r2, [pc, #404]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003172:	f043 0308 	orr.w	r3, r3, #8
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b63      	ldr	r3, [pc, #396]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4960      	ldr	r1, [pc, #384]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800318a:	4b5f      	ldr	r3, [pc, #380]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	495b      	ldr	r1, [pc, #364]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fd15 	bl	8003bd8 <RCC_SetFlashLatencyFromMSIRange>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e343      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031b8:	f000 fc4a 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b52      	ldr	r3, [pc, #328]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	4950      	ldr	r1, [pc, #320]	@ (800330c <HAL_RCC_OscConfig+0x274>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003310 <HAL_RCC_OscConfig+0x278>)
 80031d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe faef 	bl	80017c0 <HAL_InitTick>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d052      	beq.n	8003292 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	e327      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d032      	beq.n	800325e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031f8:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a42      	ldr	r2, [pc, #264]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003204:	f7fe fb2c 	bl	8001860 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800320c:	f7fe fb28 	bl	8001860 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e310      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800321e:	4b3a      	ldr	r3, [pc, #232]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800322a:	4b37      	ldr	r3, [pc, #220]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a36      	ldr	r2, [pc, #216]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003230:	f043 0308 	orr.w	r3, r3, #8
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4931      	ldr	r1, [pc, #196]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003248:	4b2f      	ldr	r3, [pc, #188]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	492c      	ldr	r1, [pc, #176]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
 800325c:	e01a      	b.n	8003294 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800325e:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a29      	ldr	r2, [pc, #164]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800326a:	f7fe faf9 	bl	8001860 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003272:	f7fe faf5 	bl	8001860 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e2dd      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003284:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f0      	bne.n	8003272 <HAL_RCC_OscConfig+0x1da>
 8003290:	e000      	b.n	8003294 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003292:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d074      	beq.n	800338a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d005      	beq.n	80032b2 <HAL_RCC_OscConfig+0x21a>
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b0c      	cmp	r3, #12
 80032aa:	d10e      	bne.n	80032ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d10b      	bne.n	80032ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b2:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d064      	beq.n	8003388 <HAL_RCC_OscConfig+0x2f0>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d160      	bne.n	8003388 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e2ba      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x24a>
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	e026      	b.n	8003330 <HAL_RCC_OscConfig+0x298>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032ea:	d115      	bne.n	8003318 <HAL_RCC_OscConfig+0x280>
 80032ec:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b03      	ldr	r3, [pc, #12]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a02      	ldr	r2, [pc, #8]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	e014      	b.n	8003330 <HAL_RCC_OscConfig+0x298>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	08008760 	.word	0x08008760
 8003310:	20000000 	.word	0x20000000
 8003314:	20000004 	.word	0x20000004
 8003318:	4ba0      	ldr	r3, [pc, #640]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a9f      	ldr	r2, [pc, #636]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b9d      	ldr	r3, [pc, #628]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a9c      	ldr	r2, [pc, #624]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800332e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fa92 	bl	8001860 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fa8e 	bl	8001860 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e276      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003352:	4b92      	ldr	r3, [pc, #584]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x2a8>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe fa7e 	bl	8001860 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fa7a 	bl	8001860 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	@ 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e262      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337a:	4b88      	ldr	r3, [pc, #544]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x2d0>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d060      	beq.n	8003458 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_OscConfig+0x310>
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d119      	bne.n	80033d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d116      	bne.n	80033d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a8:	4b7c      	ldr	r3, [pc, #496]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_OscConfig+0x328>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e23f      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b76      	ldr	r3, [pc, #472]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	4973      	ldr	r1, [pc, #460]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d4:	e040      	b.n	8003458 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d023      	beq.n	8003426 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033de:	4b6f      	ldr	r3, [pc, #444]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6e      	ldr	r2, [pc, #440]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe fa39 	bl	8001860 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fe fa35 	bl	8001860 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e21d      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003404:	4b65      	ldr	r3, [pc, #404]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b62      	ldr	r3, [pc, #392]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	495f      	ldr	r1, [pc, #380]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
 8003424:	e018      	b.n	8003458 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003426:	4b5d      	ldr	r3, [pc, #372]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a5c      	ldr	r2, [pc, #368]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800342c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fe fa15 	bl	8001860 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343a:	f7fe fa11 	bl	8001860 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e1f9      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800344c:	4b53      	ldr	r3, [pc, #332]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f0      	bne.n	800343a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d03c      	beq.n	80034de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800346c:	4b4b      	ldr	r3, [pc, #300]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800346e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003472:	4a4a      	ldr	r2, [pc, #296]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fe f9f0 	bl	8001860 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003484:	f7fe f9ec 	bl	8001860 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1d4      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003496:	4b41      	ldr	r3, [pc, #260]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ef      	beq.n	8003484 <HAL_RCC_OscConfig+0x3ec>
 80034a4:	e01b      	b.n	80034de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a6:	4b3d      	ldr	r3, [pc, #244]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ac:	4a3b      	ldr	r2, [pc, #236]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fe f9d3 	bl	8001860 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034be:	f7fe f9cf 	bl	8001860 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1b7      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d0:	4b32      	ldr	r3, [pc, #200]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ef      	bne.n	80034be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80a6 	beq.w	8003638 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ec:	2300      	movs	r3, #0
 80034ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034f0:	4b2a      	ldr	r3, [pc, #168]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10d      	bne.n	8003518 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	4b27      	ldr	r3, [pc, #156]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	4a26      	ldr	r2, [pc, #152]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
 8003508:	4b24      	ldr	r3, [pc, #144]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003514:	2301      	movs	r3, #1
 8003516:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003518:	4b21      	ldr	r3, [pc, #132]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d118      	bne.n	8003556 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003524:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003530:	f7fe f996 	bl	8001860 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003538:	f7fe f992 	bl	8001860 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e17a      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354a:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d108      	bne.n	8003570 <HAL_RCC_OscConfig+0x4d8>
 800355e:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003564:	4a0d      	ldr	r2, [pc, #52]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800356e:	e029      	b.n	80035c4 <HAL_RCC_OscConfig+0x52c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b05      	cmp	r3, #5
 8003576:	d115      	bne.n	80035a4 <HAL_RCC_OscConfig+0x50c>
 8003578:	4b08      	ldr	r3, [pc, #32]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357e:	4a07      	ldr	r2, [pc, #28]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358e:	4a03      	ldr	r2, [pc, #12]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003598:	e014      	b.n	80035c4 <HAL_RCC_OscConfig+0x52c>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
 80035a4:	4b9c      	ldr	r3, [pc, #624]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	4a9b      	ldr	r2, [pc, #620]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035b4:	4b98      	ldr	r3, [pc, #608]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	4a97      	ldr	r2, [pc, #604]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80035bc:	f023 0304 	bic.w	r3, r3, #4
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d016      	beq.n	80035fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe f948 	bl	8001860 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe f944 	bl	8001860 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e12a      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ed      	beq.n	80035d4 <HAL_RCC_OscConfig+0x53c>
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe f931 	bl	8001860 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe f92d 	bl	8001860 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e113      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003618:	4b7f      	ldr	r3, [pc, #508]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1ed      	bne.n	8003602 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362c:	4b7a      	ldr	r3, [pc, #488]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	4a79      	ldr	r2, [pc, #484]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 8003632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80fe 	beq.w	800383e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003646:	2b02      	cmp	r3, #2
 8003648:	f040 80d0 	bne.w	80037ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800364c:	4b72      	ldr	r3, [pc, #456]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0203 	and.w	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	429a      	cmp	r2, r3
 800365e:	d130      	bne.n	80036c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	3b01      	subs	r3, #1
 800366c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d127      	bne.n	80036c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d11f      	bne.n	80036c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800368c:	2a07      	cmp	r2, #7
 800368e:	bf14      	ite	ne
 8003690:	2201      	movne	r2, #1
 8003692:	2200      	moveq	r2, #0
 8003694:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003696:	4293      	cmp	r3, r2
 8003698:	d113      	bne.n	80036c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	3b01      	subs	r3, #1
 80036a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d109      	bne.n	80036c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d06e      	beq.n	80037a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	d069      	beq.n	800379c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036c8:	4b53      	ldr	r3, [pc, #332]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036d4:	4b50      	ldr	r3, [pc, #320]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0ad      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80036ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036f0:	f7fe f8b6 	bl	8001860 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe f8b2 	bl	8001860 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e09a      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370a:	4b43      	ldr	r3, [pc, #268]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003716:	4b40      	ldr	r3, [pc, #256]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	4b40      	ldr	r3, [pc, #256]	@ (800381c <HAL_RCC_OscConfig+0x784>)
 800371c:	4013      	ands	r3, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003726:	3a01      	subs	r2, #1
 8003728:	0112      	lsls	r2, r2, #4
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003730:	0212      	lsls	r2, r2, #8
 8003732:	4311      	orrs	r1, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003738:	0852      	lsrs	r2, r2, #1
 800373a:	3a01      	subs	r2, #1
 800373c:	0552      	lsls	r2, r2, #21
 800373e:	4311      	orrs	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003744:	0852      	lsrs	r2, r2, #1
 8003746:	3a01      	subs	r2, #1
 8003748:	0652      	lsls	r2, r2, #25
 800374a:	4311      	orrs	r1, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003750:	0912      	lsrs	r2, r2, #4
 8003752:	0452      	lsls	r2, r2, #17
 8003754:	430a      	orrs	r2, r1
 8003756:	4930      	ldr	r1, [pc, #192]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 8003758:	4313      	orrs	r3, r2
 800375a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800375c:	4b2e      	ldr	r3, [pc, #184]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2d      	ldr	r2, [pc, #180]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003766:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003768:	4b2b      	ldr	r3, [pc, #172]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a2a      	ldr	r2, [pc, #168]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003772:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003774:	f7fe f874 	bl	8001860 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fe f870 	bl	8001860 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e058      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	4b22      	ldr	r3, [pc, #136]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379a:	e050      	b.n	800383e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e04f      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d148      	bne.n	800383e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a19      	ldr	r2, [pc, #100]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80037b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b8:	4b17      	ldr	r3, [pc, #92]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a16      	ldr	r2, [pc, #88]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80037be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037c4:	f7fe f84c 	bl	8001860 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fe f848 	bl	8001860 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e030      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037de:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x734>
 80037ea:	e028      	b.n	800383e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d023      	beq.n	800383a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f2:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a08      	ldr	r2, [pc, #32]	@ (8003818 <HAL_RCC_OscConfig+0x780>)
 80037f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fe f82f 	bl	8001860 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003804:	e00c      	b.n	8003820 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003806:	f7fe f82b 	bl	8001860 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d905      	bls.n	8003820 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e013      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
 8003818:	40021000 	.word	0x40021000
 800381c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003820:	4b09      	ldr	r3, [pc, #36]	@ (8003848 <HAL_RCC_OscConfig+0x7b0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ec      	bne.n	8003806 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800382c:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_RCC_OscConfig+0x7b0>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4905      	ldr	r1, [pc, #20]	@ (8003848 <HAL_RCC_OscConfig+0x7b0>)
 8003832:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_RCC_OscConfig+0x7b4>)
 8003834:	4013      	ands	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
 8003838:	e001      	b.n	800383e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	feeefffc 	.word	0xfeeefffc

08003850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0e7      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b75      	ldr	r3, [pc, #468]	@ (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d910      	bls.n	8003894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b72      	ldr	r3, [pc, #456]	@ (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	4970      	ldr	r1, [pc, #448]	@ (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b6e      	ldr	r3, [pc, #440]	@ (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0cf      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	4b66      	ldr	r3, [pc, #408]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d908      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b63      	ldr	r3, [pc, #396]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4960      	ldr	r1, [pc, #384]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04c      	beq.n	8003968 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d121      	bne.n	8003926 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0a6      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ee:	4b54      	ldr	r3, [pc, #336]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d115      	bne.n	8003926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e09a      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003906:	4b4e      	ldr	r3, [pc, #312]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e08e      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003916:	4b4a      	ldr	r3, [pc, #296]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e086      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003926:	4b46      	ldr	r3, [pc, #280]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f023 0203 	bic.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4943      	ldr	r1, [pc, #268]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	4313      	orrs	r3, r2
 8003936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003938:	f7fd ff92 	bl	8001860 <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	e00a      	b.n	8003956 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003940:	f7fd ff8e 	bl	8001860 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e06e      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	4b3a      	ldr	r3, [pc, #232]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 020c 	and.w	r2, r3, #12
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	429a      	cmp	r2, r3
 8003966:	d1eb      	bne.n	8003940 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d010      	beq.n	8003996 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003980:	429a      	cmp	r2, r3
 8003982:	d208      	bcs.n	8003996 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b2e      	ldr	r3, [pc, #184]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	492b      	ldr	r1, [pc, #172]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003996:	4b29      	ldr	r3, [pc, #164]	@ (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d210      	bcs.n	80039c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a4:	4b25      	ldr	r3, [pc, #148]	@ (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 0207 	bic.w	r2, r3, #7
 80039ac:	4923      	ldr	r1, [pc, #140]	@ (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b4:	4b21      	ldr	r3, [pc, #132]	@ (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e036      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	4918      	ldr	r1, [pc, #96]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f0:	4b13      	ldr	r3, [pc, #76]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4910      	ldr	r1, [pc, #64]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a04:	f000 f824 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	490b      	ldr	r1, [pc, #44]	@ (8003a44 <HAL_RCC_ClockConfig+0x1f4>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	4a09      	ldr	r2, [pc, #36]	@ (8003a48 <HAL_RCC_ClockConfig+0x1f8>)
 8003a22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a24:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <HAL_RCC_ClockConfig+0x1fc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd fec9 	bl	80017c0 <HAL_InitTick>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a32:	7afb      	ldrb	r3, [r7, #11]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40022000 	.word	0x40022000
 8003a40:	40021000 	.word	0x40021000
 8003a44:	08008760 	.word	0x08008760
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	20000004 	.word	0x20000004

08003a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	@ 0x24
 8003a54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a68:	4b3b      	ldr	r3, [pc, #236]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x34>
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d121      	bne.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d11e      	bne.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a84:	4b34      	ldr	r3, [pc, #208]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a90:	4b31      	ldr	r3, [pc, #196]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	e005      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003aac:	4a2b      	ldr	r2, [pc, #172]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	e004      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ad4:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ad6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d134      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ade:	4b1e      	ldr	r3, [pc, #120]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d003      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0xac>
 8003af4:	e005      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003af6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003af8:	617b      	str	r3, [r7, #20]
      break;
 8003afa:	e005      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003afe:	617b      	str	r3, [r7, #20]
      break;
 8003b00:	e002      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	617b      	str	r3, [r7, #20]
      break;
 8003b06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b08:	4b13      	ldr	r3, [pc, #76]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	3301      	adds	r3, #1
 8003b14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	fb03 f202 	mul.w	r2, r3, r2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	0e5b      	lsrs	r3, r3, #25
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	3301      	adds	r3, #1
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b48:	69bb      	ldr	r3, [r7, #24]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	@ 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	08008778 	.word	0x08008778
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	007a1200 	.word	0x007a1200

08003b68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4904      	ldr	r1, [pc, #16]	@ (8003ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	08008770 	.word	0x08008770

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bb0:	f7ff ffda 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b06      	ldr	r3, [pc, #24]	@ (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0adb      	lsrs	r3, r3, #11
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4904      	ldr	r1, [pc, #16]	@ (8003bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	08008770 	.word	0x08008770

08003bd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003be4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bf0:	f7ff f9ee 	bl	8002fd0 <HAL_PWREx_GetVoltageRange>
 8003bf4:	6178      	str	r0, [r7, #20]
 8003bf6:	e014      	b.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bf8:	4b25      	ldr	r3, [pc, #148]	@ (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfc:	4a24      	ldr	r2, [pc, #144]	@ (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c04:	4b22      	ldr	r3, [pc, #136]	@ (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c10:	f7ff f9de 	bl	8002fd0 <HAL_PWREx_GetVoltageRange>
 8003c14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c16:	4b1e      	ldr	r3, [pc, #120]	@ (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c28:	d10b      	bne.n	8003c42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b80      	cmp	r3, #128	@ 0x80
 8003c2e:	d919      	bls.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c34:	d902      	bls.n	8003c3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c36:	2302      	movs	r3, #2
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e013      	b.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	e010      	b.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b80      	cmp	r3, #128	@ 0x80
 8003c46:	d902      	bls.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c48:	2303      	movs	r3, #3
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	e00a      	b.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b80      	cmp	r3, #128	@ 0x80
 8003c52:	d102      	bne.n	8003c5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c54:	2302      	movs	r3, #2
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	e004      	b.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b70      	cmp	r3, #112	@ 0x70
 8003c5e:	d101      	bne.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c60:	2301      	movs	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 0207 	bic.w	r2, r3, #7
 8003c6c:	4909      	ldr	r1, [pc, #36]	@ (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c74:	4b07      	ldr	r3, [pc, #28]	@ (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40022000 	.word	0x40022000

08003c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d041      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cbc:	d02a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cc2:	d824      	bhi.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cc8:	d008      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cce:	d81e      	bhi.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003cd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cd8:	d010      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cda:	e018      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cdc:	4b86      	ldr	r3, [pc, #536]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a85      	ldr	r2, [pc, #532]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ce8:	e015      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3304      	adds	r3, #4
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 f829 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cfa:	e00c      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3320      	adds	r3, #32
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 f914 	bl	8004f30 <RCCEx_PLLSAI2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d0c:	e003      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	74fb      	strb	r3, [r7, #19]
      break;
 8003d12:	e000      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d16:	7cfb      	ldrb	r3, [r7, #19]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1c:	4b76      	ldr	r3, [pc, #472]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d2a:	4973      	ldr	r1, [pc, #460]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d32:	e001      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
 8003d36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d041      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d4c:	d02a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d52:	d824      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d5e:	d81e      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d68:	d010      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d6a:	e018      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d6c:	4b62      	ldr	r3, [pc, #392]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a61      	ldr	r2, [pc, #388]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d78:	e015      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 ffe1 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d8a:	e00c      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3320      	adds	r3, #32
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 f8cc 	bl	8004f30 <RCCEx_PLLSAI2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d9c:	e003      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	74fb      	strb	r3, [r7, #19]
      break;
 8003da2:	e000      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da6:	7cfb      	ldrb	r3, [r7, #19]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dac:	4b52      	ldr	r3, [pc, #328]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dba:	494f      	ldr	r1, [pc, #316]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003dc2:	e001      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc4:	7cfb      	ldrb	r3, [r7, #19]
 8003dc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80a0 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dda:	4b47      	ldr	r3, [pc, #284]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dea:	2300      	movs	r3, #0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00d      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df0:	4b41      	ldr	r3, [pc, #260]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df4:	4a40      	ldr	r2, [pc, #256]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a3a      	ldr	r2, [pc, #232]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e18:	f7fd fd22 	bl	8001860 <HAL_GetTick>
 8003e1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e1e:	e009      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e20:	f7fd fd1e 	bl	8001860 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d902      	bls.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	74fb      	strb	r3, [r7, #19]
        break;
 8003e32:	e005      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e34:	4b31      	ldr	r3, [pc, #196]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ef      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d15c      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e46:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01f      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d019      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e64:	4b24      	ldr	r3, [pc, #144]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e70:	4b21      	ldr	r3, [pc, #132]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	4a20      	ldr	r2, [pc, #128]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e80:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e90:	4a19      	ldr	r2, [pc, #100]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d016      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fd fcdd 	bl	8001860 <HAL_GetTick>
 8003ea6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea8:	e00b      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fd fcd9 	bl	8001860 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d902      	bls.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	74fb      	strb	r3, [r7, #19]
            break;
 8003ec0:	e006      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ec      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed6:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003edc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ee6:	4904      	ldr	r1, [pc, #16]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003eee:	e009      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef0:	7cfb      	ldrb	r3, [r7, #19]
 8003ef2:	74bb      	strb	r3, [r7, #18]
 8003ef4:	e006      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f04:	7c7b      	ldrb	r3, [r7, #17]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4b9e      	ldr	r3, [pc, #632]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	4a9d      	ldr	r2, [pc, #628]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f22:	4b98      	ldr	r3, [pc, #608]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	f023 0203 	bic.w	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f30:	4994      	ldr	r1, [pc, #592]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f44:	4b8f      	ldr	r3, [pc, #572]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	f023 020c 	bic.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f52:	498c      	ldr	r1, [pc, #560]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f66:	4b87      	ldr	r3, [pc, #540]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	4983      	ldr	r1, [pc, #524]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f88:	4b7e      	ldr	r3, [pc, #504]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	497b      	ldr	r1, [pc, #492]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003faa:	4b76      	ldr	r3, [pc, #472]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb8:	4972      	ldr	r1, [pc, #456]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fcc:	4b6d      	ldr	r3, [pc, #436]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fda:	496a      	ldr	r1, [pc, #424]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fee:	4b65      	ldr	r3, [pc, #404]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffc:	4961      	ldr	r1, [pc, #388]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004010:	4b5c      	ldr	r3, [pc, #368]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401e:	4959      	ldr	r1, [pc, #356]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004032:	4b54      	ldr	r3, [pc, #336]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004038:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004040:	4950      	ldr	r1, [pc, #320]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004054:	4b4b      	ldr	r3, [pc, #300]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004062:	4948      	ldr	r1, [pc, #288]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004076:	4b43      	ldr	r3, [pc, #268]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004084:	493f      	ldr	r1, [pc, #252]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d028      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004098:	4b3a      	ldr	r3, [pc, #232]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a6:	4937      	ldr	r1, [pc, #220]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040b6:	d106      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b8:	4b32      	ldr	r3, [pc, #200]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a31      	ldr	r2, [pc, #196]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040c2:	60d3      	str	r3, [r2, #12]
 80040c4:	e011      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040ce:	d10c      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	2101      	movs	r1, #1
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fe36 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d028      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040f6:	4b23      	ldr	r3, [pc, #140]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004104:	491f      	ldr	r1, [pc, #124]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004114:	d106      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004116:	4b1b      	ldr	r3, [pc, #108]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	4a1a      	ldr	r2, [pc, #104]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004120:	60d3      	str	r3, [r2, #12]
 8004122:	e011      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800412c:	d10c      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3304      	adds	r3, #4
 8004132:	2101      	movs	r1, #1
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fe07 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d02b      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004154:	4b0b      	ldr	r3, [pc, #44]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	4908      	ldr	r1, [pc, #32]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004172:	d109      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004174:	4b03      	ldr	r3, [pc, #12]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a02      	ldr	r2, [pc, #8]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800417e:	60d3      	str	r3, [r2, #12]
 8004180:	e014      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004190:	d10c      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	2101      	movs	r1, #1
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fdd5 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02f      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041c6:	4928      	ldr	r1, [pc, #160]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041d6:	d10d      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fdb2 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d014      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	74bb      	strb	r3, [r7, #18]
 80041f2:	e011      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041fc:	d10c      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3320      	adds	r3, #32
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fe93 	bl	8004f30 <RCCEx_PLLSAI2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800420e:	7cfb      	ldrb	r3, [r7, #19]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004224:	4b10      	ldr	r3, [pc, #64]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004232:	490d      	ldr	r1, [pc, #52]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004246:	4b08      	ldr	r3, [pc, #32]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004256:	4904      	ldr	r1, [pc, #16]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800425e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40021000 	.word	0x40021000

0800426c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800427e:	d13e      	bne.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004280:	4bb2      	ldr	r3, [pc, #712]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004292:	d028      	beq.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800429a:	f200 8542 	bhi.w	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a4:	d005      	beq.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ac:	d00e      	beq.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80042ae:	f000 bd38 	b.w	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042b2:	4ba6      	ldr	r3, [pc, #664]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	f040 8532 	bne.w	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80042c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042c6:	61fb      	str	r3, [r7, #28]
      break;
 80042c8:	f000 bd2d 	b.w	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80042cc:	4b9f      	ldr	r3, [pc, #636]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	f040 8527 	bne.w	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80042dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80042e0:	61fb      	str	r3, [r7, #28]
      break;
 80042e2:	f000 bd22 	b.w	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042e6:	4b99      	ldr	r3, [pc, #612]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042f2:	f040 851c 	bne.w	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80042f6:	4b96      	ldr	r3, [pc, #600]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80042f8:	61fb      	str	r3, [r7, #28]
      break;
 80042fa:	f000 bd18 	b.w	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042fe:	4b93      	ldr	r3, [pc, #588]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d036      	beq.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d840      	bhi.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d003      	beq.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d020      	beq.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004320:	e039      	b.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004322:	4b8a      	ldr	r3, [pc, #552]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d116      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800432e:	4b87      	ldr	r3, [pc, #540]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800433a:	4b84      	ldr	r3, [pc, #528]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	e005      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004346:	4b81      	ldr	r3, [pc, #516]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800434c:	0a1b      	lsrs	r3, r3, #8
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	4a80      	ldr	r2, [pc, #512]	@ (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004358:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800435a:	e01f      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
      break;
 8004360:	e01c      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004362:	4b7a      	ldr	r3, [pc, #488]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436e:	d102      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004370:	4b79      	ldr	r3, [pc, #484]	@ (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004372:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004374:	e012      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
      break;
 800437a:	e00f      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800437c:	4b73      	ldr	r3, [pc, #460]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004388:	d102      	bne.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800438a:	4b74      	ldr	r3, [pc, #464]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800438c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800438e:	e005      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
      break;
 8004394:	e002      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	61bb      	str	r3, [r7, #24]
      break;
 800439a:	bf00      	nop
    }

    switch(PeriphClk)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043a2:	f000 80dd 	beq.w	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043ac:	f200 84c1 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043b6:	f000 80d3 	beq.w	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043c0:	f200 84b7 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ca:	f000 835f 	beq.w	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d4:	f200 84ad 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043de:	f000 847e 	beq.w	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043e8:	f200 84a3 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043f2:	f000 82cd 	beq.w	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043fc:	f200 8499 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004406:	f000 80ab 	beq.w	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004410:	f200 848f 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441a:	f000 8090 	beq.w	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004424:	f200 8485 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800442e:	d07f      	beq.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004436:	f200 847c 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004440:	f000 8403 	beq.w	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444a:	f200 8472 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004454:	f000 83af 	beq.w	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800445e:	f200 8468 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004468:	f000 8379 	beq.w	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004472:	f200 845e 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b80      	cmp	r3, #128	@ 0x80
 800447a:	f000 8344 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b80      	cmp	r3, #128	@ 0x80
 8004482:	f200 8456 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b20      	cmp	r3, #32
 800448a:	d84b      	bhi.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 844f 	beq.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3b01      	subs	r3, #1
 8004498:	2b1f      	cmp	r3, #31
 800449a:	f200 844a 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800449e:	a201      	add	r2, pc, #4	@ (adr r2, 80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	0800468d 	.word	0x0800468d
 80044a8:	080046fb 	.word	0x080046fb
 80044ac:	08004d33 	.word	0x08004d33
 80044b0:	0800478f 	.word	0x0800478f
 80044b4:	08004d33 	.word	0x08004d33
 80044b8:	08004d33 	.word	0x08004d33
 80044bc:	08004d33 	.word	0x08004d33
 80044c0:	08004815 	.word	0x08004815
 80044c4:	08004d33 	.word	0x08004d33
 80044c8:	08004d33 	.word	0x08004d33
 80044cc:	08004d33 	.word	0x08004d33
 80044d0:	08004d33 	.word	0x08004d33
 80044d4:	08004d33 	.word	0x08004d33
 80044d8:	08004d33 	.word	0x08004d33
 80044dc:	08004d33 	.word	0x08004d33
 80044e0:	0800488d 	.word	0x0800488d
 80044e4:	08004d33 	.word	0x08004d33
 80044e8:	08004d33 	.word	0x08004d33
 80044ec:	08004d33 	.word	0x08004d33
 80044f0:	08004d33 	.word	0x08004d33
 80044f4:	08004d33 	.word	0x08004d33
 80044f8:	08004d33 	.word	0x08004d33
 80044fc:	08004d33 	.word	0x08004d33
 8004500:	08004d33 	.word	0x08004d33
 8004504:	08004d33 	.word	0x08004d33
 8004508:	08004d33 	.word	0x08004d33
 800450c:	08004d33 	.word	0x08004d33
 8004510:	08004d33 	.word	0x08004d33
 8004514:	08004d33 	.word	0x08004d33
 8004518:	08004d33 	.word	0x08004d33
 800451c:	08004d33 	.word	0x08004d33
 8004520:	0800490f 	.word	0x0800490f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b40      	cmp	r3, #64	@ 0x40
 8004528:	f000 82c1 	beq.w	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800452c:	f000 bc01 	b.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004530:	69b9      	ldr	r1, [r7, #24]
 8004532:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004536:	f000 fdd9 	bl	80050ec <RCCEx_GetSAIxPeriphCLKFreq>
 800453a:	61f8      	str	r0, [r7, #28]
      break;
 800453c:	e3fa      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800453e:	69b9      	ldr	r1, [r7, #24]
 8004540:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004544:	f000 fdd2 	bl	80050ec <RCCEx_GetSAIxPeriphCLKFreq>
 8004548:	61f8      	str	r0, [r7, #28]
      break;
 800454a:	e3f3      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800454c:	40021000 	.word	0x40021000
 8004550:	0003d090 	.word	0x0003d090
 8004554:	08008778 	.word	0x08008778
 8004558:	00f42400 	.word	0x00f42400
 800455c:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004560:	4ba9      	ldr	r3, [pc, #676]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004566:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800456a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004572:	d00c      	beq.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800457a:	d87f      	bhi.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004582:	d04e      	beq.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800458a:	d01d      	beq.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 800458c:	e076      	b.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800458e:	4b9e      	ldr	r3, [pc, #632]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b02      	cmp	r3, #2
 8004598:	d172      	bne.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800459a:	4b9b      	ldr	r3, [pc, #620]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80045a6:	4b98      	ldr	r3, [pc, #608]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	e005      	b.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80045b2:	4b95      	ldr	r3, [pc, #596]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b8:	0a1b      	lsrs	r3, r3, #8
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	4a93      	ldr	r2, [pc, #588]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80045c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c4:	61fb      	str	r3, [r7, #28]
          break;
 80045c6:	e05b      	b.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80045c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045d4:	d156      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80045d6:	4b8c      	ldr	r3, [pc, #560]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045e2:	d14f      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80045e4:	4b88      	ldr	r3, [pc, #544]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ee:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	fb03 f202 	mul.w	r2, r3, r2
 80045f8:	4b83      	ldr	r3, [pc, #524]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	3301      	adds	r3, #1
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800460a:	4b7f      	ldr	r3, [pc, #508]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	0d5b      	lsrs	r3, r3, #21
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	3301      	adds	r3, #1
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	61fb      	str	r3, [r7, #28]
          break;
 8004620:	e030      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004622:	4b79      	ldr	r3, [pc, #484]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800462a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800462e:	d12b      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004630:	4b75      	ldr	r3, [pc, #468]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800463c:	d124      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800463e:	4b72      	ldr	r3, [pc, #456]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004648:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	fb03 f202 	mul.w	r2, r3, r2
 8004652:	4b6d      	ldr	r3, [pc, #436]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	3301      	adds	r3, #1
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004664:	4b68      	ldr	r3, [pc, #416]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	0d5b      	lsrs	r3, r3, #21
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	3301      	adds	r3, #1
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	61fb      	str	r3, [r7, #28]
          break;
 800467a:	e005      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800467c:	bf00      	nop
 800467e:	e359      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004680:	bf00      	nop
 8004682:	e357      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004684:	bf00      	nop
 8004686:	e355      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004688:	bf00      	nop
        break;
 800468a:	e353      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800468c:	4b5e      	ldr	r3, [pc, #376]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d827      	bhi.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800469e:	a201      	add	r2, pc, #4	@ (adr r2, 80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046bd 	.word	0x080046bd
 80046ac:	080046c5 	.word	0x080046c5
 80046b0:	080046d9 	.word	0x080046d9
          frequency = HAL_RCC_GetPCLK2Freq();
 80046b4:	f7ff fa7a 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 80046b8:	61f8      	str	r0, [r7, #28]
          break;
 80046ba:	e01d      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80046bc:	f7ff f9c8 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 80046c0:	61f8      	str	r0, [r7, #28]
          break;
 80046c2:	e019      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046c4:	4b50      	ldr	r3, [pc, #320]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d0:	d10f      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80046d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80046d4:	61fb      	str	r3, [r7, #28]
          break;
 80046d6:	e00c      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d107      	bne.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80046e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ea:	61fb      	str	r3, [r7, #28]
          break;
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80046ee:	bf00      	nop
 80046f0:	e320      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046f2:	bf00      	nop
 80046f4:	e31e      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046f6:	bf00      	nop
        break;
 80046f8:	e31c      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80046fa:	4b43      	ldr	r3, [pc, #268]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004700:	f003 030c 	and.w	r3, r3, #12
 8004704:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b0c      	cmp	r3, #12
 800470a:	d83a      	bhi.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800470c:	a201      	add	r2, pc, #4	@ (adr r2, 8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004749 	.word	0x08004749
 8004718:	08004783 	.word	0x08004783
 800471c:	08004783 	.word	0x08004783
 8004720:	08004783 	.word	0x08004783
 8004724:	08004751 	.word	0x08004751
 8004728:	08004783 	.word	0x08004783
 800472c:	08004783 	.word	0x08004783
 8004730:	08004783 	.word	0x08004783
 8004734:	08004759 	.word	0x08004759
 8004738:	08004783 	.word	0x08004783
 800473c:	08004783 	.word	0x08004783
 8004740:	08004783 	.word	0x08004783
 8004744:	0800476d 	.word	0x0800476d
          frequency = HAL_RCC_GetPCLK1Freq();
 8004748:	f7ff fa1a 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 800474c:	61f8      	str	r0, [r7, #28]
          break;
 800474e:	e01d      	b.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004750:	f7ff f97e 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004754:	61f8      	str	r0, [r7, #28]
          break;
 8004756:	e019      	b.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004758:	4b2b      	ldr	r3, [pc, #172]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004764:	d10f      	bne.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8004766:	4b2a      	ldr	r3, [pc, #168]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004768:	61fb      	str	r3, [r7, #28]
          break;
 800476a:	e00c      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800476c:	4b26      	ldr	r3, [pc, #152]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d107      	bne.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800477a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800477e:	61fb      	str	r3, [r7, #28]
          break;
 8004780:	e003      	b.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8004782:	bf00      	nop
 8004784:	e2d6      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004786:	bf00      	nop
 8004788:	e2d4      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800478a:	bf00      	nop
        break;
 800478c:	e2d2      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800478e:	4b1e      	ldr	r3, [pc, #120]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004794:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004798:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b30      	cmp	r3, #48	@ 0x30
 800479e:	d021      	beq.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b30      	cmp	r3, #48	@ 0x30
 80047a4:	d829      	bhi.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d011      	beq.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d823      	bhi.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d004      	beq.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80047be:	e01c      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7ff f9de 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 80047c4:	61f8      	str	r0, [r7, #28]
          break;
 80047c6:	e01d      	b.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80047c8:	f7ff f942 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 80047cc:	61f8      	str	r0, [r7, #28]
          break;
 80047ce:	e019      	b.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047dc:	d10f      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80047de:	4b0c      	ldr	r3, [pc, #48]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80047e0:	61fb      	str	r3, [r7, #28]
          break;
 80047e2:	e00c      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047e4:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d107      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80047f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047f6:	61fb      	str	r3, [r7, #28]
          break;
 80047f8:	e003      	b.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80047fa:	bf00      	nop
 80047fc:	e29a      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047fe:	bf00      	nop
 8004800:	e298      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004802:	bf00      	nop
        break;
 8004804:	e296      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000
 800480c:	08008778 	.word	0x08008778
 8004810:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004814:	4b9b      	ldr	r3, [pc, #620]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800481e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2bc0      	cmp	r3, #192	@ 0xc0
 8004824:	d021      	beq.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2bc0      	cmp	r3, #192	@ 0xc0
 800482a:	d829      	bhi.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b80      	cmp	r3, #128	@ 0x80
 8004830:	d011      	beq.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b80      	cmp	r3, #128	@ 0x80
 8004836:	d823      	bhi.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b40      	cmp	r3, #64	@ 0x40
 8004842:	d004      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004844:	e01c      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004846:	f7ff f99b 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 800484a:	61f8      	str	r0, [r7, #28]
          break;
 800484c:	e01d      	b.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800484e:	f7ff f8ff 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004852:	61f8      	str	r0, [r7, #28]
          break;
 8004854:	e019      	b.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004856:	4b8b      	ldr	r3, [pc, #556]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004862:	d10f      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004864:	4b88      	ldr	r3, [pc, #544]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004866:	61fb      	str	r3, [r7, #28]
          break;
 8004868:	e00c      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800486a:	4b86      	ldr	r3, [pc, #536]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d107      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800487c:	61fb      	str	r3, [r7, #28]
          break;
 800487e:	e003      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8004880:	bf00      	nop
 8004882:	e257      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004884:	bf00      	nop
 8004886:	e255      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004888:	bf00      	nop
        break;
 800488a:	e253      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800488c:	4b7d      	ldr	r3, [pc, #500]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004896:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800489e:	d025      	beq.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a6:	d82c      	bhi.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ae:	d013      	beq.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b6:	d824      	bhi.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c4:	d004      	beq.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80048c6:	e01c      	b.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048c8:	f7ff f95a 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 80048cc:	61f8      	str	r0, [r7, #28]
          break;
 80048ce:	e01d      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80048d0:	f7ff f8be 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 80048d4:	61f8      	str	r0, [r7, #28]
          break;
 80048d6:	e019      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e4:	d10f      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80048e6:	4b68      	ldr	r3, [pc, #416]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80048e8:	61fb      	str	r3, [r7, #28]
          break;
 80048ea:	e00c      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048ec:	4b65      	ldr	r3, [pc, #404]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d107      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80048fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048fe:	61fb      	str	r3, [r7, #28]
          break;
 8004900:	e003      	b.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004902:	bf00      	nop
 8004904:	e216      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004906:	bf00      	nop
 8004908:	e214      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800490a:	bf00      	nop
        break;
 800490c:	e212      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800490e:	4b5d      	ldr	r3, [pc, #372]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004914:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004918:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004920:	d025      	beq.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004928:	d82c      	bhi.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004930:	d013      	beq.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004938:	d824      	bhi.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d004      	beq.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004946:	d004      	beq.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004948:	e01c      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800494a:	f7ff f919 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 800494e:	61f8      	str	r0, [r7, #28]
          break;
 8004950:	e01d      	b.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004952:	f7ff f87d 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004956:	61f8      	str	r0, [r7, #28]
          break;
 8004958:	e019      	b.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800495a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004966:	d10f      	bne.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8004968:	4b47      	ldr	r3, [pc, #284]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800496a:	61fb      	str	r3, [r7, #28]
          break;
 800496c:	e00c      	b.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800496e:	4b45      	ldr	r3, [pc, #276]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b02      	cmp	r3, #2
 800497a:	d107      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800497c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004980:	61fb      	str	r3, [r7, #28]
          break;
 8004982:	e003      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004984:	bf00      	nop
 8004986:	e1d5      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004988:	bf00      	nop
 800498a:	e1d3      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800498c:	bf00      	nop
        break;
 800498e:	e1d1      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004990:	4b3c      	ldr	r3, [pc, #240]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004996:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800499a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049a2:	d00c      	beq.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049aa:	d864      	bhi.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049b2:	d008      	beq.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049ba:	d030      	beq.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80049bc:	e05b      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80049be:	f7ff f847 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 80049c2:	61f8      	str	r0, [r7, #28]
          break;
 80049c4:	e05c      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80049c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d2:	d152      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80049d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d04c      	beq.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80049e0:	4b28      	ldr	r3, [pc, #160]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	0a1b      	lsrs	r3, r3, #8
 80049e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ea:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	fb03 f202 	mul.w	r2, r3, r2
 80049f4:	4b23      	ldr	r3, [pc, #140]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	3301      	adds	r3, #1
 8004a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a04:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004a06:	4b1f      	ldr	r3, [pc, #124]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	0e5b      	lsrs	r3, r3, #25
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	3301      	adds	r3, #1
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	61fb      	str	r3, [r7, #28]
          break;
 8004a1c:	e02d      	b.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004a1e:	4b19      	ldr	r3, [pc, #100]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a2a:	d128      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004a2c:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d022      	beq.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004a38:	4b12      	ldr	r3, [pc, #72]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a42:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	fb03 f202 	mul.w	r2, r3, r2
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	3301      	adds	r3, #1
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004a5e:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	0e5b      	lsrs	r3, r3, #25
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	3301      	adds	r3, #1
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	61fb      	str	r3, [r7, #28]
          break;
 8004a74:	e003      	b.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8004a76:	bf00      	nop
 8004a78:	e15c      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a7a:	bf00      	nop
 8004a7c:	e15a      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a7e:	bf00      	nop
        break;
 8004a80:	e158      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
 8004a88:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004a8c:	4b9d      	ldr	r3, [pc, #628]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a96:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004a9e:	f7ff f885 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8004aa2:	61f8      	str	r0, [r7, #28]
        break;
 8004aa4:	e146      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004aa6:	f7fe ffd3 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004aaa:	61f8      	str	r0, [r7, #28]
        break;
 8004aac:	e142      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004aae:	4b95      	ldr	r3, [pc, #596]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004ab8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac0:	d013      	beq.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac8:	d819      	bhi.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d004      	beq.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad6:	d004      	beq.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004ad8:	e011      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ada:	f7ff f851 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8004ade:	61f8      	str	r0, [r7, #28]
          break;
 8004ae0:	e010      	b.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ae2:	f7fe ffb5 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004ae6:	61f8      	str	r0, [r7, #28]
          break;
 8004ae8:	e00c      	b.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004aea:	4b86      	ldr	r3, [pc, #536]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af6:	d104      	bne.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004af8:	4b83      	ldr	r3, [pc, #524]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004afa:	61fb      	str	r3, [r7, #28]
          break;
 8004afc:	e001      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004afe:	bf00      	nop
 8004b00:	e118      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b02:	bf00      	nop
        break;
 8004b04:	e116      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b06:	4b7f      	ldr	r3, [pc, #508]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b10:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b18:	d013      	beq.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b20:	d819      	bhi.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d004      	beq.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b2e:	d004      	beq.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004b30:	e011      	b.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b32:	f7ff f825 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8004b36:	61f8      	str	r0, [r7, #28]
          break;
 8004b38:	e010      	b.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fe ff89 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004b3e:	61f8      	str	r0, [r7, #28]
          break;
 8004b40:	e00c      	b.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b42:	4b70      	ldr	r3, [pc, #448]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b4e:	d104      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004b50:	4b6d      	ldr	r3, [pc, #436]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004b52:	61fb      	str	r3, [r7, #28]
          break;
 8004b54:	e001      	b.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004b56:	bf00      	nop
 8004b58:	e0ec      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b5a:	bf00      	nop
        break;
 8004b5c:	e0ea      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004b5e:	4b69      	ldr	r3, [pc, #420]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b68:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b70:	d013      	beq.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b78:	d819      	bhi.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b86:	d004      	beq.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004b88:	e011      	b.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b8a:	f7fe fff9 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8004b8e:	61f8      	str	r0, [r7, #28]
          break;
 8004b90:	e010      	b.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b92:	f7fe ff5d 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004b96:	61f8      	str	r0, [r7, #28]
          break;
 8004b98:	e00c      	b.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b9a:	4b5a      	ldr	r3, [pc, #360]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba6:	d104      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004ba8:	4b57      	ldr	r3, [pc, #348]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004baa:	61fb      	str	r3, [r7, #28]
          break;
 8004bac:	e001      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004bae:	bf00      	nop
 8004bb0:	e0c0      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004bb2:	bf00      	nop
        break;
 8004bb4:	e0be      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004bb6:	4b53      	ldr	r3, [pc, #332]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004bc0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bc8:	d02c      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bd0:	d833      	bhi.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004bd8:	d01a      	beq.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004be0:	d82b      	bhi.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bee:	d004      	beq.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004bf0:	e023      	b.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bf2:	f7fe ffc5 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8004bf6:	61f8      	str	r0, [r7, #28]
          break;
 8004bf8:	e026      	b.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004bfa:	4b42      	ldr	r3, [pc, #264]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d11a      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004c08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c0c:	61fb      	str	r3, [r7, #28]
          break;
 8004c0e:	e016      	b.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c10:	4b3c      	ldr	r3, [pc, #240]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1c:	d111      	bne.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004c20:	61fb      	str	r3, [r7, #28]
          break;
 8004c22:	e00e      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c24:	4b37      	ldr	r3, [pc, #220]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d109      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c36:	61fb      	str	r3, [r7, #28]
          break;
 8004c38:	e005      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004c3a:	bf00      	nop
 8004c3c:	e07a      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c3e:	bf00      	nop
 8004c40:	e078      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c42:	bf00      	nop
 8004c44:	e076      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c46:	bf00      	nop
        break;
 8004c48:	e074      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c50:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004c54:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c5c:	d02c      	beq.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c64:	d833      	bhi.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c6c:	d01a      	beq.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c74:	d82b      	bhi.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c82:	d004      	beq.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004c84:	e023      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c86:	f7fe ff7b 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8004c8a:	61f8      	str	r0, [r7, #28]
          break;
 8004c8c:	e026      	b.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d11a      	bne.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004c9c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ca0:	61fb      	str	r3, [r7, #28]
          break;
 8004ca2:	e016      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ca4:	4b17      	ldr	r3, [pc, #92]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb0:	d111      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004cb2:	4b15      	ldr	r3, [pc, #84]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004cb4:	61fb      	str	r3, [r7, #28]
          break;
 8004cb6:	e00e      	b.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004cb8:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d109      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cca:	61fb      	str	r3, [r7, #28]
          break;
 8004ccc:	e005      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004cce:	bf00      	nop
 8004cd0:	e030      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004cd2:	bf00      	nop
 8004cd4:	e02e      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004cd6:	bf00      	nop
 8004cd8:	e02c      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004cda:	bf00      	nop
        break;
 8004cdc:	e02a      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004cde:	4b09      	ldr	r3, [pc, #36]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ce8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf6:	d009      	beq.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004cf8:	e012      	b.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cfa:	f7fe ff41 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8004cfe:	61f8      	str	r0, [r7, #28]
          break;
 8004d00:	e00e      	b.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004d02:	bf00      	nop
 8004d04:	40021000 	.word	0x40021000
 8004d08:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d18:	d101      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004d1c:	61fb      	str	r3, [r7, #28]
          break;
 8004d1e:	bf00      	nop
        break;
 8004d20:	e008      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004d22:	bf00      	nop
 8004d24:	e006      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004d26:	bf00      	nop
 8004d28:	e004      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e002      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004d32:	bf00      	nop
    }
  }

  return(frequency);
 8004d34:	69fb      	ldr	r3, [r7, #28]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
 8004d44:	00f42400 	.word	0x00f42400

08004d48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d56:	4b75      	ldr	r3, [pc, #468]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d018      	beq.n	8004d94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d62:	4b72      	ldr	r3, [pc, #456]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0203 	and.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d10d      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
       ||
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	091b      	lsrs	r3, r3, #4
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
       ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d047      	beq.n	8004e1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
 8004d92:	e044      	b.n	8004e1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d018      	beq.n	8004dce <RCCEx_PLLSAI1_Config+0x86>
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d825      	bhi.n	8004dec <RCCEx_PLLSAI1_Config+0xa4>
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d002      	beq.n	8004daa <RCCEx_PLLSAI1_Config+0x62>
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d009      	beq.n	8004dbc <RCCEx_PLLSAI1_Config+0x74>
 8004da8:	e020      	b.n	8004dec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004daa:	4b60      	ldr	r3, [pc, #384]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d11d      	bne.n	8004df2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dba:	e01a      	b.n	8004df2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d116      	bne.n	8004df6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dcc:	e013      	b.n	8004df6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dce:	4b57      	ldr	r3, [pc, #348]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10f      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dda:	4b54      	ldr	r3, [pc, #336]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dea:	e006      	b.n	8004dfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
      break;
 8004df0:	e004      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004df2:	bf00      	nop
 8004df4:	e002      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004df6:	bf00      	nop
 8004df8:	e000      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10d      	bne.n	8004e1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e02:	4b4a      	ldr	r3, [pc, #296]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6819      	ldr	r1, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	430b      	orrs	r3, r1
 8004e18:	4944      	ldr	r1, [pc, #272]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d17d      	bne.n	8004f20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e24:	4b41      	ldr	r3, [pc, #260]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a40      	ldr	r2, [pc, #256]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e30:	f7fc fd16 	bl	8001860 <HAL_GetTick>
 8004e34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e36:	e009      	b.n	8004e4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e38:	f7fc fd12 	bl	8001860 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d902      	bls.n	8004e4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	73fb      	strb	r3, [r7, #15]
        break;
 8004e4a:	e005      	b.n	8004e58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e4c:	4b37      	ldr	r3, [pc, #220]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ef      	bne.n	8004e38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d160      	bne.n	8004f20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d111      	bne.n	8004e88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e64:	4b31      	ldr	r3, [pc, #196]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6892      	ldr	r2, [r2, #8]
 8004e74:	0211      	lsls	r1, r2, #8
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68d2      	ldr	r2, [r2, #12]
 8004e7a:	0912      	lsrs	r2, r2, #4
 8004e7c:	0452      	lsls	r2, r2, #17
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	492a      	ldr	r1, [pc, #168]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	610b      	str	r3, [r1, #16]
 8004e86:	e027      	b.n	8004ed8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d112      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e8e:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e96:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6892      	ldr	r2, [r2, #8]
 8004e9e:	0211      	lsls	r1, r2, #8
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6912      	ldr	r2, [r2, #16]
 8004ea4:	0852      	lsrs	r2, r2, #1
 8004ea6:	3a01      	subs	r2, #1
 8004ea8:	0552      	lsls	r2, r2, #21
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	491f      	ldr	r1, [pc, #124]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	610b      	str	r3, [r1, #16]
 8004eb2:	e011      	b.n	8004ed8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ebc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6892      	ldr	r2, [r2, #8]
 8004ec4:	0211      	lsls	r1, r2, #8
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6952      	ldr	r2, [r2, #20]
 8004eca:	0852      	lsrs	r2, r2, #1
 8004ecc:	3a01      	subs	r2, #1
 8004ece:	0652      	lsls	r2, r2, #25
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	4916      	ldr	r1, [pc, #88]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ed8:	4b14      	ldr	r3, [pc, #80]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a13      	ldr	r2, [pc, #76]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ede:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee4:	f7fc fcbc 	bl	8001860 <HAL_GetTick>
 8004ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eea:	e009      	b.n	8004f00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eec:	f7fc fcb8 	bl	8001860 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d902      	bls.n	8004f00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	73fb      	strb	r3, [r7, #15]
          break;
 8004efe:	e005      	b.n	8004f0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f00:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ef      	beq.n	8004eec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	4904      	ldr	r1, [pc, #16]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000

08004f30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d018      	beq.n	8004f7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f4a:	4b67      	ldr	r3, [pc, #412]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f003 0203 	and.w	r2, r3, #3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d10d      	bne.n	8004f76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f62:	4b61      	ldr	r3, [pc, #388]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
       ||
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d047      	beq.n	8005006 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
 8004f7a:	e044      	b.n	8005006 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d018      	beq.n	8004fb6 <RCCEx_PLLSAI2_Config+0x86>
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d825      	bhi.n	8004fd4 <RCCEx_PLLSAI2_Config+0xa4>
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d002      	beq.n	8004f92 <RCCEx_PLLSAI2_Config+0x62>
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d009      	beq.n	8004fa4 <RCCEx_PLLSAI2_Config+0x74>
 8004f90:	e020      	b.n	8004fd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f92:	4b55      	ldr	r3, [pc, #340]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d11d      	bne.n	8004fda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa2:	e01a      	b.n	8004fda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fa4:	4b50      	ldr	r3, [pc, #320]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d116      	bne.n	8004fde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb4:	e013      	b.n	8004fde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10f      	bne.n	8004fe2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fc2:	4b49      	ldr	r3, [pc, #292]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fd2:	e006      	b.n	8004fe2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	e004      	b.n	8004fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e002      	b.n	8004fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fe2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fea:	4b3f      	ldr	r3, [pc, #252]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6819      	ldr	r1, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	430b      	orrs	r3, r1
 8005000:	4939      	ldr	r1, [pc, #228]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005002:	4313      	orrs	r3, r2
 8005004:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d167      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800500c:	4b36      	ldr	r3, [pc, #216]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a35      	ldr	r2, [pc, #212]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005018:	f7fc fc22 	bl	8001860 <HAL_GetTick>
 800501c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800501e:	e009      	b.n	8005034 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005020:	f7fc fc1e 	bl	8001860 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
        break;
 8005032:	e005      	b.n	8005040 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005034:	4b2c      	ldr	r3, [pc, #176]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1ef      	bne.n	8005020 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d14a      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d111      	bne.n	8005070 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800504c:	4b26      	ldr	r3, [pc, #152]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6892      	ldr	r2, [r2, #8]
 800505c:	0211      	lsls	r1, r2, #8
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68d2      	ldr	r2, [r2, #12]
 8005062:	0912      	lsrs	r2, r2, #4
 8005064:	0452      	lsls	r2, r2, #17
 8005066:	430a      	orrs	r2, r1
 8005068:	491f      	ldr	r1, [pc, #124]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506a:	4313      	orrs	r3, r2
 800506c:	614b      	str	r3, [r1, #20]
 800506e:	e011      	b.n	8005094 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005070:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005078:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6892      	ldr	r2, [r2, #8]
 8005080:	0211      	lsls	r1, r2, #8
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6912      	ldr	r2, [r2, #16]
 8005086:	0852      	lsrs	r2, r2, #1
 8005088:	3a01      	subs	r2, #1
 800508a:	0652      	lsls	r2, r2, #25
 800508c:	430a      	orrs	r2, r1
 800508e:	4916      	ldr	r1, [pc, #88]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005094:	4b14      	ldr	r3, [pc, #80]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a13      	ldr	r2, [pc, #76]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fc fbde 	bl	8001860 <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050a6:	e009      	b.n	80050bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050a8:	f7fc fbda 	bl	8001860 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d902      	bls.n	80050bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	73fb      	strb	r3, [r7, #15]
          break;
 80050ba:	e005      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050bc:	4b0a      	ldr	r3, [pc, #40]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ef      	beq.n	80050a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050ce:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4904      	ldr	r1, [pc, #16]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000

080050ec <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	@ 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005108:	d10c      	bne.n	8005124 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800510a:	4b6e      	ldr	r3, [pc, #440]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005110:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005114:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800511c:	d112      	bne.n	8005144 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800511e:	4b6a      	ldr	r3, [pc, #424]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	e00f      	b.n	8005144 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512a:	d10b      	bne.n	8005144 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800512c:	4b65      	ldr	r3, [pc, #404]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005132:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005136:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800513e:	d101      	bne.n	8005144 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005140:	4b61      	ldr	r3, [pc, #388]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005142:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f040 80b4 	bne.w	80052b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005156:	d003      	beq.n	8005160 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800515e:	d135      	bne.n	80051cc <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005160:	4b58      	ldr	r3, [pc, #352]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005168:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800516c:	f040 80a1 	bne.w	80052b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005170:	4b54      	ldr	r3, [pc, #336]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 809a 	beq.w	80052b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800517e:	4b51      	ldr	r3, [pc, #324]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	3301      	adds	r3, #1
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005190:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005192:	4b4c      	ldr	r3, [pc, #304]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800519c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80051a4:	4b47      	ldr	r3, [pc, #284]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80051b0:	2311      	movs	r3, #17
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e001      	b.n	80051ba <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80051b6:	2307      	movs	r3, #7
 80051b8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	fb03 f202 	mul.w	r2, r3, r2
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80051ca:	e072      	b.n	80052b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d133      	bne.n	800523a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80051d2:	4b3c      	ldr	r3, [pc, #240]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051de:	d169      	bne.n	80052b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80051e0:	4b38      	ldr	r3, [pc, #224]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d063      	beq.n	80052b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051ec:	4b35      	ldr	r3, [pc, #212]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	3301      	adds	r3, #1
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005200:	4b30      	ldr	r3, [pc, #192]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	0a1b      	lsrs	r3, r3, #8
 8005206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800520a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005212:	4b2c      	ldr	r3, [pc, #176]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800521e:	2311      	movs	r3, #17
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	e001      	b.n	8005228 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005224:	2307      	movs	r3, #7
 8005226:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	fb03 f202 	mul.w	r2, r3, r2
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	61fb      	str	r3, [r7, #28]
 8005238:	e03c      	b.n	80052b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005240:	d003      	beq.n	800524a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005248:	d134      	bne.n	80052b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800524a:	4b1e      	ldr	r3, [pc, #120]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005256:	d12d      	bne.n	80052b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005258:	4b1a      	ldr	r3, [pc, #104]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d027      	beq.n	80052b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005264:	4b17      	ldr	r3, [pc, #92]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	3301      	adds	r3, #1
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005278:	4b12      	ldr	r3, [pc, #72]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	0a1b      	lsrs	r3, r3, #8
 800527e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005282:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800528a:	4b0e      	ldr	r3, [pc, #56]	@ (80052c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005296:	2311      	movs	r3, #17
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	e001      	b.n	80052a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800529c:	2307      	movs	r3, #7
 800529e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	fb03 f202 	mul.w	r2, r3, r2
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	e000      	b.n	80052b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80052b2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80052b4:	69fb      	ldr	r3, [r7, #28]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3724      	adds	r7, #36	@ 0x24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40021000 	.word	0x40021000
 80052c8:	001fff68 	.word	0x001fff68

080052cc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d904      	bls.n	80052ea <HAL_SAI_InitProtocol+0x1e>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	3b03      	subs	r3, #3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d812      	bhi.n	800530e <HAL_SAI_InitProtocol+0x42>
 80052e8:	e008      	b.n	80052fc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 fd09 	bl	8005d08 <SAI_InitI2S>
 80052f6:	4603      	mov	r3, r0
 80052f8:	75fb      	strb	r3, [r7, #23]
      break;
 80052fa:	e00b      	b.n	8005314 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fdb2 	bl	8005e6c <SAI_InitPCM>
 8005308:	4603      	mov	r3, r0
 800530a:	75fb      	strb	r3, [r7, #23]
      break;
 800530c:	e002      	b.n	8005314 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	75fb      	strb	r3, [r7, #23]
      break;
 8005312:	bf00      	nop
  }

  if (status == HAL_OK)
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f808 	bl	8005330 <HAL_SAI_Init>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e155      	b.n	80055ee <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fb fd42 	bl	8000de0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fe3f 	bl	8005fe0 <SAI_Disable>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e140      	b.n	80055ee <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d00c      	beq.n	8005396 <HAL_SAI_Init+0x66>
 800537c:	2b02      	cmp	r3, #2
 800537e:	d80d      	bhi.n	800539c <HAL_SAI_Init+0x6c>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_SAI_Init+0x5a>
 8005384:	2b01      	cmp	r3, #1
 8005386:	d003      	beq.n	8005390 <HAL_SAI_Init+0x60>
 8005388:	e008      	b.n	800539c <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
      break;
 800538e:	e008      	b.n	80053a2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005390:	2310      	movs	r3, #16
 8005392:	61fb      	str	r3, [r7, #28]
      break;
 8005394:	e005      	b.n	80053a2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005396:	2320      	movs	r3, #32
 8005398:	61fb      	str	r3, [r7, #28]
      break;
 800539a:	e002      	b.n	80053a2 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	61fb      	str	r3, [r7, #28]
      break;
 80053a0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d81d      	bhi.n	80053e6 <HAL_SAI_Init+0xb6>
 80053aa:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <HAL_SAI_Init+0x80>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053c1 	.word	0x080053c1
 80053b4:	080053c7 	.word	0x080053c7
 80053b8:	080053cf 	.word	0x080053cf
 80053bc:	080053d7 	.word	0x080053d7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]
      break;
 80053c4:	e012      	b.n	80053ec <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80053c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053ca:	617b      	str	r3, [r7, #20]
      break;
 80053cc:	e00e      	b.n	80053ec <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80053ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80053d2:	617b      	str	r3, [r7, #20]
      break;
 80053d4:	e00a      	b.n	80053ec <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80053d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80053da:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f043 0301 	orr.w	r3, r3, #1
 80053e2:	61fb      	str	r3, [r7, #28]
      break;
 80053e4:	e002      	b.n	80053ec <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
      break;
 80053ea:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a81      	ldr	r2, [pc, #516]	@ (80055f8 <HAL_SAI_Init+0x2c8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_SAI_Init+0xd0>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a80      	ldr	r2, [pc, #512]	@ (80055fc <HAL_SAI_Init+0x2cc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d103      	bne.n	8005408 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005400:	4a7f      	ldr	r2, [pc, #508]	@ (8005600 <HAL_SAI_Init+0x2d0>)
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e002      	b.n	800540e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005408:	4a7e      	ldr	r2, [pc, #504]	@ (8005604 <HAL_SAI_Init+0x2d4>)
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d041      	beq.n	800549a <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a77      	ldr	r2, [pc, #476]	@ (80055f8 <HAL_SAI_Init+0x2c8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d004      	beq.n	800542a <HAL_SAI_Init+0xfa>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a75      	ldr	r2, [pc, #468]	@ (80055fc <HAL_SAI_Init+0x2cc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d105      	bne.n	8005436 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800542a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800542e:	f7fe ff1d 	bl	800426c <HAL_RCCEx_GetPeriphCLKFreq>
 8005432:	6138      	str	r0, [r7, #16]
 8005434:	e004      	b.n	8005440 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005436:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800543a:	f7fe ff17 	bl	800426c <HAL_RCCEx_GetPeriphCLKFreq>
 800543e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	461a      	mov	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	025b      	lsls	r3, r3, #9
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a6b      	ldr	r2, [pc, #428]	@ (8005608 <HAL_SAI_Init+0x2d8>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	08da      	lsrs	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	4b67      	ldr	r3, [pc, #412]	@ (8005608 <HAL_SAI_Init+0x2d8>)
 800546a:	fba3 2301 	umull	r2, r3, r3, r1
 800546e:	08da      	lsrs	r2, r3, #3
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	1aca      	subs	r2, r1, r3
 800547a:	2a08      	cmp	r2, #8
 800547c:	d904      	bls.n	8005488 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548c:	2b04      	cmp	r3, #4
 800548e:	d104      	bne.n	800549a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	085a      	lsrs	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_SAI_Init+0x17a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d109      	bne.n	80054be <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_SAI_Init+0x186>
 80054b2:	2300      	movs	r3, #0
 80054b4:	e001      	b.n	80054ba <HAL_SAI_Init+0x18a>
 80054b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e008      	b.n	80054d0 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d102      	bne.n	80054cc <HAL_SAI_Init+0x19c>
 80054c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054ca:	e000      	b.n	80054ce <HAL_SAI_Init+0x19e>
 80054cc:	2300      	movs	r3, #0
 80054ce:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b4c      	ldr	r3, [pc, #304]	@ (800560c <HAL_SAI_Init+0x2dc>)
 80054dc:	400b      	ands	r3, r1
 80054de:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6819      	ldr	r1, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ee:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054f4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fa:	431a      	orrs	r2, r3
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005508:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005514:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	051b      	lsls	r3, r3, #20
 800551c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005534:	f023 030f 	bic.w	r3, r3, #15
 8005538:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6859      	ldr	r1, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6899      	ldr	r1, [r3, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b2b      	ldr	r3, [pc, #172]	@ (8005610 <HAL_SAI_Init+0x2e0>)
 8005564:	400b      	ands	r3, r1
 8005566:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6899      	ldr	r1, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005578:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800557e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8005584:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558a:	3b01      	subs	r3, #1
 800558c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800558e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68d9      	ldr	r1, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80055a6:	400b      	ands	r3, r1
 80055a8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68d9      	ldr	r1, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055be:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80055c0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c6:	3b01      	subs	r3, #1
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40015404 	.word	0x40015404
 80055fc:	40015424 	.word	0x40015424
 8005600:	40015400 	.word	0x40015400
 8005604:	40015800 	.word	0x40015800
 8005608:	cccccccd 	.word	0xcccccccd
 800560c:	ff05c010 	.word	0xff05c010
 8005610:	fff88000 	.word	0xfff88000

08005614 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_SAI_Abort+0x1a>
 800562a:	2302      	movs	r3, #2
 800562c:	e053      	b.n	80056d6 <HAL_SAI_Abort+0xc2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fcd2 	bl	8005fe0 <SAI_Disable>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005650:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005654:	d125      	bne.n	80056a2 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005664:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b12      	cmp	r3, #18
 8005670:	d108      	bne.n	8005684 <HAL_SAI_Abort+0x70>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800567e:	4618      	mov	r0, r3
 8005680:	f7fc fb48 	bl	8001d14 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b22      	cmp	r3, #34	@ 0x22
 800568e:	d108      	bne.n	80056a2 <HAL_SAI_Abort+0x8e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005694:	2b00      	cmp	r3, #0
 8005696:	d004      	beq.n	80056a2 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569c:	4618      	mov	r0, r3
 800569e:	f7fc fb39 	bl	8001d14 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2200      	movs	r2, #0
 80056a8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f04f 32ff 	mov.w	r2, #4294967295
 80056b2:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0208 	orr.w	r2, r2, #8
 80056c2:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80056ee:	f7fc f8b7 	bl	8001860 <HAL_GetTick>
 80056f2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_SAI_Transmit_DMA+0x20>
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e093      	b.n	800582c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b01      	cmp	r3, #1
 800570e:	f040 808c 	bne.w	800582a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_SAI_Transmit_DMA+0x40>
 800571c:	2302      	movs	r3, #2
 800571e:	e085      	b.n	800582c <HAL_SAI_Transmit_DMA+0x14c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2212      	movs	r2, #18
 800574a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005752:	4a38      	ldr	r2, [pc, #224]	@ (8005834 <HAL_SAI_Transmit_DMA+0x154>)
 8005754:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800575a:	4a37      	ldr	r2, [pc, #220]	@ (8005838 <HAL_SAI_Transmit_DMA+0x158>)
 800575c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005762:	4a36      	ldr	r2, [pc, #216]	@ (800583c <HAL_SAI_Transmit_DMA+0x15c>)
 8005764:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800576a:	2200      	movs	r2, #0
 800576c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005776:	4619      	mov	r1, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	331c      	adds	r3, #28
 800577e:	461a      	mov	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005786:	f7fc fa65 	bl	8001c54 <HAL_DMA_Start_IT>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e047      	b.n	800582c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800579c:	2100      	movs	r1, #0
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fbe6 	bl	8005f70 <SAI_InterruptFlag>
 80057a4:	4601      	mov	r1, r0
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80057c2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80057c4:	e015      	b.n	80057f2 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80057c6:	f7fc f84b 	bl	8001860 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057d4:	d90d      	bls.n	80057f2 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e01c      	b.n	800582c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0e2      	beq.n	80057c6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d107      	bne.n	800581e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800581c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800582a:	2302      	movs	r3, #2
  }
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	080060b3 	.word	0x080060b3
 8005838:	08006055 	.word	0x08006055
 800583c:	08006149 	.word	0x08006149

08005840 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_SAI_Receive_DMA+0x1a>
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e074      	b.n	8005948 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	d16d      	bne.n	8005946 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_SAI_Receive_DMA+0x38>
 8005874:	2302      	movs	r3, #2
 8005876:	e067      	b.n	8005948 <HAL_SAI_Receive_DMA+0x108>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	88fa      	ldrh	r2, [r7, #6]
 800588a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	88fa      	ldrh	r2, [r7, #6]
 8005892:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2222      	movs	r2, #34	@ 0x22
 80058a2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058aa:	4a29      	ldr	r2, [pc, #164]	@ (8005950 <HAL_SAI_Receive_DMA+0x110>)
 80058ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b2:	4a28      	ldr	r2, [pc, #160]	@ (8005954 <HAL_SAI_Receive_DMA+0x114>)
 80058b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ba:	4a27      	ldr	r2, [pc, #156]	@ (8005958 <HAL_SAI_Receive_DMA+0x118>)
 80058bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c2:	2200      	movs	r2, #0
 80058c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	331c      	adds	r3, #28
 80058d0:	4619      	mov	r1, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058d6:	461a      	mov	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80058de:	f7fc f9b9 	bl	8001c54 <HAL_DMA_Start_IT>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e029      	b.n	8005948 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80058f4:	2100      	movs	r1, #0
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fb3a 	bl	8005f70 <SAI_InterruptFlag>
 80058fc:	4601      	mov	r1, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800591a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d107      	bne.n	800593a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005938:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	e000      	b.n	8005948 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005946:	2302      	movs	r3, #2
  }
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	0800612d 	.word	0x0800612d
 8005954:	080060cf 	.word	0x080060cf
 8005958:	08006149 	.word	0x08006149

0800595c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8192 	beq.w	8005c96 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <HAL_SAI_IRQHandler+0x4c>
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
 80059a6:	e176      	b.n	8005c96 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01e      	beq.n	80059f0 <HAL_SAI_IRQHandler+0x94>
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d019      	beq.n	80059f0 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2201      	movs	r2, #1
 80059c2:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b22      	cmp	r3, #34	@ 0x22
 80059ce:	d101      	bne.n	80059d4 <HAL_SAI_IRQHandler+0x78>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <HAL_SAI_IRQHandler+0x7a>
 80059d4:	2302      	movs	r3, #2
 80059d6:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f983 	bl	8005cf4 <HAL_SAI_ErrorCallback>
 80059ee:	e152      	b.n	8005c96 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d011      	beq.n	8005a1e <HAL_SAI_IRQHandler+0xc2>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00c      	beq.n	8005a1e <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8140 	beq.w	8005c96 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1a:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8005a1c:	e13b      	b.n	8005c96 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d055      	beq.n	8005ad4 <HAL_SAI_IRQHandler+0x178>
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d050      	beq.n	8005ad4 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2220      	movs	r2, #32
 8005a38:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a40:	f043 0204 	orr.w	r2, r3, #4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d038      	beq.n	8005ac6 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d016      	beq.n	8005a8a <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a60:	4a8f      	ldr	r2, [pc, #572]	@ (8005ca0 <HAL_SAI_IRQHandler+0x344>)
 8005a62:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fc f991 	bl	8001d90 <HAL_DMA_Abort_IT>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f935 	bl	8005cf4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80fc 	beq.w	8005c8c <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a98:	4a81      	ldr	r2, [pc, #516]	@ (8005ca0 <HAL_SAI_IRQHandler+0x344>)
 8005a9a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fc f975 	bl	8001d90 <HAL_DMA_Abort_IT>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80ef 	beq.w	8005c8c <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f918 	bl	8005cf4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005ac4:	e0e2      	b.n	8005c8c <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fda4 	bl	8005614 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f911 	bl	8005cf4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005ad2:	e0db      	b.n	8005c8c <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d055      	beq.n	8005b8a <HAL_SAI_IRQHandler+0x22e>
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d050      	beq.n	8005b8a <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2240      	movs	r2, #64	@ 0x40
 8005aee:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af6:	f043 0208 	orr.w	r2, r3, #8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d038      	beq.n	8005b7c <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b16:	4a62      	ldr	r2, [pc, #392]	@ (8005ca0 <HAL_SAI_IRQHandler+0x344>)
 8005b18:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fc f936 	bl	8001d90 <HAL_DMA_Abort_IT>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f8da 	bl	8005cf4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 80a3 	beq.w	8005c90 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4e:	4a54      	ldr	r2, [pc, #336]	@ (8005ca0 <HAL_SAI_IRQHandler+0x344>)
 8005b50:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fc f91a 	bl	8001d90 <HAL_DMA_Abort_IT>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 8096 	beq.w	8005c90 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8bd 	bl	8005cf4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b7a:	e089      	b.n	8005c90 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff fd49 	bl	8005614 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f8b6 	bl	8005cf4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b88:	e082      	b.n	8005c90 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d061      	beq.n	8005c58 <HAL_SAI_IRQHandler+0x2fc>
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d05c      	beq.n	8005c58 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bac:	f043 0220 	orr.w	r2, r3, #32
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d036      	beq.n	8005c2e <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d016      	beq.n	8005bf6 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bcc:	4a34      	ldr	r2, [pc, #208]	@ (8005ca0 <HAL_SAI_IRQHandler+0x344>)
 8005bce:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fc f8db 	bl	8001d90 <HAL_DMA_Abort_IT>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005be6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f87f 	bl	8005cf4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d04a      	beq.n	8005c94 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c02:	4a27      	ldr	r2, [pc, #156]	@ (8005ca0 <HAL_SAI_IRQHandler+0x344>)
 8005c04:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fc f8c0 	bl	8001d90 <HAL_DMA_Abort_IT>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d03e      	beq.n	8005c94 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f864 	bl	8005cf4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005c2c:	e032      	b.n	8005c94 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3e:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f84f 	bl	8005cf4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005c56:	e01d      	b.n	8005c94 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d019      	beq.n	8005c96 <HAL_SAI_IRQHandler+0x33a>
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d014      	beq.n	8005c96 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2210      	movs	r2, #16
 8005c72:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c7a:	f043 0210 	orr.w	r2, r3, #16
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f835 	bl	8005cf4 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005c8a:	e004      	b.n	8005c96 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005c8c:	bf00      	nop
 8005c8e:	e002      	b.n	8005c96 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005c90:	bf00      	nop
 8005c92:	e000      	b.n	8005c96 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005c94:	bf00      	nop
}
 8005c96:	bf00      	nop
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	0800619b 	.word	0x0800619b

08005ca4 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <SAI_InitI2S+0x2e>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d103      	bne.n	8005d3e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d3c:	e002      	b.n	8005d44 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005d4a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d52:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e077      	b.n	8005e5e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d107      	bne.n	8005d84 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d80:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d82:	e006      	b.n	8005d92 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d8a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d84f      	bhi.n	8005e38 <SAI_InitI2S+0x130>
 8005d98:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <SAI_InitI2S+0x98>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005dd3 	.word	0x08005dd3
 8005da8:	08005df5 	.word	0x08005df5
 8005dac:	08005e17 	.word	0x08005e17
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2280      	movs	r2, #128	@ 0x80
 8005db4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	011a      	lsls	r2, r3, #4
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2240      	movs	r2, #64	@ 0x40
 8005dce:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005dd0:	e035      	b.n	8005e3e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2280      	movs	r2, #128	@ 0x80
 8005dd6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	019a      	lsls	r2, r3, #6
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2280      	movs	r2, #128	@ 0x80
 8005df0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005df2:	e024      	b.n	8005e3e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	22c0      	movs	r2, #192	@ 0xc0
 8005df8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	019a      	lsls	r2, r3, #6
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2280      	movs	r2, #128	@ 0x80
 8005e12:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005e14:	e013      	b.n	8005e3e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	22e0      	movs	r2, #224	@ 0xe0
 8005e1a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	019a      	lsls	r2, r3, #6
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2280      	movs	r2, #128	@ 0x80
 8005e34:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005e36:	e002      	b.n	8005e3e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e3c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d10b      	bne.n	8005e5c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d102      	bne.n	8005e50 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2210      	movs	r2, #16
 8005e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d102      	bne.n	8005e5c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop

08005e6c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <SAI_InitPCM+0x2e>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d103      	bne.n	8005ea2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005ea0:	e002      	b.n	8005ea8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005ebc:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ed0:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d103      	bne.n	8005ee0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ede:	e002      	b.n	8005ee6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	220d      	movs	r2, #13
 8005ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d837      	bhi.n	8005f5c <SAI_InitPCM+0xf0>
 8005eec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <SAI_InitPCM+0x88>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f05 	.word	0x08005f05
 8005ef8:	08005f1b 	.word	0x08005f1b
 8005efc:	08005f31 	.word	0x08005f31
 8005f00:	08005f47 	.word	0x08005f47
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2280      	movs	r2, #128	@ 0x80
 8005f08:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	011a      	lsls	r2, r3, #4
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2240      	movs	r2, #64	@ 0x40
 8005f16:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005f18:	e023      	b.n	8005f62 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2280      	movs	r2, #128	@ 0x80
 8005f1e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2280      	movs	r2, #128	@ 0x80
 8005f2c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005f2e:	e018      	b.n	8005f62 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	22c0      	movs	r2, #192	@ 0xc0
 8005f34:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2280      	movs	r2, #128	@ 0x80
 8005f42:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005f44:	e00d      	b.n	8005f62 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	22e0      	movs	r2, #224	@ 0xe0
 8005f4a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2280      	movs	r2, #128	@ 0x80
 8005f58:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005f5a:	e002      	b.n	8005f62 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f60:	bf00      	nop
  }

  return status;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d103      	bne.n	8005f8e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f043 0308 	orr.w	r3, r3, #8
 8005f8c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f92:	2b08      	cmp	r3, #8
 8005f94:	d10b      	bne.n	8005fae <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d003      	beq.n	8005fa6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d103      	bne.n	8005fae <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f043 0310 	orr.w	r3, r3, #16
 8005fac:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d003      	beq.n	8005fbe <SAI_InterruptFlag+0x4e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d104      	bne.n	8005fc8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e003      	b.n	8005fd0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f043 0304 	orr.w	r3, r3, #4
 8005fce:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005fe8:	4b18      	ldr	r3, [pc, #96]	@ (800604c <SAI_Disable+0x6c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a18      	ldr	r2, [pc, #96]	@ (8006050 <SAI_Disable+0x70>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	0b1b      	lsrs	r3, r3, #12
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800600a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006018:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	72fb      	strb	r3, [r7, #11]
      break;
 8006026:	e009      	b.n	800603c <SAI_Disable+0x5c>
    }
    count--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3b01      	subs	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e7      	bne.n	800600c <SAI_Disable+0x2c>

  return status;
 800603c:	7afb      	ldrb	r3, [r7, #11]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000000 	.word	0x20000000
 8006050:	95cbec1b 	.word	0x95cbec1b

08006054 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	2b20      	cmp	r3, #32
 8006068:	d01c      	beq.n	80060a4 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006080:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006082:	2100      	movs	r1, #0
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff ff73 	bl	8005f70 <SAI_InterruptFlag>
 800608a:	4603      	mov	r3, r0
 800608c:	43d9      	mvns	r1, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	400a      	ands	r2, r1
 800609a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fdfd 	bl	8005ca4 <HAL_SAI_TxCpltCallback>
#endif
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff fdf9 	bl	8005cb8 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060da:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d01c      	beq.n	800611e <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80060f2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80060fc:	2100      	movs	r1, #0
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7ff ff36 	bl	8005f70 <SAI_InterruptFlag>
 8006104:	4603      	mov	r3, r0
 8006106:	43d9      	mvns	r1, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	400a      	ands	r2, r1
 8006114:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fdd4 	bl	8005ccc <HAL_SAI_RxCpltCallback>
#endif
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006138:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff fdd0 	bl	8005ce0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006140:	bf00      	nop
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800615c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006174:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff ff32 	bl	8005fe0 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff fdb1 	bl	8005cf4 <HAL_SAI_ErrorCallback>
#endif
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80061b6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2200      	movs	r2, #0
 80061be:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f04f 32ff 	mov.w	r2, #4294967295
 80061c8:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d00a      	beq.n	80061ea <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff ff03 	bl	8005fe0 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0208 	orr.w	r2, r2, #8
 80061e8:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff fd7a 	bl	8005cf4 <HAL_SAI_ErrorCallback>
#endif
}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e095      	b.n	8006346 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d108      	bne.n	8006234 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800622a:	d009      	beq.n	8006240 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	61da      	str	r2, [r3, #28]
 8006232:	e005      	b.n	8006240 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fb f84c 	bl	80012f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006276:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006280:	d902      	bls.n	8006288 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e002      	b.n	800628e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800628c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006296:	d007      	beq.n	80062a8 <HAL_SPI_Init+0xa0>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062a0:	d002      	beq.n	80062a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ea:	ea42 0103 	orr.w	r1, r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	0c1b      	lsrs	r3, r3, #16
 8006304:	f003 0204 	and.w	r2, r3, #4
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006324:	ea42 0103 	orr.w	r1, r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b088      	sub	sp, #32
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800635e:	f7fb fa7f 	bl	8001860 <HAL_GetTick>
 8006362:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006364:	88fb      	ldrh	r3, [r7, #6]
 8006366:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d001      	beq.n	8006378 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006374:	2302      	movs	r3, #2
 8006376:	e15c      	b.n	8006632 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_SPI_Transmit+0x36>
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e154      	b.n	8006632 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_SPI_Transmit+0x48>
 8006392:	2302      	movs	r3, #2
 8006394:	e14d      	b.n	8006632 <HAL_SPI_Transmit+0x2e4>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2203      	movs	r2, #3
 80063a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	88fa      	ldrh	r2, [r7, #6]
 80063b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063e8:	d10f      	bne.n	800640a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006408:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006414:	2b40      	cmp	r3, #64	@ 0x40
 8006416:	d007      	beq.n	8006428 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006426:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006430:	d952      	bls.n	80064d8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_SPI_Transmit+0xf2>
 800643a:	8b7b      	ldrh	r3, [r7, #26]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d145      	bne.n	80064cc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	881a      	ldrh	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006464:	e032      	b.n	80064cc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d112      	bne.n	800649a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	881a      	ldrh	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006484:	1c9a      	adds	r2, r3, #2
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006498:	e018      	b.n	80064cc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800649a:	f7fb f9e1 	bl	8001860 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d803      	bhi.n	80064b2 <HAL_SPI_Transmit+0x164>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d102      	bne.n	80064b8 <HAL_SPI_Transmit+0x16a>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d109      	bne.n	80064cc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e0b2      	b.n	8006632 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1c7      	bne.n	8006466 <HAL_SPI_Transmit+0x118>
 80064d6:	e083      	b.n	80065e0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_SPI_Transmit+0x198>
 80064e0:	8b7b      	ldrh	r3, [r7, #26]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d177      	bne.n	80065d6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d912      	bls.n	8006516 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f4:	881a      	ldrh	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006500:	1c9a      	adds	r2, r3, #2
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b02      	subs	r3, #2
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006514:	e05f      	b.n	80065d6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	7812      	ldrb	r2, [r2, #0]
 8006522:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800653c:	e04b      	b.n	80065d6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b02      	cmp	r3, #2
 800654a:	d12b      	bne.n	80065a4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b01      	cmp	r3, #1
 8006554:	d912      	bls.n	800657c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800655a:	881a      	ldrh	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006566:	1c9a      	adds	r2, r3, #2
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b02      	subs	r3, #2
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800657a:	e02c      	b.n	80065d6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	7812      	ldrb	r2, [r2, #0]
 8006588:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065a2:	e018      	b.n	80065d6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065a4:	f7fb f95c 	bl	8001860 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d803      	bhi.n	80065bc <HAL_SPI_Transmit+0x26e>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d102      	bne.n	80065c2 <HAL_SPI_Transmit+0x274>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e02d      	b.n	8006632 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ae      	bne.n	800653e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065e0:	69fa      	ldr	r2, [r7, #28]
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 f947 	bl	8006878 <SPI_EndRxTxTransaction>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10a      	bne.n	8006614 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006630:	2300      	movs	r3, #0
  }
}
 8006632:	4618      	mov	r0, r3
 8006634:	3720      	adds	r7, #32
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	4613      	mov	r3, r2
 800664a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800664c:	f7fb f908 	bl	8001860 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	4413      	add	r3, r2
 800665a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800665c:	f7fb f900 	bl	8001860 <HAL_GetTick>
 8006660:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006662:	4b39      	ldr	r3, [pc, #228]	@ (8006748 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	015b      	lsls	r3, r3, #5
 8006668:	0d1b      	lsrs	r3, r3, #20
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006672:	e054      	b.n	800671e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d050      	beq.n	800671e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800667c:	f7fb f8f0 	bl	8001860 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	429a      	cmp	r2, r3
 800668a:	d902      	bls.n	8006692 <SPI_WaitFlagStateUntilTimeout+0x56>
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d13d      	bne.n	800670e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066aa:	d111      	bne.n	80066d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066b4:	d004      	beq.n	80066c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066be:	d107      	bne.n	80066d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d8:	d10f      	bne.n	80066fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e017      	b.n	800673e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3b01      	subs	r3, #1
 800671c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	bf0c      	ite	eq
 800672e:	2301      	moveq	r3, #1
 8006730:	2300      	movne	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	429a      	cmp	r2, r3
 800673a:	d19b      	bne.n	8006674 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000000 	.word	0x20000000

0800674c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08a      	sub	sp, #40	@ 0x28
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800675e:	f7fb f87f 	bl	8001860 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	4413      	add	r3, r2
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800676e:	f7fb f877 	bl	8001860 <HAL_GetTick>
 8006772:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800677c:	4b3d      	ldr	r3, [pc, #244]	@ (8006874 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	00da      	lsls	r2, r3, #3
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	0d1b      	lsrs	r3, r3, #20
 800678c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006794:	e060      	b.n	8006858 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800679c:	d107      	bne.n	80067ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d104      	bne.n	80067ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d050      	beq.n	8006858 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067b6:	f7fb f853 	bl	8001860 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d902      	bls.n	80067cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d13d      	bne.n	8006848 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067e4:	d111      	bne.n	800680a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ee:	d004      	beq.n	80067fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f8:	d107      	bne.n	800680a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006808:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006812:	d10f      	bne.n	8006834 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006832:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e010      	b.n	800686a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	3b01      	subs	r3, #1
 8006856:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	4013      	ands	r3, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	429a      	cmp	r2, r3
 8006866:	d196      	bne.n	8006796 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3728      	adds	r7, #40	@ 0x28
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000000 	.word	0x20000000

08006878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af02      	add	r7, sp, #8
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2200      	movs	r2, #0
 800688c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7ff ff5b 	bl	800674c <SPI_WaitFifoStateUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a0:	f043 0220 	orr.w	r2, r3, #32
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e027      	b.n	80068fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	2180      	movs	r1, #128	@ 0x80
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff fec0 	bl	800663c <SPI_WaitFlagStateUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e014      	b.n	80068fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2200      	movs	r2, #0
 80068da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff ff34 	bl	800674c <SPI_WaitFifoStateUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ee:	f043 0220 	orr.w	r2, r3, #32
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e000      	b.n	80068fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e040      	b.n	8006998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fa fea4 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2224      	movs	r2, #36	@ 0x24
 8006930:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0201 	bic.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fb6a 	bl	8007024 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f8af 	bl	8006ab4 <UART_SetConfig>
 8006956:	4603      	mov	r3, r0
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e01b      	b.n	8006998 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800696e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800697e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fbe9 	bl	8007168 <UART_CheckIdleState>
 8006996:	4603      	mov	r3, r0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08a      	sub	sp, #40	@ 0x28
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d177      	bne.n	8006aa8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <HAL_UART_Transmit+0x24>
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e070      	b.n	8006aaa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2221      	movs	r2, #33	@ 0x21
 80069d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069d6:	f7fa ff43 	bl	8001860 <HAL_GetTick>
 80069da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	88fa      	ldrh	r2, [r7, #6]
 80069e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	88fa      	ldrh	r2, [r7, #6]
 80069e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f4:	d108      	bne.n	8006a08 <HAL_UART_Transmit+0x68>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d104      	bne.n	8006a08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	e003      	b.n	8006a10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a10:	e02f      	b.n	8006a72 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2180      	movs	r1, #128	@ 0x80
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 fc4b 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d004      	beq.n	8006a32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e03b      	b.n	8006aaa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a44:	b292      	uxth	r2, r2
 8006a46:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	3302      	adds	r3, #2
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	e007      	b.n	8006a60 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1c9      	bne.n	8006a12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2200      	movs	r2, #0
 8006a86:	2140      	movs	r1, #64	@ 0x40
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fc15 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e005      	b.n	8006aaa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e000      	b.n	8006aaa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006aa8:	2302      	movs	r3, #2
  }
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab8:	b08a      	sub	sp, #40	@ 0x28
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	431a      	orrs	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	4ba4      	ldr	r3, [pc, #656]	@ (8006d74 <UART_SetConfig+0x2c0>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	6812      	ldr	r2, [r2, #0]
 8006aea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006aec:	430b      	orrs	r3, r1
 8006aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a99      	ldr	r2, [pc, #612]	@ (8006d78 <UART_SetConfig+0x2c4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b30:	430a      	orrs	r2, r1
 8006b32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a90      	ldr	r2, [pc, #576]	@ (8006d7c <UART_SetConfig+0x2c8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d126      	bne.n	8006b8c <UART_SetConfig+0xd8>
 8006b3e:	4b90      	ldr	r3, [pc, #576]	@ (8006d80 <UART_SetConfig+0x2cc>)
 8006b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d81b      	bhi.n	8006b84 <UART_SetConfig+0xd0>
 8006b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b54 <UART_SetConfig+0xa0>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006b65 	.word	0x08006b65
 8006b58:	08006b75 	.word	0x08006b75
 8006b5c:	08006b6d 	.word	0x08006b6d
 8006b60:	08006b7d 	.word	0x08006b7d
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b6a:	e116      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b72:	e112      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006b74:	2304      	movs	r3, #4
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b7a:	e10e      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b82:	e10a      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006b84:	2310      	movs	r3, #16
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b8a:	e106      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a7c      	ldr	r2, [pc, #496]	@ (8006d84 <UART_SetConfig+0x2d0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d138      	bne.n	8006c08 <UART_SetConfig+0x154>
 8006b96:	4b7a      	ldr	r3, [pc, #488]	@ (8006d80 <UART_SetConfig+0x2cc>)
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9c:	f003 030c 	and.w	r3, r3, #12
 8006ba0:	2b0c      	cmp	r3, #12
 8006ba2:	d82d      	bhi.n	8006c00 <UART_SetConfig+0x14c>
 8006ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <UART_SetConfig+0xf8>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006be1 	.word	0x08006be1
 8006bb0:	08006c01 	.word	0x08006c01
 8006bb4:	08006c01 	.word	0x08006c01
 8006bb8:	08006c01 	.word	0x08006c01
 8006bbc:	08006bf1 	.word	0x08006bf1
 8006bc0:	08006c01 	.word	0x08006c01
 8006bc4:	08006c01 	.word	0x08006c01
 8006bc8:	08006c01 	.word	0x08006c01
 8006bcc:	08006be9 	.word	0x08006be9
 8006bd0:	08006c01 	.word	0x08006c01
 8006bd4:	08006c01 	.word	0x08006c01
 8006bd8:	08006c01 	.word	0x08006c01
 8006bdc:	08006bf9 	.word	0x08006bf9
 8006be0:	2300      	movs	r3, #0
 8006be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006be6:	e0d8      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006be8:	2302      	movs	r3, #2
 8006bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bee:	e0d4      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bf6:	e0d0      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006bf8:	2308      	movs	r3, #8
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bfe:	e0cc      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006c00:	2310      	movs	r3, #16
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c06:	e0c8      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a5e      	ldr	r2, [pc, #376]	@ (8006d88 <UART_SetConfig+0x2d4>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d125      	bne.n	8006c5e <UART_SetConfig+0x1aa>
 8006c12:	4b5b      	ldr	r3, [pc, #364]	@ (8006d80 <UART_SetConfig+0x2cc>)
 8006c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c1c:	2b30      	cmp	r3, #48	@ 0x30
 8006c1e:	d016      	beq.n	8006c4e <UART_SetConfig+0x19a>
 8006c20:	2b30      	cmp	r3, #48	@ 0x30
 8006c22:	d818      	bhi.n	8006c56 <UART_SetConfig+0x1a2>
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d00a      	beq.n	8006c3e <UART_SetConfig+0x18a>
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d814      	bhi.n	8006c56 <UART_SetConfig+0x1a2>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <UART_SetConfig+0x182>
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d008      	beq.n	8006c46 <UART_SetConfig+0x192>
 8006c34:	e00f      	b.n	8006c56 <UART_SetConfig+0x1a2>
 8006c36:	2300      	movs	r3, #0
 8006c38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c3c:	e0ad      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c44:	e0a9      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006c46:	2304      	movs	r3, #4
 8006c48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c4c:	e0a5      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006c4e:	2308      	movs	r3, #8
 8006c50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c54:	e0a1      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006c56:	2310      	movs	r3, #16
 8006c58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c5c:	e09d      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a4a      	ldr	r2, [pc, #296]	@ (8006d8c <UART_SetConfig+0x2d8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d125      	bne.n	8006cb4 <UART_SetConfig+0x200>
 8006c68:	4b45      	ldr	r3, [pc, #276]	@ (8006d80 <UART_SetConfig+0x2cc>)
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c72:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c74:	d016      	beq.n	8006ca4 <UART_SetConfig+0x1f0>
 8006c76:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c78:	d818      	bhi.n	8006cac <UART_SetConfig+0x1f8>
 8006c7a:	2b80      	cmp	r3, #128	@ 0x80
 8006c7c:	d00a      	beq.n	8006c94 <UART_SetConfig+0x1e0>
 8006c7e:	2b80      	cmp	r3, #128	@ 0x80
 8006c80:	d814      	bhi.n	8006cac <UART_SetConfig+0x1f8>
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <UART_SetConfig+0x1d8>
 8006c86:	2b40      	cmp	r3, #64	@ 0x40
 8006c88:	d008      	beq.n	8006c9c <UART_SetConfig+0x1e8>
 8006c8a:	e00f      	b.n	8006cac <UART_SetConfig+0x1f8>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c92:	e082      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006c94:	2302      	movs	r3, #2
 8006c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c9a:	e07e      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006c9c:	2304      	movs	r3, #4
 8006c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ca2:	e07a      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006ca4:	2308      	movs	r3, #8
 8006ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006caa:	e076      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006cac:	2310      	movs	r3, #16
 8006cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cb2:	e072      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a35      	ldr	r2, [pc, #212]	@ (8006d90 <UART_SetConfig+0x2dc>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d12a      	bne.n	8006d14 <UART_SetConfig+0x260>
 8006cbe:	4b30      	ldr	r3, [pc, #192]	@ (8006d80 <UART_SetConfig+0x2cc>)
 8006cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ccc:	d01a      	beq.n	8006d04 <UART_SetConfig+0x250>
 8006cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cd2:	d81b      	bhi.n	8006d0c <UART_SetConfig+0x258>
 8006cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd8:	d00c      	beq.n	8006cf4 <UART_SetConfig+0x240>
 8006cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cde:	d815      	bhi.n	8006d0c <UART_SetConfig+0x258>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <UART_SetConfig+0x238>
 8006ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ce8:	d008      	beq.n	8006cfc <UART_SetConfig+0x248>
 8006cea:	e00f      	b.n	8006d0c <UART_SetConfig+0x258>
 8006cec:	2300      	movs	r3, #0
 8006cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cf2:	e052      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cfa:	e04e      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d02:	e04a      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006d04:	2308      	movs	r3, #8
 8006d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d0a:	e046      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d12:	e042      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a17      	ldr	r2, [pc, #92]	@ (8006d78 <UART_SetConfig+0x2c4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d13a      	bne.n	8006d94 <UART_SetConfig+0x2e0>
 8006d1e:	4b18      	ldr	r3, [pc, #96]	@ (8006d80 <UART_SetConfig+0x2cc>)
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d2c:	d01a      	beq.n	8006d64 <UART_SetConfig+0x2b0>
 8006d2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d32:	d81b      	bhi.n	8006d6c <UART_SetConfig+0x2b8>
 8006d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d38:	d00c      	beq.n	8006d54 <UART_SetConfig+0x2a0>
 8006d3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d3e:	d815      	bhi.n	8006d6c <UART_SetConfig+0x2b8>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <UART_SetConfig+0x298>
 8006d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d48:	d008      	beq.n	8006d5c <UART_SetConfig+0x2a8>
 8006d4a:	e00f      	b.n	8006d6c <UART_SetConfig+0x2b8>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d52:	e022      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006d54:	2302      	movs	r3, #2
 8006d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d5a:	e01e      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d62:	e01a      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006d64:	2308      	movs	r3, #8
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6a:	e016      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d72:	e012      	b.n	8006d9a <UART_SetConfig+0x2e6>
 8006d74:	efff69f3 	.word	0xefff69f3
 8006d78:	40008000 	.word	0x40008000
 8006d7c:	40013800 	.word	0x40013800
 8006d80:	40021000 	.word	0x40021000
 8006d84:	40004400 	.word	0x40004400
 8006d88:	40004800 	.word	0x40004800
 8006d8c:	40004c00 	.word	0x40004c00
 8006d90:	40005000 	.word	0x40005000
 8006d94:	2310      	movs	r3, #16
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a9f      	ldr	r2, [pc, #636]	@ (800701c <UART_SetConfig+0x568>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d17a      	bne.n	8006e9a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006da4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d824      	bhi.n	8006df6 <UART_SetConfig+0x342>
 8006dac:	a201      	add	r2, pc, #4	@ (adr r2, 8006db4 <UART_SetConfig+0x300>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006df7 	.word	0x08006df7
 8006dbc:	08006de1 	.word	0x08006de1
 8006dc0:	08006df7 	.word	0x08006df7
 8006dc4:	08006de7 	.word	0x08006de7
 8006dc8:	08006df7 	.word	0x08006df7
 8006dcc:	08006df7 	.word	0x08006df7
 8006dd0:	08006df7 	.word	0x08006df7
 8006dd4:	08006def 	.word	0x08006def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd8:	f7fc fed2 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8006ddc:	61f8      	str	r0, [r7, #28]
        break;
 8006dde:	e010      	b.n	8006e02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de0:	4b8f      	ldr	r3, [pc, #572]	@ (8007020 <UART_SetConfig+0x56c>)
 8006de2:	61fb      	str	r3, [r7, #28]
        break;
 8006de4:	e00d      	b.n	8006e02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006de6:	f7fc fe33 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8006dea:	61f8      	str	r0, [r7, #28]
        break;
 8006dec:	e009      	b.n	8006e02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006df2:	61fb      	str	r3, [r7, #28]
        break;
 8006df4:	e005      	b.n	8006e02 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 80fb 	beq.w	8007000 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	4413      	add	r3, r2
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d305      	bcc.n	8006e26 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d903      	bls.n	8006e2e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e2c:	e0e8      	b.n	8007000 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	2200      	movs	r2, #0
 8006e32:	461c      	mov	r4, r3
 8006e34:	4615      	mov	r5, r2
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	022b      	lsls	r3, r5, #8
 8006e40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e44:	0222      	lsls	r2, r4, #8
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	6849      	ldr	r1, [r1, #4]
 8006e4a:	0849      	lsrs	r1, r1, #1
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	4688      	mov	r8, r1
 8006e50:	4681      	mov	r9, r0
 8006e52:	eb12 0a08 	adds.w	sl, r2, r8
 8006e56:	eb43 0b09 	adc.w	fp, r3, r9
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	603b      	str	r3, [r7, #0]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e68:	4650      	mov	r0, sl
 8006e6a:	4659      	mov	r1, fp
 8006e6c:	f7f9 fa00 	bl	8000270 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4613      	mov	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e7e:	d308      	bcc.n	8006e92 <UART_SetConfig+0x3de>
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e86:	d204      	bcs.n	8006e92 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	60da      	str	r2, [r3, #12]
 8006e90:	e0b6      	b.n	8007000 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e98:	e0b2      	b.n	8007000 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ea2:	d15e      	bne.n	8006f62 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d828      	bhi.n	8006efe <UART_SetConfig+0x44a>
 8006eac:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb4 <UART_SetConfig+0x400>)
 8006eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb2:	bf00      	nop
 8006eb4:	08006ed9 	.word	0x08006ed9
 8006eb8:	08006ee1 	.word	0x08006ee1
 8006ebc:	08006ee9 	.word	0x08006ee9
 8006ec0:	08006eff 	.word	0x08006eff
 8006ec4:	08006eef 	.word	0x08006eef
 8006ec8:	08006eff 	.word	0x08006eff
 8006ecc:	08006eff 	.word	0x08006eff
 8006ed0:	08006eff 	.word	0x08006eff
 8006ed4:	08006ef7 	.word	0x08006ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ed8:	f7fc fe52 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8006edc:	61f8      	str	r0, [r7, #28]
        break;
 8006ede:	e014      	b.n	8006f0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ee0:	f7fc fe64 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8006ee4:	61f8      	str	r0, [r7, #28]
        break;
 8006ee6:	e010      	b.n	8006f0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8007020 <UART_SetConfig+0x56c>)
 8006eea:	61fb      	str	r3, [r7, #28]
        break;
 8006eec:	e00d      	b.n	8006f0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eee:	f7fc fdaf 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8006ef2:	61f8      	str	r0, [r7, #28]
        break;
 8006ef4:	e009      	b.n	8006f0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006efa:	61fb      	str	r3, [r7, #28]
        break;
 8006efc:	e005      	b.n	8006f0a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d077      	beq.n	8007000 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	005a      	lsls	r2, r3, #1
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	085b      	lsrs	r3, r3, #1
 8006f1a:	441a      	add	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b0f      	cmp	r3, #15
 8006f2a:	d916      	bls.n	8006f5a <UART_SetConfig+0x4a6>
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f32:	d212      	bcs.n	8006f5a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f023 030f 	bic.w	r3, r3, #15
 8006f3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	085b      	lsrs	r3, r3, #1
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	8afb      	ldrh	r3, [r7, #22]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	8afa      	ldrh	r2, [r7, #22]
 8006f56:	60da      	str	r2, [r3, #12]
 8006f58:	e052      	b.n	8007000 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f60:	e04e      	b.n	8007000 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d827      	bhi.n	8006fba <UART_SetConfig+0x506>
 8006f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <UART_SetConfig+0x4bc>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006f95 	.word	0x08006f95
 8006f74:	08006f9d 	.word	0x08006f9d
 8006f78:	08006fa5 	.word	0x08006fa5
 8006f7c:	08006fbb 	.word	0x08006fbb
 8006f80:	08006fab 	.word	0x08006fab
 8006f84:	08006fbb 	.word	0x08006fbb
 8006f88:	08006fbb 	.word	0x08006fbb
 8006f8c:	08006fbb 	.word	0x08006fbb
 8006f90:	08006fb3 	.word	0x08006fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f94:	f7fc fdf4 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8006f98:	61f8      	str	r0, [r7, #28]
        break;
 8006f9a:	e014      	b.n	8006fc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f9c:	f7fc fe06 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8006fa0:	61f8      	str	r0, [r7, #28]
        break;
 8006fa2:	e010      	b.n	8006fc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8007020 <UART_SetConfig+0x56c>)
 8006fa6:	61fb      	str	r3, [r7, #28]
        break;
 8006fa8:	e00d      	b.n	8006fc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006faa:	f7fc fd51 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8006fae:	61f8      	str	r0, [r7, #28]
        break;
 8006fb0:	e009      	b.n	8006fc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fb6:	61fb      	str	r3, [r7, #28]
        break;
 8006fb8:	e005      	b.n	8006fc6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006fc4:	bf00      	nop
    }

    if (pclk != 0U)
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d019      	beq.n	8007000 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	085a      	lsrs	r2, r3, #1
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	441a      	add	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fde:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2b0f      	cmp	r3, #15
 8006fe4:	d909      	bls.n	8006ffa <UART_SetConfig+0x546>
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fec:	d205      	bcs.n	8006ffa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60da      	str	r2, [r3, #12]
 8006ff8:	e002      	b.n	8007000 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800700c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007010:	4618      	mov	r0, r3
 8007012:	3728      	adds	r7, #40	@ 0x28
 8007014:	46bd      	mov	sp, r7
 8007016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800701a:	bf00      	nop
 800701c:	40008000 	.word	0x40008000
 8007020:	00f42400 	.word	0x00f42400

08007024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01a      	beq.n	800713a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007122:	d10a      	bne.n	800713a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	605a      	str	r2, [r3, #4]
  }
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b098      	sub	sp, #96	@ 0x60
 800716c:	af02      	add	r7, sp, #8
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007178:	f7fa fb72 	bl	8001860 <HAL_GetTick>
 800717c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0308 	and.w	r3, r3, #8
 8007188:	2b08      	cmp	r3, #8
 800718a:	d12e      	bne.n	80071ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800718c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007194:	2200      	movs	r2, #0
 8007196:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f88c 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d021      	beq.n	80071ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80071c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e6      	bne.n	80071a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e062      	b.n	80072b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d149      	bne.n	800728c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007200:	2200      	movs	r2, #0
 8007202:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f856 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d03c      	beq.n	800728c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	623b      	str	r3, [r7, #32]
   return(result);
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007230:	633b      	str	r3, [r7, #48]	@ 0x30
 8007232:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800723e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e6      	bne.n	8007212 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	60fb      	str	r3, [r7, #12]
   return(result);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007264:	61fa      	str	r2, [r7, #28]
 8007266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	69b9      	ldr	r1, [r7, #24]
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	617b      	str	r3, [r7, #20]
   return(result);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e5      	bne.n	8007244 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e011      	b.n	80072b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2220      	movs	r2, #32
 8007290:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3758      	adds	r7, #88	@ 0x58
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072c8:	e04f      	b.n	800736a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d0:	d04b      	beq.n	800736a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d2:	f7fa fac5 	bl	8001860 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d302      	bcc.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e04e      	b.n	800738a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d037      	beq.n	800736a <UART_WaitOnFlagUntilTimeout+0xb2>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b80      	cmp	r3, #128	@ 0x80
 80072fe:	d034      	beq.n	800736a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b40      	cmp	r3, #64	@ 0x40
 8007304:	d031      	beq.n	800736a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b08      	cmp	r3, #8
 8007312:	d110      	bne.n	8007336 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2208      	movs	r2, #8
 800731a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 f838 	bl	8007392 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2208      	movs	r2, #8
 8007326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e029      	b.n	800738a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007344:	d111      	bne.n	800736a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800734e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f81e 	bl	8007392 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e00f      	b.n	800738a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	4013      	ands	r3, r2
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	429a      	cmp	r2, r3
 8007378:	bf0c      	ite	eq
 800737a:	2301      	moveq	r3, #1
 800737c:	2300      	movne	r3, #0
 800737e:	b2db      	uxtb	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	79fb      	ldrb	r3, [r7, #7]
 8007384:	429a      	cmp	r2, r3
 8007386:	d0a0      	beq.n	80072ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007392:	b480      	push	{r7}
 8007394:	b095      	sub	sp, #84	@ 0x54
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80073ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e6      	bne.n	800739a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3308      	adds	r3, #8
 80073d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	61fb      	str	r3, [r7, #28]
   return(result);
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	f023 0301 	bic.w	r3, r3, #1
 80073e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3308      	adds	r3, #8
 80073ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e5      	bne.n	80073cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007404:	2b01      	cmp	r3, #1
 8007406:	d118      	bne.n	800743a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	60bb      	str	r3, [r7, #8]
   return(result);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f023 0310 	bic.w	r3, r3, #16
 800741c:	647b      	str	r3, [r7, #68]	@ 0x44
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007426:	61bb      	str	r3, [r7, #24]
 8007428:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6979      	ldr	r1, [r7, #20]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	613b      	str	r3, [r7, #16]
   return(result);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e6      	bne.n	8007408 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800744e:	bf00      	nop
 8007450:	3754      	adds	r7, #84	@ 0x54
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
	...

0800745c <std>:
 800745c:	2300      	movs	r3, #0
 800745e:	b510      	push	{r4, lr}
 8007460:	4604      	mov	r4, r0
 8007462:	e9c0 3300 	strd	r3, r3, [r0]
 8007466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800746a:	6083      	str	r3, [r0, #8]
 800746c:	8181      	strh	r1, [r0, #12]
 800746e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007470:	81c2      	strh	r2, [r0, #14]
 8007472:	6183      	str	r3, [r0, #24]
 8007474:	4619      	mov	r1, r3
 8007476:	2208      	movs	r2, #8
 8007478:	305c      	adds	r0, #92	@ 0x5c
 800747a:	f000 f9f9 	bl	8007870 <memset>
 800747e:	4b0d      	ldr	r3, [pc, #52]	@ (80074b4 <std+0x58>)
 8007480:	6263      	str	r3, [r4, #36]	@ 0x24
 8007482:	4b0d      	ldr	r3, [pc, #52]	@ (80074b8 <std+0x5c>)
 8007484:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007486:	4b0d      	ldr	r3, [pc, #52]	@ (80074bc <std+0x60>)
 8007488:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800748a:	4b0d      	ldr	r3, [pc, #52]	@ (80074c0 <std+0x64>)
 800748c:	6323      	str	r3, [r4, #48]	@ 0x30
 800748e:	4b0d      	ldr	r3, [pc, #52]	@ (80074c4 <std+0x68>)
 8007490:	6224      	str	r4, [r4, #32]
 8007492:	429c      	cmp	r4, r3
 8007494:	d006      	beq.n	80074a4 <std+0x48>
 8007496:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800749a:	4294      	cmp	r4, r2
 800749c:	d002      	beq.n	80074a4 <std+0x48>
 800749e:	33d0      	adds	r3, #208	@ 0xd0
 80074a0:	429c      	cmp	r4, r3
 80074a2:	d105      	bne.n	80074b0 <std+0x54>
 80074a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ac:	f000 ba58 	b.w	8007960 <__retarget_lock_init_recursive>
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	bf00      	nop
 80074b4:	080076c1 	.word	0x080076c1
 80074b8:	080076e3 	.word	0x080076e3
 80074bc:	0800771b 	.word	0x0800771b
 80074c0:	0800773f 	.word	0x0800773f
 80074c4:	20000774 	.word	0x20000774

080074c8 <stdio_exit_handler>:
 80074c8:	4a02      	ldr	r2, [pc, #8]	@ (80074d4 <stdio_exit_handler+0xc>)
 80074ca:	4903      	ldr	r1, [pc, #12]	@ (80074d8 <stdio_exit_handler+0x10>)
 80074cc:	4803      	ldr	r0, [pc, #12]	@ (80074dc <stdio_exit_handler+0x14>)
 80074ce:	f000 b869 	b.w	80075a4 <_fwalk_sglue>
 80074d2:	bf00      	nop
 80074d4:	2000000c 	.word	0x2000000c
 80074d8:	080081fd 	.word	0x080081fd
 80074dc:	2000001c 	.word	0x2000001c

080074e0 <cleanup_stdio>:
 80074e0:	6841      	ldr	r1, [r0, #4]
 80074e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007514 <cleanup_stdio+0x34>)
 80074e4:	4299      	cmp	r1, r3
 80074e6:	b510      	push	{r4, lr}
 80074e8:	4604      	mov	r4, r0
 80074ea:	d001      	beq.n	80074f0 <cleanup_stdio+0x10>
 80074ec:	f000 fe86 	bl	80081fc <_fflush_r>
 80074f0:	68a1      	ldr	r1, [r4, #8]
 80074f2:	4b09      	ldr	r3, [pc, #36]	@ (8007518 <cleanup_stdio+0x38>)
 80074f4:	4299      	cmp	r1, r3
 80074f6:	d002      	beq.n	80074fe <cleanup_stdio+0x1e>
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 fe7f 	bl	80081fc <_fflush_r>
 80074fe:	68e1      	ldr	r1, [r4, #12]
 8007500:	4b06      	ldr	r3, [pc, #24]	@ (800751c <cleanup_stdio+0x3c>)
 8007502:	4299      	cmp	r1, r3
 8007504:	d004      	beq.n	8007510 <cleanup_stdio+0x30>
 8007506:	4620      	mov	r0, r4
 8007508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800750c:	f000 be76 	b.w	80081fc <_fflush_r>
 8007510:	bd10      	pop	{r4, pc}
 8007512:	bf00      	nop
 8007514:	20000774 	.word	0x20000774
 8007518:	200007dc 	.word	0x200007dc
 800751c:	20000844 	.word	0x20000844

08007520 <global_stdio_init.part.0>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4b0b      	ldr	r3, [pc, #44]	@ (8007550 <global_stdio_init.part.0+0x30>)
 8007524:	4c0b      	ldr	r4, [pc, #44]	@ (8007554 <global_stdio_init.part.0+0x34>)
 8007526:	4a0c      	ldr	r2, [pc, #48]	@ (8007558 <global_stdio_init.part.0+0x38>)
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	4620      	mov	r0, r4
 800752c:	2200      	movs	r2, #0
 800752e:	2104      	movs	r1, #4
 8007530:	f7ff ff94 	bl	800745c <std>
 8007534:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007538:	2201      	movs	r2, #1
 800753a:	2109      	movs	r1, #9
 800753c:	f7ff ff8e 	bl	800745c <std>
 8007540:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007544:	2202      	movs	r2, #2
 8007546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800754a:	2112      	movs	r1, #18
 800754c:	f7ff bf86 	b.w	800745c <std>
 8007550:	200008ac 	.word	0x200008ac
 8007554:	20000774 	.word	0x20000774
 8007558:	080074c9 	.word	0x080074c9

0800755c <__sfp_lock_acquire>:
 800755c:	4801      	ldr	r0, [pc, #4]	@ (8007564 <__sfp_lock_acquire+0x8>)
 800755e:	f000 ba00 	b.w	8007962 <__retarget_lock_acquire_recursive>
 8007562:	bf00      	nop
 8007564:	200008b5 	.word	0x200008b5

08007568 <__sfp_lock_release>:
 8007568:	4801      	ldr	r0, [pc, #4]	@ (8007570 <__sfp_lock_release+0x8>)
 800756a:	f000 b9fb 	b.w	8007964 <__retarget_lock_release_recursive>
 800756e:	bf00      	nop
 8007570:	200008b5 	.word	0x200008b5

08007574 <__sinit>:
 8007574:	b510      	push	{r4, lr}
 8007576:	4604      	mov	r4, r0
 8007578:	f7ff fff0 	bl	800755c <__sfp_lock_acquire>
 800757c:	6a23      	ldr	r3, [r4, #32]
 800757e:	b11b      	cbz	r3, 8007588 <__sinit+0x14>
 8007580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007584:	f7ff bff0 	b.w	8007568 <__sfp_lock_release>
 8007588:	4b04      	ldr	r3, [pc, #16]	@ (800759c <__sinit+0x28>)
 800758a:	6223      	str	r3, [r4, #32]
 800758c:	4b04      	ldr	r3, [pc, #16]	@ (80075a0 <__sinit+0x2c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1f5      	bne.n	8007580 <__sinit+0xc>
 8007594:	f7ff ffc4 	bl	8007520 <global_stdio_init.part.0>
 8007598:	e7f2      	b.n	8007580 <__sinit+0xc>
 800759a:	bf00      	nop
 800759c:	080074e1 	.word	0x080074e1
 80075a0:	200008ac 	.word	0x200008ac

080075a4 <_fwalk_sglue>:
 80075a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a8:	4607      	mov	r7, r0
 80075aa:	4688      	mov	r8, r1
 80075ac:	4614      	mov	r4, r2
 80075ae:	2600      	movs	r6, #0
 80075b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075b4:	f1b9 0901 	subs.w	r9, r9, #1
 80075b8:	d505      	bpl.n	80075c6 <_fwalk_sglue+0x22>
 80075ba:	6824      	ldr	r4, [r4, #0]
 80075bc:	2c00      	cmp	r4, #0
 80075be:	d1f7      	bne.n	80075b0 <_fwalk_sglue+0xc>
 80075c0:	4630      	mov	r0, r6
 80075c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c6:	89ab      	ldrh	r3, [r5, #12]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d907      	bls.n	80075dc <_fwalk_sglue+0x38>
 80075cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075d0:	3301      	adds	r3, #1
 80075d2:	d003      	beq.n	80075dc <_fwalk_sglue+0x38>
 80075d4:	4629      	mov	r1, r5
 80075d6:	4638      	mov	r0, r7
 80075d8:	47c0      	blx	r8
 80075da:	4306      	orrs	r6, r0
 80075dc:	3568      	adds	r5, #104	@ 0x68
 80075de:	e7e9      	b.n	80075b4 <_fwalk_sglue+0x10>

080075e0 <iprintf>:
 80075e0:	b40f      	push	{r0, r1, r2, r3}
 80075e2:	b507      	push	{r0, r1, r2, lr}
 80075e4:	4906      	ldr	r1, [pc, #24]	@ (8007600 <iprintf+0x20>)
 80075e6:	ab04      	add	r3, sp, #16
 80075e8:	6808      	ldr	r0, [r1, #0]
 80075ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ee:	6881      	ldr	r1, [r0, #8]
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	f000 fadb 	bl	8007bac <_vfiprintf_r>
 80075f6:	b003      	add	sp, #12
 80075f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075fc:	b004      	add	sp, #16
 80075fe:	4770      	bx	lr
 8007600:	20000018 	.word	0x20000018

08007604 <_puts_r>:
 8007604:	6a03      	ldr	r3, [r0, #32]
 8007606:	b570      	push	{r4, r5, r6, lr}
 8007608:	6884      	ldr	r4, [r0, #8]
 800760a:	4605      	mov	r5, r0
 800760c:	460e      	mov	r6, r1
 800760e:	b90b      	cbnz	r3, 8007614 <_puts_r+0x10>
 8007610:	f7ff ffb0 	bl	8007574 <__sinit>
 8007614:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007616:	07db      	lsls	r3, r3, #31
 8007618:	d405      	bmi.n	8007626 <_puts_r+0x22>
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	0598      	lsls	r0, r3, #22
 800761e:	d402      	bmi.n	8007626 <_puts_r+0x22>
 8007620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007622:	f000 f99e 	bl	8007962 <__retarget_lock_acquire_recursive>
 8007626:	89a3      	ldrh	r3, [r4, #12]
 8007628:	0719      	lsls	r1, r3, #28
 800762a:	d502      	bpl.n	8007632 <_puts_r+0x2e>
 800762c:	6923      	ldr	r3, [r4, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d135      	bne.n	800769e <_puts_r+0x9a>
 8007632:	4621      	mov	r1, r4
 8007634:	4628      	mov	r0, r5
 8007636:	f000 f8c5 	bl	80077c4 <__swsetup_r>
 800763a:	b380      	cbz	r0, 800769e <_puts_r+0x9a>
 800763c:	f04f 35ff 	mov.w	r5, #4294967295
 8007640:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007642:	07da      	lsls	r2, r3, #31
 8007644:	d405      	bmi.n	8007652 <_puts_r+0x4e>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	059b      	lsls	r3, r3, #22
 800764a:	d402      	bmi.n	8007652 <_puts_r+0x4e>
 800764c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800764e:	f000 f989 	bl	8007964 <__retarget_lock_release_recursive>
 8007652:	4628      	mov	r0, r5
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	2b00      	cmp	r3, #0
 8007658:	da04      	bge.n	8007664 <_puts_r+0x60>
 800765a:	69a2      	ldr	r2, [r4, #24]
 800765c:	429a      	cmp	r2, r3
 800765e:	dc17      	bgt.n	8007690 <_puts_r+0x8c>
 8007660:	290a      	cmp	r1, #10
 8007662:	d015      	beq.n	8007690 <_puts_r+0x8c>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	6022      	str	r2, [r4, #0]
 800766a:	7019      	strb	r1, [r3, #0]
 800766c:	68a3      	ldr	r3, [r4, #8]
 800766e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007672:	3b01      	subs	r3, #1
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	2900      	cmp	r1, #0
 8007678:	d1ed      	bne.n	8007656 <_puts_r+0x52>
 800767a:	2b00      	cmp	r3, #0
 800767c:	da11      	bge.n	80076a2 <_puts_r+0x9e>
 800767e:	4622      	mov	r2, r4
 8007680:	210a      	movs	r1, #10
 8007682:	4628      	mov	r0, r5
 8007684:	f000 f85f 	bl	8007746 <__swbuf_r>
 8007688:	3001      	adds	r0, #1
 800768a:	d0d7      	beq.n	800763c <_puts_r+0x38>
 800768c:	250a      	movs	r5, #10
 800768e:	e7d7      	b.n	8007640 <_puts_r+0x3c>
 8007690:	4622      	mov	r2, r4
 8007692:	4628      	mov	r0, r5
 8007694:	f000 f857 	bl	8007746 <__swbuf_r>
 8007698:	3001      	adds	r0, #1
 800769a:	d1e7      	bne.n	800766c <_puts_r+0x68>
 800769c:	e7ce      	b.n	800763c <_puts_r+0x38>
 800769e:	3e01      	subs	r6, #1
 80076a0:	e7e4      	b.n	800766c <_puts_r+0x68>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	6022      	str	r2, [r4, #0]
 80076a8:	220a      	movs	r2, #10
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	e7ee      	b.n	800768c <_puts_r+0x88>
	...

080076b0 <puts>:
 80076b0:	4b02      	ldr	r3, [pc, #8]	@ (80076bc <puts+0xc>)
 80076b2:	4601      	mov	r1, r0
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	f7ff bfa5 	b.w	8007604 <_puts_r>
 80076ba:	bf00      	nop
 80076bc:	20000018 	.word	0x20000018

080076c0 <__sread>:
 80076c0:	b510      	push	{r4, lr}
 80076c2:	460c      	mov	r4, r1
 80076c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c8:	f000 f8fc 	bl	80078c4 <_read_r>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	bfab      	itete	ge
 80076d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076d2:	89a3      	ldrhlt	r3, [r4, #12]
 80076d4:	181b      	addge	r3, r3, r0
 80076d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076da:	bfac      	ite	ge
 80076dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076de:	81a3      	strhlt	r3, [r4, #12]
 80076e0:	bd10      	pop	{r4, pc}

080076e2 <__swrite>:
 80076e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e6:	461f      	mov	r7, r3
 80076e8:	898b      	ldrh	r3, [r1, #12]
 80076ea:	05db      	lsls	r3, r3, #23
 80076ec:	4605      	mov	r5, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	4616      	mov	r6, r2
 80076f2:	d505      	bpl.n	8007700 <__swrite+0x1e>
 80076f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f8:	2302      	movs	r3, #2
 80076fa:	2200      	movs	r2, #0
 80076fc:	f000 f8d0 	bl	80078a0 <_lseek_r>
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	4632      	mov	r2, r6
 800770e:	463b      	mov	r3, r7
 8007710:	4628      	mov	r0, r5
 8007712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007716:	f000 b8e7 	b.w	80078e8 <_write_r>

0800771a <__sseek>:
 800771a:	b510      	push	{r4, lr}
 800771c:	460c      	mov	r4, r1
 800771e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007722:	f000 f8bd 	bl	80078a0 <_lseek_r>
 8007726:	1c43      	adds	r3, r0, #1
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	bf15      	itete	ne
 800772c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800772e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007732:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007736:	81a3      	strheq	r3, [r4, #12]
 8007738:	bf18      	it	ne
 800773a:	81a3      	strhne	r3, [r4, #12]
 800773c:	bd10      	pop	{r4, pc}

0800773e <__sclose>:
 800773e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007742:	f000 b89d 	b.w	8007880 <_close_r>

08007746 <__swbuf_r>:
 8007746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007748:	460e      	mov	r6, r1
 800774a:	4614      	mov	r4, r2
 800774c:	4605      	mov	r5, r0
 800774e:	b118      	cbz	r0, 8007758 <__swbuf_r+0x12>
 8007750:	6a03      	ldr	r3, [r0, #32]
 8007752:	b90b      	cbnz	r3, 8007758 <__swbuf_r+0x12>
 8007754:	f7ff ff0e 	bl	8007574 <__sinit>
 8007758:	69a3      	ldr	r3, [r4, #24]
 800775a:	60a3      	str	r3, [r4, #8]
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	071a      	lsls	r2, r3, #28
 8007760:	d501      	bpl.n	8007766 <__swbuf_r+0x20>
 8007762:	6923      	ldr	r3, [r4, #16]
 8007764:	b943      	cbnz	r3, 8007778 <__swbuf_r+0x32>
 8007766:	4621      	mov	r1, r4
 8007768:	4628      	mov	r0, r5
 800776a:	f000 f82b 	bl	80077c4 <__swsetup_r>
 800776e:	b118      	cbz	r0, 8007778 <__swbuf_r+0x32>
 8007770:	f04f 37ff 	mov.w	r7, #4294967295
 8007774:	4638      	mov	r0, r7
 8007776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	6922      	ldr	r2, [r4, #16]
 800777c:	1a98      	subs	r0, r3, r2
 800777e:	6963      	ldr	r3, [r4, #20]
 8007780:	b2f6      	uxtb	r6, r6
 8007782:	4283      	cmp	r3, r0
 8007784:	4637      	mov	r7, r6
 8007786:	dc05      	bgt.n	8007794 <__swbuf_r+0x4e>
 8007788:	4621      	mov	r1, r4
 800778a:	4628      	mov	r0, r5
 800778c:	f000 fd36 	bl	80081fc <_fflush_r>
 8007790:	2800      	cmp	r0, #0
 8007792:	d1ed      	bne.n	8007770 <__swbuf_r+0x2a>
 8007794:	68a3      	ldr	r3, [r4, #8]
 8007796:	3b01      	subs	r3, #1
 8007798:	60a3      	str	r3, [r4, #8]
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	6022      	str	r2, [r4, #0]
 80077a0:	701e      	strb	r6, [r3, #0]
 80077a2:	6962      	ldr	r2, [r4, #20]
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d004      	beq.n	80077b4 <__swbuf_r+0x6e>
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	07db      	lsls	r3, r3, #31
 80077ae:	d5e1      	bpl.n	8007774 <__swbuf_r+0x2e>
 80077b0:	2e0a      	cmp	r6, #10
 80077b2:	d1df      	bne.n	8007774 <__swbuf_r+0x2e>
 80077b4:	4621      	mov	r1, r4
 80077b6:	4628      	mov	r0, r5
 80077b8:	f000 fd20 	bl	80081fc <_fflush_r>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d0d9      	beq.n	8007774 <__swbuf_r+0x2e>
 80077c0:	e7d6      	b.n	8007770 <__swbuf_r+0x2a>
	...

080077c4 <__swsetup_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4b29      	ldr	r3, [pc, #164]	@ (800786c <__swsetup_r+0xa8>)
 80077c8:	4605      	mov	r5, r0
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	460c      	mov	r4, r1
 80077ce:	b118      	cbz	r0, 80077d8 <__swsetup_r+0x14>
 80077d0:	6a03      	ldr	r3, [r0, #32]
 80077d2:	b90b      	cbnz	r3, 80077d8 <__swsetup_r+0x14>
 80077d4:	f7ff fece 	bl	8007574 <__sinit>
 80077d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077dc:	0719      	lsls	r1, r3, #28
 80077de:	d422      	bmi.n	8007826 <__swsetup_r+0x62>
 80077e0:	06da      	lsls	r2, r3, #27
 80077e2:	d407      	bmi.n	80077f4 <__swsetup_r+0x30>
 80077e4:	2209      	movs	r2, #9
 80077e6:	602a      	str	r2, [r5, #0]
 80077e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	f04f 30ff 	mov.w	r0, #4294967295
 80077f2:	e033      	b.n	800785c <__swsetup_r+0x98>
 80077f4:	0758      	lsls	r0, r3, #29
 80077f6:	d512      	bpl.n	800781e <__swsetup_r+0x5a>
 80077f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077fa:	b141      	cbz	r1, 800780e <__swsetup_r+0x4a>
 80077fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007800:	4299      	cmp	r1, r3
 8007802:	d002      	beq.n	800780a <__swsetup_r+0x46>
 8007804:	4628      	mov	r0, r5
 8007806:	f000 f8af 	bl	8007968 <_free_r>
 800780a:	2300      	movs	r3, #0
 800780c:	6363      	str	r3, [r4, #52]	@ 0x34
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007814:	81a3      	strh	r3, [r4, #12]
 8007816:	2300      	movs	r3, #0
 8007818:	6063      	str	r3, [r4, #4]
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f043 0308 	orr.w	r3, r3, #8
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	b94b      	cbnz	r3, 800783e <__swsetup_r+0x7a>
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007834:	d003      	beq.n	800783e <__swsetup_r+0x7a>
 8007836:	4621      	mov	r1, r4
 8007838:	4628      	mov	r0, r5
 800783a:	f000 fd2d 	bl	8008298 <__smakebuf_r>
 800783e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007842:	f013 0201 	ands.w	r2, r3, #1
 8007846:	d00a      	beq.n	800785e <__swsetup_r+0x9a>
 8007848:	2200      	movs	r2, #0
 800784a:	60a2      	str	r2, [r4, #8]
 800784c:	6962      	ldr	r2, [r4, #20]
 800784e:	4252      	negs	r2, r2
 8007850:	61a2      	str	r2, [r4, #24]
 8007852:	6922      	ldr	r2, [r4, #16]
 8007854:	b942      	cbnz	r2, 8007868 <__swsetup_r+0xa4>
 8007856:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800785a:	d1c5      	bne.n	80077e8 <__swsetup_r+0x24>
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	0799      	lsls	r1, r3, #30
 8007860:	bf58      	it	pl
 8007862:	6962      	ldrpl	r2, [r4, #20]
 8007864:	60a2      	str	r2, [r4, #8]
 8007866:	e7f4      	b.n	8007852 <__swsetup_r+0x8e>
 8007868:	2000      	movs	r0, #0
 800786a:	e7f7      	b.n	800785c <__swsetup_r+0x98>
 800786c:	20000018 	.word	0x20000018

08007870 <memset>:
 8007870:	4402      	add	r2, r0
 8007872:	4603      	mov	r3, r0
 8007874:	4293      	cmp	r3, r2
 8007876:	d100      	bne.n	800787a <memset+0xa>
 8007878:	4770      	bx	lr
 800787a:	f803 1b01 	strb.w	r1, [r3], #1
 800787e:	e7f9      	b.n	8007874 <memset+0x4>

08007880 <_close_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d06      	ldr	r5, [pc, #24]	@ (800789c <_close_r+0x1c>)
 8007884:	2300      	movs	r3, #0
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	602b      	str	r3, [r5, #0]
 800788c:	f7f9 fe45 	bl	800151a <_close>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_close_r+0x1a>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b103      	cbz	r3, 800789a <_close_r+0x1a>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	200008b0 	.word	0x200008b0

080078a0 <_lseek_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d07      	ldr	r5, [pc, #28]	@ (80078c0 <_lseek_r+0x20>)
 80078a4:	4604      	mov	r4, r0
 80078a6:	4608      	mov	r0, r1
 80078a8:	4611      	mov	r1, r2
 80078aa:	2200      	movs	r2, #0
 80078ac:	602a      	str	r2, [r5, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	f7f9 fe5a 	bl	8001568 <_lseek>
 80078b4:	1c43      	adds	r3, r0, #1
 80078b6:	d102      	bne.n	80078be <_lseek_r+0x1e>
 80078b8:	682b      	ldr	r3, [r5, #0]
 80078ba:	b103      	cbz	r3, 80078be <_lseek_r+0x1e>
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	bd38      	pop	{r3, r4, r5, pc}
 80078c0:	200008b0 	.word	0x200008b0

080078c4 <_read_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4d07      	ldr	r5, [pc, #28]	@ (80078e4 <_read_r+0x20>)
 80078c8:	4604      	mov	r4, r0
 80078ca:	4608      	mov	r0, r1
 80078cc:	4611      	mov	r1, r2
 80078ce:	2200      	movs	r2, #0
 80078d0:	602a      	str	r2, [r5, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f7f9 fde8 	bl	80014a8 <_read>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_read_r+0x1e>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_read_r+0x1e>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	200008b0 	.word	0x200008b0

080078e8 <_write_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d07      	ldr	r5, [pc, #28]	@ (8007908 <_write_r+0x20>)
 80078ec:	4604      	mov	r4, r0
 80078ee:	4608      	mov	r0, r1
 80078f0:	4611      	mov	r1, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	602a      	str	r2, [r5, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	f7f9 fdf3 	bl	80014e2 <_write>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_write_r+0x1e>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_write_r+0x1e>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	200008b0 	.word	0x200008b0

0800790c <__errno>:
 800790c:	4b01      	ldr	r3, [pc, #4]	@ (8007914 <__errno+0x8>)
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20000018 	.word	0x20000018

08007918 <__libc_init_array>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4d0d      	ldr	r5, [pc, #52]	@ (8007950 <__libc_init_array+0x38>)
 800791c:	4c0d      	ldr	r4, [pc, #52]	@ (8007954 <__libc_init_array+0x3c>)
 800791e:	1b64      	subs	r4, r4, r5
 8007920:	10a4      	asrs	r4, r4, #2
 8007922:	2600      	movs	r6, #0
 8007924:	42a6      	cmp	r6, r4
 8007926:	d109      	bne.n	800793c <__libc_init_array+0x24>
 8007928:	4d0b      	ldr	r5, [pc, #44]	@ (8007958 <__libc_init_array+0x40>)
 800792a:	4c0c      	ldr	r4, [pc, #48]	@ (800795c <__libc_init_array+0x44>)
 800792c:	f000 fd22 	bl	8008374 <_init>
 8007930:	1b64      	subs	r4, r4, r5
 8007932:	10a4      	asrs	r4, r4, #2
 8007934:	2600      	movs	r6, #0
 8007936:	42a6      	cmp	r6, r4
 8007938:	d105      	bne.n	8007946 <__libc_init_array+0x2e>
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007940:	4798      	blx	r3
 8007942:	3601      	adds	r6, #1
 8007944:	e7ee      	b.n	8007924 <__libc_init_array+0xc>
 8007946:	f855 3b04 	ldr.w	r3, [r5], #4
 800794a:	4798      	blx	r3
 800794c:	3601      	adds	r6, #1
 800794e:	e7f2      	b.n	8007936 <__libc_init_array+0x1e>
 8007950:	080087e4 	.word	0x080087e4
 8007954:	080087e4 	.word	0x080087e4
 8007958:	080087e4 	.word	0x080087e4
 800795c:	080087e8 	.word	0x080087e8

08007960 <__retarget_lock_init_recursive>:
 8007960:	4770      	bx	lr

08007962 <__retarget_lock_acquire_recursive>:
 8007962:	4770      	bx	lr

08007964 <__retarget_lock_release_recursive>:
 8007964:	4770      	bx	lr
	...

08007968 <_free_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4605      	mov	r5, r0
 800796c:	2900      	cmp	r1, #0
 800796e:	d041      	beq.n	80079f4 <_free_r+0x8c>
 8007970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007974:	1f0c      	subs	r4, r1, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfb8      	it	lt
 800797a:	18e4      	addlt	r4, r4, r3
 800797c:	f000 f8e0 	bl	8007b40 <__malloc_lock>
 8007980:	4a1d      	ldr	r2, [pc, #116]	@ (80079f8 <_free_r+0x90>)
 8007982:	6813      	ldr	r3, [r2, #0]
 8007984:	b933      	cbnz	r3, 8007994 <_free_r+0x2c>
 8007986:	6063      	str	r3, [r4, #4]
 8007988:	6014      	str	r4, [r2, #0]
 800798a:	4628      	mov	r0, r5
 800798c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007990:	f000 b8dc 	b.w	8007b4c <__malloc_unlock>
 8007994:	42a3      	cmp	r3, r4
 8007996:	d908      	bls.n	80079aa <_free_r+0x42>
 8007998:	6820      	ldr	r0, [r4, #0]
 800799a:	1821      	adds	r1, r4, r0
 800799c:	428b      	cmp	r3, r1
 800799e:	bf01      	itttt	eq
 80079a0:	6819      	ldreq	r1, [r3, #0]
 80079a2:	685b      	ldreq	r3, [r3, #4]
 80079a4:	1809      	addeq	r1, r1, r0
 80079a6:	6021      	streq	r1, [r4, #0]
 80079a8:	e7ed      	b.n	8007986 <_free_r+0x1e>
 80079aa:	461a      	mov	r2, r3
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	b10b      	cbz	r3, 80079b4 <_free_r+0x4c>
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	d9fa      	bls.n	80079aa <_free_r+0x42>
 80079b4:	6811      	ldr	r1, [r2, #0]
 80079b6:	1850      	adds	r0, r2, r1
 80079b8:	42a0      	cmp	r0, r4
 80079ba:	d10b      	bne.n	80079d4 <_free_r+0x6c>
 80079bc:	6820      	ldr	r0, [r4, #0]
 80079be:	4401      	add	r1, r0
 80079c0:	1850      	adds	r0, r2, r1
 80079c2:	4283      	cmp	r3, r0
 80079c4:	6011      	str	r1, [r2, #0]
 80079c6:	d1e0      	bne.n	800798a <_free_r+0x22>
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	6053      	str	r3, [r2, #4]
 80079ce:	4408      	add	r0, r1
 80079d0:	6010      	str	r0, [r2, #0]
 80079d2:	e7da      	b.n	800798a <_free_r+0x22>
 80079d4:	d902      	bls.n	80079dc <_free_r+0x74>
 80079d6:	230c      	movs	r3, #12
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	e7d6      	b.n	800798a <_free_r+0x22>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	1821      	adds	r1, r4, r0
 80079e0:	428b      	cmp	r3, r1
 80079e2:	bf04      	itt	eq
 80079e4:	6819      	ldreq	r1, [r3, #0]
 80079e6:	685b      	ldreq	r3, [r3, #4]
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	bf04      	itt	eq
 80079ec:	1809      	addeq	r1, r1, r0
 80079ee:	6021      	streq	r1, [r4, #0]
 80079f0:	6054      	str	r4, [r2, #4]
 80079f2:	e7ca      	b.n	800798a <_free_r+0x22>
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
 80079f6:	bf00      	nop
 80079f8:	200008bc 	.word	0x200008bc

080079fc <sbrk_aligned>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	4e0f      	ldr	r6, [pc, #60]	@ (8007a3c <sbrk_aligned+0x40>)
 8007a00:	460c      	mov	r4, r1
 8007a02:	6831      	ldr	r1, [r6, #0]
 8007a04:	4605      	mov	r5, r0
 8007a06:	b911      	cbnz	r1, 8007a0e <sbrk_aligned+0x12>
 8007a08:	f000 fca4 	bl	8008354 <_sbrk_r>
 8007a0c:	6030      	str	r0, [r6, #0]
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 fc9f 	bl	8008354 <_sbrk_r>
 8007a16:	1c43      	adds	r3, r0, #1
 8007a18:	d103      	bne.n	8007a22 <sbrk_aligned+0x26>
 8007a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a1e:	4620      	mov	r0, r4
 8007a20:	bd70      	pop	{r4, r5, r6, pc}
 8007a22:	1cc4      	adds	r4, r0, #3
 8007a24:	f024 0403 	bic.w	r4, r4, #3
 8007a28:	42a0      	cmp	r0, r4
 8007a2a:	d0f8      	beq.n	8007a1e <sbrk_aligned+0x22>
 8007a2c:	1a21      	subs	r1, r4, r0
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 fc90 	bl	8008354 <_sbrk_r>
 8007a34:	3001      	adds	r0, #1
 8007a36:	d1f2      	bne.n	8007a1e <sbrk_aligned+0x22>
 8007a38:	e7ef      	b.n	8007a1a <sbrk_aligned+0x1e>
 8007a3a:	bf00      	nop
 8007a3c:	200008b8 	.word	0x200008b8

08007a40 <_malloc_r>:
 8007a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a44:	1ccd      	adds	r5, r1, #3
 8007a46:	f025 0503 	bic.w	r5, r5, #3
 8007a4a:	3508      	adds	r5, #8
 8007a4c:	2d0c      	cmp	r5, #12
 8007a4e:	bf38      	it	cc
 8007a50:	250c      	movcc	r5, #12
 8007a52:	2d00      	cmp	r5, #0
 8007a54:	4606      	mov	r6, r0
 8007a56:	db01      	blt.n	8007a5c <_malloc_r+0x1c>
 8007a58:	42a9      	cmp	r1, r5
 8007a5a:	d904      	bls.n	8007a66 <_malloc_r+0x26>
 8007a5c:	230c      	movs	r3, #12
 8007a5e:	6033      	str	r3, [r6, #0]
 8007a60:	2000      	movs	r0, #0
 8007a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b3c <_malloc_r+0xfc>
 8007a6a:	f000 f869 	bl	8007b40 <__malloc_lock>
 8007a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a72:	461c      	mov	r4, r3
 8007a74:	bb44      	cbnz	r4, 8007ac8 <_malloc_r+0x88>
 8007a76:	4629      	mov	r1, r5
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f7ff ffbf 	bl	80079fc <sbrk_aligned>
 8007a7e:	1c43      	adds	r3, r0, #1
 8007a80:	4604      	mov	r4, r0
 8007a82:	d158      	bne.n	8007b36 <_malloc_r+0xf6>
 8007a84:	f8d8 4000 	ldr.w	r4, [r8]
 8007a88:	4627      	mov	r7, r4
 8007a8a:	2f00      	cmp	r7, #0
 8007a8c:	d143      	bne.n	8007b16 <_malloc_r+0xd6>
 8007a8e:	2c00      	cmp	r4, #0
 8007a90:	d04b      	beq.n	8007b2a <_malloc_r+0xea>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	4639      	mov	r1, r7
 8007a96:	4630      	mov	r0, r6
 8007a98:	eb04 0903 	add.w	r9, r4, r3
 8007a9c:	f000 fc5a 	bl	8008354 <_sbrk_r>
 8007aa0:	4581      	cmp	r9, r0
 8007aa2:	d142      	bne.n	8007b2a <_malloc_r+0xea>
 8007aa4:	6821      	ldr	r1, [r4, #0]
 8007aa6:	1a6d      	subs	r5, r5, r1
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f7ff ffa6 	bl	80079fc <sbrk_aligned>
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d03a      	beq.n	8007b2a <_malloc_r+0xea>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	442b      	add	r3, r5
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	f8d8 3000 	ldr.w	r3, [r8]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	bb62      	cbnz	r2, 8007b1c <_malloc_r+0xdc>
 8007ac2:	f8c8 7000 	str.w	r7, [r8]
 8007ac6:	e00f      	b.n	8007ae8 <_malloc_r+0xa8>
 8007ac8:	6822      	ldr	r2, [r4, #0]
 8007aca:	1b52      	subs	r2, r2, r5
 8007acc:	d420      	bmi.n	8007b10 <_malloc_r+0xd0>
 8007ace:	2a0b      	cmp	r2, #11
 8007ad0:	d917      	bls.n	8007b02 <_malloc_r+0xc2>
 8007ad2:	1961      	adds	r1, r4, r5
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	6025      	str	r5, [r4, #0]
 8007ad8:	bf18      	it	ne
 8007ada:	6059      	strne	r1, [r3, #4]
 8007adc:	6863      	ldr	r3, [r4, #4]
 8007ade:	bf08      	it	eq
 8007ae0:	f8c8 1000 	streq.w	r1, [r8]
 8007ae4:	5162      	str	r2, [r4, r5]
 8007ae6:	604b      	str	r3, [r1, #4]
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f000 f82f 	bl	8007b4c <__malloc_unlock>
 8007aee:	f104 000b 	add.w	r0, r4, #11
 8007af2:	1d23      	adds	r3, r4, #4
 8007af4:	f020 0007 	bic.w	r0, r0, #7
 8007af8:	1ac2      	subs	r2, r0, r3
 8007afa:	bf1c      	itt	ne
 8007afc:	1a1b      	subne	r3, r3, r0
 8007afe:	50a3      	strne	r3, [r4, r2]
 8007b00:	e7af      	b.n	8007a62 <_malloc_r+0x22>
 8007b02:	6862      	ldr	r2, [r4, #4]
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	bf0c      	ite	eq
 8007b08:	f8c8 2000 	streq.w	r2, [r8]
 8007b0c:	605a      	strne	r2, [r3, #4]
 8007b0e:	e7eb      	b.n	8007ae8 <_malloc_r+0xa8>
 8007b10:	4623      	mov	r3, r4
 8007b12:	6864      	ldr	r4, [r4, #4]
 8007b14:	e7ae      	b.n	8007a74 <_malloc_r+0x34>
 8007b16:	463c      	mov	r4, r7
 8007b18:	687f      	ldr	r7, [r7, #4]
 8007b1a:	e7b6      	b.n	8007a8a <_malloc_r+0x4a>
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	d1fb      	bne.n	8007b1c <_malloc_r+0xdc>
 8007b24:	2300      	movs	r3, #0
 8007b26:	6053      	str	r3, [r2, #4]
 8007b28:	e7de      	b.n	8007ae8 <_malloc_r+0xa8>
 8007b2a:	230c      	movs	r3, #12
 8007b2c:	6033      	str	r3, [r6, #0]
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f000 f80c 	bl	8007b4c <__malloc_unlock>
 8007b34:	e794      	b.n	8007a60 <_malloc_r+0x20>
 8007b36:	6005      	str	r5, [r0, #0]
 8007b38:	e7d6      	b.n	8007ae8 <_malloc_r+0xa8>
 8007b3a:	bf00      	nop
 8007b3c:	200008bc 	.word	0x200008bc

08007b40 <__malloc_lock>:
 8007b40:	4801      	ldr	r0, [pc, #4]	@ (8007b48 <__malloc_lock+0x8>)
 8007b42:	f7ff bf0e 	b.w	8007962 <__retarget_lock_acquire_recursive>
 8007b46:	bf00      	nop
 8007b48:	200008b4 	.word	0x200008b4

08007b4c <__malloc_unlock>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	@ (8007b54 <__malloc_unlock+0x8>)
 8007b4e:	f7ff bf09 	b.w	8007964 <__retarget_lock_release_recursive>
 8007b52:	bf00      	nop
 8007b54:	200008b4 	.word	0x200008b4

08007b58 <__sfputc_r>:
 8007b58:	6893      	ldr	r3, [r2, #8]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	b410      	push	{r4}
 8007b60:	6093      	str	r3, [r2, #8]
 8007b62:	da08      	bge.n	8007b76 <__sfputc_r+0x1e>
 8007b64:	6994      	ldr	r4, [r2, #24]
 8007b66:	42a3      	cmp	r3, r4
 8007b68:	db01      	blt.n	8007b6e <__sfputc_r+0x16>
 8007b6a:	290a      	cmp	r1, #10
 8007b6c:	d103      	bne.n	8007b76 <__sfputc_r+0x1e>
 8007b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b72:	f7ff bde8 	b.w	8007746 <__swbuf_r>
 8007b76:	6813      	ldr	r3, [r2, #0]
 8007b78:	1c58      	adds	r0, r3, #1
 8007b7a:	6010      	str	r0, [r2, #0]
 8007b7c:	7019      	strb	r1, [r3, #0]
 8007b7e:	4608      	mov	r0, r1
 8007b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <__sfputs_r>:
 8007b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b88:	4606      	mov	r6, r0
 8007b8a:	460f      	mov	r7, r1
 8007b8c:	4614      	mov	r4, r2
 8007b8e:	18d5      	adds	r5, r2, r3
 8007b90:	42ac      	cmp	r4, r5
 8007b92:	d101      	bne.n	8007b98 <__sfputs_r+0x12>
 8007b94:	2000      	movs	r0, #0
 8007b96:	e007      	b.n	8007ba8 <__sfputs_r+0x22>
 8007b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b9c:	463a      	mov	r2, r7
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7ff ffda 	bl	8007b58 <__sfputc_r>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d1f3      	bne.n	8007b90 <__sfputs_r+0xa>
 8007ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bac <_vfiprintf_r>:
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	460d      	mov	r5, r1
 8007bb2:	b09d      	sub	sp, #116	@ 0x74
 8007bb4:	4614      	mov	r4, r2
 8007bb6:	4698      	mov	r8, r3
 8007bb8:	4606      	mov	r6, r0
 8007bba:	b118      	cbz	r0, 8007bc4 <_vfiprintf_r+0x18>
 8007bbc:	6a03      	ldr	r3, [r0, #32]
 8007bbe:	b90b      	cbnz	r3, 8007bc4 <_vfiprintf_r+0x18>
 8007bc0:	f7ff fcd8 	bl	8007574 <__sinit>
 8007bc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bc6:	07d9      	lsls	r1, r3, #31
 8007bc8:	d405      	bmi.n	8007bd6 <_vfiprintf_r+0x2a>
 8007bca:	89ab      	ldrh	r3, [r5, #12]
 8007bcc:	059a      	lsls	r2, r3, #22
 8007bce:	d402      	bmi.n	8007bd6 <_vfiprintf_r+0x2a>
 8007bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bd2:	f7ff fec6 	bl	8007962 <__retarget_lock_acquire_recursive>
 8007bd6:	89ab      	ldrh	r3, [r5, #12]
 8007bd8:	071b      	lsls	r3, r3, #28
 8007bda:	d501      	bpl.n	8007be0 <_vfiprintf_r+0x34>
 8007bdc:	692b      	ldr	r3, [r5, #16]
 8007bde:	b99b      	cbnz	r3, 8007c08 <_vfiprintf_r+0x5c>
 8007be0:	4629      	mov	r1, r5
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7ff fdee 	bl	80077c4 <__swsetup_r>
 8007be8:	b170      	cbz	r0, 8007c08 <_vfiprintf_r+0x5c>
 8007bea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bec:	07dc      	lsls	r4, r3, #31
 8007bee:	d504      	bpl.n	8007bfa <_vfiprintf_r+0x4e>
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	b01d      	add	sp, #116	@ 0x74
 8007bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfa:	89ab      	ldrh	r3, [r5, #12]
 8007bfc:	0598      	lsls	r0, r3, #22
 8007bfe:	d4f7      	bmi.n	8007bf0 <_vfiprintf_r+0x44>
 8007c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c02:	f7ff feaf 	bl	8007964 <__retarget_lock_release_recursive>
 8007c06:	e7f3      	b.n	8007bf0 <_vfiprintf_r+0x44>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c16:	2330      	movs	r3, #48	@ 0x30
 8007c18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007dc8 <_vfiprintf_r+0x21c>
 8007c1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c20:	f04f 0901 	mov.w	r9, #1
 8007c24:	4623      	mov	r3, r4
 8007c26:	469a      	mov	sl, r3
 8007c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c2c:	b10a      	cbz	r2, 8007c32 <_vfiprintf_r+0x86>
 8007c2e:	2a25      	cmp	r2, #37	@ 0x25
 8007c30:	d1f9      	bne.n	8007c26 <_vfiprintf_r+0x7a>
 8007c32:	ebba 0b04 	subs.w	fp, sl, r4
 8007c36:	d00b      	beq.n	8007c50 <_vfiprintf_r+0xa4>
 8007c38:	465b      	mov	r3, fp
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f7ff ffa1 	bl	8007b86 <__sfputs_r>
 8007c44:	3001      	adds	r0, #1
 8007c46:	f000 80a7 	beq.w	8007d98 <_vfiprintf_r+0x1ec>
 8007c4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c4c:	445a      	add	r2, fp
 8007c4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c50:	f89a 3000 	ldrb.w	r3, [sl]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 809f 	beq.w	8007d98 <_vfiprintf_r+0x1ec>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c64:	f10a 0a01 	add.w	sl, sl, #1
 8007c68:	9304      	str	r3, [sp, #16]
 8007c6a:	9307      	str	r3, [sp, #28]
 8007c6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c70:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c72:	4654      	mov	r4, sl
 8007c74:	2205      	movs	r2, #5
 8007c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7a:	4853      	ldr	r0, [pc, #332]	@ (8007dc8 <_vfiprintf_r+0x21c>)
 8007c7c:	f7f8 faa8 	bl	80001d0 <memchr>
 8007c80:	9a04      	ldr	r2, [sp, #16]
 8007c82:	b9d8      	cbnz	r0, 8007cbc <_vfiprintf_r+0x110>
 8007c84:	06d1      	lsls	r1, r2, #27
 8007c86:	bf44      	itt	mi
 8007c88:	2320      	movmi	r3, #32
 8007c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c8e:	0713      	lsls	r3, r2, #28
 8007c90:	bf44      	itt	mi
 8007c92:	232b      	movmi	r3, #43	@ 0x2b
 8007c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c98:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c9e:	d015      	beq.n	8007ccc <_vfiprintf_r+0x120>
 8007ca0:	9a07      	ldr	r2, [sp, #28]
 8007ca2:	4654      	mov	r4, sl
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f04f 0c0a 	mov.w	ip, #10
 8007caa:	4621      	mov	r1, r4
 8007cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb0:	3b30      	subs	r3, #48	@ 0x30
 8007cb2:	2b09      	cmp	r3, #9
 8007cb4:	d94b      	bls.n	8007d4e <_vfiprintf_r+0x1a2>
 8007cb6:	b1b0      	cbz	r0, 8007ce6 <_vfiprintf_r+0x13a>
 8007cb8:	9207      	str	r2, [sp, #28]
 8007cba:	e014      	b.n	8007ce6 <_vfiprintf_r+0x13a>
 8007cbc:	eba0 0308 	sub.w	r3, r0, r8
 8007cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	9304      	str	r3, [sp, #16]
 8007cc8:	46a2      	mov	sl, r4
 8007cca:	e7d2      	b.n	8007c72 <_vfiprintf_r+0xc6>
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	1d19      	adds	r1, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	9103      	str	r1, [sp, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bfbb      	ittet	lt
 8007cd8:	425b      	neglt	r3, r3
 8007cda:	f042 0202 	orrlt.w	r2, r2, #2
 8007cde:	9307      	strge	r3, [sp, #28]
 8007ce0:	9307      	strlt	r3, [sp, #28]
 8007ce2:	bfb8      	it	lt
 8007ce4:	9204      	strlt	r2, [sp, #16]
 8007ce6:	7823      	ldrb	r3, [r4, #0]
 8007ce8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cea:	d10a      	bne.n	8007d02 <_vfiprintf_r+0x156>
 8007cec:	7863      	ldrb	r3, [r4, #1]
 8007cee:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cf0:	d132      	bne.n	8007d58 <_vfiprintf_r+0x1ac>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	1d1a      	adds	r2, r3, #4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	9203      	str	r2, [sp, #12]
 8007cfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cfe:	3402      	adds	r4, #2
 8007d00:	9305      	str	r3, [sp, #20]
 8007d02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007dd8 <_vfiprintf_r+0x22c>
 8007d06:	7821      	ldrb	r1, [r4, #0]
 8007d08:	2203      	movs	r2, #3
 8007d0a:	4650      	mov	r0, sl
 8007d0c:	f7f8 fa60 	bl	80001d0 <memchr>
 8007d10:	b138      	cbz	r0, 8007d22 <_vfiprintf_r+0x176>
 8007d12:	9b04      	ldr	r3, [sp, #16]
 8007d14:	eba0 000a 	sub.w	r0, r0, sl
 8007d18:	2240      	movs	r2, #64	@ 0x40
 8007d1a:	4082      	lsls	r2, r0
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	3401      	adds	r4, #1
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d26:	4829      	ldr	r0, [pc, #164]	@ (8007dcc <_vfiprintf_r+0x220>)
 8007d28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d2c:	2206      	movs	r2, #6
 8007d2e:	f7f8 fa4f 	bl	80001d0 <memchr>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d03f      	beq.n	8007db6 <_vfiprintf_r+0x20a>
 8007d36:	4b26      	ldr	r3, [pc, #152]	@ (8007dd0 <_vfiprintf_r+0x224>)
 8007d38:	bb1b      	cbnz	r3, 8007d82 <_vfiprintf_r+0x1d6>
 8007d3a:	9b03      	ldr	r3, [sp, #12]
 8007d3c:	3307      	adds	r3, #7
 8007d3e:	f023 0307 	bic.w	r3, r3, #7
 8007d42:	3308      	adds	r3, #8
 8007d44:	9303      	str	r3, [sp, #12]
 8007d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d48:	443b      	add	r3, r7
 8007d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4c:	e76a      	b.n	8007c24 <_vfiprintf_r+0x78>
 8007d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d52:	460c      	mov	r4, r1
 8007d54:	2001      	movs	r0, #1
 8007d56:	e7a8      	b.n	8007caa <_vfiprintf_r+0xfe>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	3401      	adds	r4, #1
 8007d5c:	9305      	str	r3, [sp, #20]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	f04f 0c0a 	mov.w	ip, #10
 8007d64:	4620      	mov	r0, r4
 8007d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d6a:	3a30      	subs	r2, #48	@ 0x30
 8007d6c:	2a09      	cmp	r2, #9
 8007d6e:	d903      	bls.n	8007d78 <_vfiprintf_r+0x1cc>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0c6      	beq.n	8007d02 <_vfiprintf_r+0x156>
 8007d74:	9105      	str	r1, [sp, #20]
 8007d76:	e7c4      	b.n	8007d02 <_vfiprintf_r+0x156>
 8007d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e7f0      	b.n	8007d64 <_vfiprintf_r+0x1b8>
 8007d82:	ab03      	add	r3, sp, #12
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	462a      	mov	r2, r5
 8007d88:	4b12      	ldr	r3, [pc, #72]	@ (8007dd4 <_vfiprintf_r+0x228>)
 8007d8a:	a904      	add	r1, sp, #16
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f3af 8000 	nop.w
 8007d92:	4607      	mov	r7, r0
 8007d94:	1c78      	adds	r0, r7, #1
 8007d96:	d1d6      	bne.n	8007d46 <_vfiprintf_r+0x19a>
 8007d98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d9a:	07d9      	lsls	r1, r3, #31
 8007d9c:	d405      	bmi.n	8007daa <_vfiprintf_r+0x1fe>
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	059a      	lsls	r2, r3, #22
 8007da2:	d402      	bmi.n	8007daa <_vfiprintf_r+0x1fe>
 8007da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007da6:	f7ff fddd 	bl	8007964 <__retarget_lock_release_recursive>
 8007daa:	89ab      	ldrh	r3, [r5, #12]
 8007dac:	065b      	lsls	r3, r3, #25
 8007dae:	f53f af1f 	bmi.w	8007bf0 <_vfiprintf_r+0x44>
 8007db2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007db4:	e71e      	b.n	8007bf4 <_vfiprintf_r+0x48>
 8007db6:	ab03      	add	r3, sp, #12
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	462a      	mov	r2, r5
 8007dbc:	4b05      	ldr	r3, [pc, #20]	@ (8007dd4 <_vfiprintf_r+0x228>)
 8007dbe:	a904      	add	r1, sp, #16
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f000 f879 	bl	8007eb8 <_printf_i>
 8007dc6:	e7e4      	b.n	8007d92 <_vfiprintf_r+0x1e6>
 8007dc8:	080087a8 	.word	0x080087a8
 8007dcc:	080087b2 	.word	0x080087b2
 8007dd0:	00000000 	.word	0x00000000
 8007dd4:	08007b87 	.word	0x08007b87
 8007dd8:	080087ae 	.word	0x080087ae

08007ddc <_printf_common>:
 8007ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de0:	4616      	mov	r6, r2
 8007de2:	4698      	mov	r8, r3
 8007de4:	688a      	ldr	r2, [r1, #8]
 8007de6:	690b      	ldr	r3, [r1, #16]
 8007de8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007dec:	4293      	cmp	r3, r2
 8007dee:	bfb8      	it	lt
 8007df0:	4613      	movlt	r3, r2
 8007df2:	6033      	str	r3, [r6, #0]
 8007df4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007df8:	4607      	mov	r7, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	b10a      	cbz	r2, 8007e02 <_printf_common+0x26>
 8007dfe:	3301      	adds	r3, #1
 8007e00:	6033      	str	r3, [r6, #0]
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	0699      	lsls	r1, r3, #26
 8007e06:	bf42      	ittt	mi
 8007e08:	6833      	ldrmi	r3, [r6, #0]
 8007e0a:	3302      	addmi	r3, #2
 8007e0c:	6033      	strmi	r3, [r6, #0]
 8007e0e:	6825      	ldr	r5, [r4, #0]
 8007e10:	f015 0506 	ands.w	r5, r5, #6
 8007e14:	d106      	bne.n	8007e24 <_printf_common+0x48>
 8007e16:	f104 0a19 	add.w	sl, r4, #25
 8007e1a:	68e3      	ldr	r3, [r4, #12]
 8007e1c:	6832      	ldr	r2, [r6, #0]
 8007e1e:	1a9b      	subs	r3, r3, r2
 8007e20:	42ab      	cmp	r3, r5
 8007e22:	dc26      	bgt.n	8007e72 <_printf_common+0x96>
 8007e24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e28:	6822      	ldr	r2, [r4, #0]
 8007e2a:	3b00      	subs	r3, #0
 8007e2c:	bf18      	it	ne
 8007e2e:	2301      	movne	r3, #1
 8007e30:	0692      	lsls	r2, r2, #26
 8007e32:	d42b      	bmi.n	8007e8c <_printf_common+0xb0>
 8007e34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e38:	4641      	mov	r1, r8
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	47c8      	blx	r9
 8007e3e:	3001      	adds	r0, #1
 8007e40:	d01e      	beq.n	8007e80 <_printf_common+0xa4>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	6922      	ldr	r2, [r4, #16]
 8007e46:	f003 0306 	and.w	r3, r3, #6
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	bf02      	ittt	eq
 8007e4e:	68e5      	ldreq	r5, [r4, #12]
 8007e50:	6833      	ldreq	r3, [r6, #0]
 8007e52:	1aed      	subeq	r5, r5, r3
 8007e54:	68a3      	ldr	r3, [r4, #8]
 8007e56:	bf0c      	ite	eq
 8007e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e5c:	2500      	movne	r5, #0
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	bfc4      	itt	gt
 8007e62:	1a9b      	subgt	r3, r3, r2
 8007e64:	18ed      	addgt	r5, r5, r3
 8007e66:	2600      	movs	r6, #0
 8007e68:	341a      	adds	r4, #26
 8007e6a:	42b5      	cmp	r5, r6
 8007e6c:	d11a      	bne.n	8007ea4 <_printf_common+0xc8>
 8007e6e:	2000      	movs	r0, #0
 8007e70:	e008      	b.n	8007e84 <_printf_common+0xa8>
 8007e72:	2301      	movs	r3, #1
 8007e74:	4652      	mov	r2, sl
 8007e76:	4641      	mov	r1, r8
 8007e78:	4638      	mov	r0, r7
 8007e7a:	47c8      	blx	r9
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d103      	bne.n	8007e88 <_printf_common+0xac>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e88:	3501      	adds	r5, #1
 8007e8a:	e7c6      	b.n	8007e1a <_printf_common+0x3e>
 8007e8c:	18e1      	adds	r1, r4, r3
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	2030      	movs	r0, #48	@ 0x30
 8007e92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e96:	4422      	add	r2, r4
 8007e98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ea0:	3302      	adds	r3, #2
 8007ea2:	e7c7      	b.n	8007e34 <_printf_common+0x58>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	4641      	mov	r1, r8
 8007eaa:	4638      	mov	r0, r7
 8007eac:	47c8      	blx	r9
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d0e6      	beq.n	8007e80 <_printf_common+0xa4>
 8007eb2:	3601      	adds	r6, #1
 8007eb4:	e7d9      	b.n	8007e6a <_printf_common+0x8e>
	...

08007eb8 <_printf_i>:
 8007eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ebc:	7e0f      	ldrb	r7, [r1, #24]
 8007ebe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ec0:	2f78      	cmp	r7, #120	@ 0x78
 8007ec2:	4691      	mov	r9, r2
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	469a      	mov	sl, r3
 8007eca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ece:	d807      	bhi.n	8007ee0 <_printf_i+0x28>
 8007ed0:	2f62      	cmp	r7, #98	@ 0x62
 8007ed2:	d80a      	bhi.n	8007eea <_printf_i+0x32>
 8007ed4:	2f00      	cmp	r7, #0
 8007ed6:	f000 80d1 	beq.w	800807c <_printf_i+0x1c4>
 8007eda:	2f58      	cmp	r7, #88	@ 0x58
 8007edc:	f000 80b8 	beq.w	8008050 <_printf_i+0x198>
 8007ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ee4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ee8:	e03a      	b.n	8007f60 <_printf_i+0xa8>
 8007eea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007eee:	2b15      	cmp	r3, #21
 8007ef0:	d8f6      	bhi.n	8007ee0 <_printf_i+0x28>
 8007ef2:	a101      	add	r1, pc, #4	@ (adr r1, 8007ef8 <_printf_i+0x40>)
 8007ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ef8:	08007f51 	.word	0x08007f51
 8007efc:	08007f65 	.word	0x08007f65
 8007f00:	08007ee1 	.word	0x08007ee1
 8007f04:	08007ee1 	.word	0x08007ee1
 8007f08:	08007ee1 	.word	0x08007ee1
 8007f0c:	08007ee1 	.word	0x08007ee1
 8007f10:	08007f65 	.word	0x08007f65
 8007f14:	08007ee1 	.word	0x08007ee1
 8007f18:	08007ee1 	.word	0x08007ee1
 8007f1c:	08007ee1 	.word	0x08007ee1
 8007f20:	08007ee1 	.word	0x08007ee1
 8007f24:	08008063 	.word	0x08008063
 8007f28:	08007f8f 	.word	0x08007f8f
 8007f2c:	0800801d 	.word	0x0800801d
 8007f30:	08007ee1 	.word	0x08007ee1
 8007f34:	08007ee1 	.word	0x08007ee1
 8007f38:	08008085 	.word	0x08008085
 8007f3c:	08007ee1 	.word	0x08007ee1
 8007f40:	08007f8f 	.word	0x08007f8f
 8007f44:	08007ee1 	.word	0x08007ee1
 8007f48:	08007ee1 	.word	0x08007ee1
 8007f4c:	08008025 	.word	0x08008025
 8007f50:	6833      	ldr	r3, [r6, #0]
 8007f52:	1d1a      	adds	r2, r3, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6032      	str	r2, [r6, #0]
 8007f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f60:	2301      	movs	r3, #1
 8007f62:	e09c      	b.n	800809e <_printf_i+0x1e6>
 8007f64:	6833      	ldr	r3, [r6, #0]
 8007f66:	6820      	ldr	r0, [r4, #0]
 8007f68:	1d19      	adds	r1, r3, #4
 8007f6a:	6031      	str	r1, [r6, #0]
 8007f6c:	0606      	lsls	r6, r0, #24
 8007f6e:	d501      	bpl.n	8007f74 <_printf_i+0xbc>
 8007f70:	681d      	ldr	r5, [r3, #0]
 8007f72:	e003      	b.n	8007f7c <_printf_i+0xc4>
 8007f74:	0645      	lsls	r5, r0, #25
 8007f76:	d5fb      	bpl.n	8007f70 <_printf_i+0xb8>
 8007f78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f7c:	2d00      	cmp	r5, #0
 8007f7e:	da03      	bge.n	8007f88 <_printf_i+0xd0>
 8007f80:	232d      	movs	r3, #45	@ 0x2d
 8007f82:	426d      	negs	r5, r5
 8007f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f88:	4858      	ldr	r0, [pc, #352]	@ (80080ec <_printf_i+0x234>)
 8007f8a:	230a      	movs	r3, #10
 8007f8c:	e011      	b.n	8007fb2 <_printf_i+0xfa>
 8007f8e:	6821      	ldr	r1, [r4, #0]
 8007f90:	6833      	ldr	r3, [r6, #0]
 8007f92:	0608      	lsls	r0, r1, #24
 8007f94:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f98:	d402      	bmi.n	8007fa0 <_printf_i+0xe8>
 8007f9a:	0649      	lsls	r1, r1, #25
 8007f9c:	bf48      	it	mi
 8007f9e:	b2ad      	uxthmi	r5, r5
 8007fa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fa2:	4852      	ldr	r0, [pc, #328]	@ (80080ec <_printf_i+0x234>)
 8007fa4:	6033      	str	r3, [r6, #0]
 8007fa6:	bf14      	ite	ne
 8007fa8:	230a      	movne	r3, #10
 8007faa:	2308      	moveq	r3, #8
 8007fac:	2100      	movs	r1, #0
 8007fae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fb2:	6866      	ldr	r6, [r4, #4]
 8007fb4:	60a6      	str	r6, [r4, #8]
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	db05      	blt.n	8007fc6 <_printf_i+0x10e>
 8007fba:	6821      	ldr	r1, [r4, #0]
 8007fbc:	432e      	orrs	r6, r5
 8007fbe:	f021 0104 	bic.w	r1, r1, #4
 8007fc2:	6021      	str	r1, [r4, #0]
 8007fc4:	d04b      	beq.n	800805e <_printf_i+0x1a6>
 8007fc6:	4616      	mov	r6, r2
 8007fc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fcc:	fb03 5711 	mls	r7, r3, r1, r5
 8007fd0:	5dc7      	ldrb	r7, [r0, r7]
 8007fd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fd6:	462f      	mov	r7, r5
 8007fd8:	42bb      	cmp	r3, r7
 8007fda:	460d      	mov	r5, r1
 8007fdc:	d9f4      	bls.n	8007fc8 <_printf_i+0x110>
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d10b      	bne.n	8007ffa <_printf_i+0x142>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	07df      	lsls	r7, r3, #31
 8007fe6:	d508      	bpl.n	8007ffa <_printf_i+0x142>
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	6861      	ldr	r1, [r4, #4]
 8007fec:	4299      	cmp	r1, r3
 8007fee:	bfde      	ittt	le
 8007ff0:	2330      	movle	r3, #48	@ 0x30
 8007ff2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ff6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ffa:	1b92      	subs	r2, r2, r6
 8007ffc:	6122      	str	r2, [r4, #16]
 8007ffe:	f8cd a000 	str.w	sl, [sp]
 8008002:	464b      	mov	r3, r9
 8008004:	aa03      	add	r2, sp, #12
 8008006:	4621      	mov	r1, r4
 8008008:	4640      	mov	r0, r8
 800800a:	f7ff fee7 	bl	8007ddc <_printf_common>
 800800e:	3001      	adds	r0, #1
 8008010:	d14a      	bne.n	80080a8 <_printf_i+0x1f0>
 8008012:	f04f 30ff 	mov.w	r0, #4294967295
 8008016:	b004      	add	sp, #16
 8008018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	f043 0320 	orr.w	r3, r3, #32
 8008022:	6023      	str	r3, [r4, #0]
 8008024:	4832      	ldr	r0, [pc, #200]	@ (80080f0 <_printf_i+0x238>)
 8008026:	2778      	movs	r7, #120	@ 0x78
 8008028:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	6831      	ldr	r1, [r6, #0]
 8008030:	061f      	lsls	r7, r3, #24
 8008032:	f851 5b04 	ldr.w	r5, [r1], #4
 8008036:	d402      	bmi.n	800803e <_printf_i+0x186>
 8008038:	065f      	lsls	r7, r3, #25
 800803a:	bf48      	it	mi
 800803c:	b2ad      	uxthmi	r5, r5
 800803e:	6031      	str	r1, [r6, #0]
 8008040:	07d9      	lsls	r1, r3, #31
 8008042:	bf44      	itt	mi
 8008044:	f043 0320 	orrmi.w	r3, r3, #32
 8008048:	6023      	strmi	r3, [r4, #0]
 800804a:	b11d      	cbz	r5, 8008054 <_printf_i+0x19c>
 800804c:	2310      	movs	r3, #16
 800804e:	e7ad      	b.n	8007fac <_printf_i+0xf4>
 8008050:	4826      	ldr	r0, [pc, #152]	@ (80080ec <_printf_i+0x234>)
 8008052:	e7e9      	b.n	8008028 <_printf_i+0x170>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	f023 0320 	bic.w	r3, r3, #32
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	e7f6      	b.n	800804c <_printf_i+0x194>
 800805e:	4616      	mov	r6, r2
 8008060:	e7bd      	b.n	8007fde <_printf_i+0x126>
 8008062:	6833      	ldr	r3, [r6, #0]
 8008064:	6825      	ldr	r5, [r4, #0]
 8008066:	6961      	ldr	r1, [r4, #20]
 8008068:	1d18      	adds	r0, r3, #4
 800806a:	6030      	str	r0, [r6, #0]
 800806c:	062e      	lsls	r6, r5, #24
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	d501      	bpl.n	8008076 <_printf_i+0x1be>
 8008072:	6019      	str	r1, [r3, #0]
 8008074:	e002      	b.n	800807c <_printf_i+0x1c4>
 8008076:	0668      	lsls	r0, r5, #25
 8008078:	d5fb      	bpl.n	8008072 <_printf_i+0x1ba>
 800807a:	8019      	strh	r1, [r3, #0]
 800807c:	2300      	movs	r3, #0
 800807e:	6123      	str	r3, [r4, #16]
 8008080:	4616      	mov	r6, r2
 8008082:	e7bc      	b.n	8007ffe <_printf_i+0x146>
 8008084:	6833      	ldr	r3, [r6, #0]
 8008086:	1d1a      	adds	r2, r3, #4
 8008088:	6032      	str	r2, [r6, #0]
 800808a:	681e      	ldr	r6, [r3, #0]
 800808c:	6862      	ldr	r2, [r4, #4]
 800808e:	2100      	movs	r1, #0
 8008090:	4630      	mov	r0, r6
 8008092:	f7f8 f89d 	bl	80001d0 <memchr>
 8008096:	b108      	cbz	r0, 800809c <_printf_i+0x1e4>
 8008098:	1b80      	subs	r0, r0, r6
 800809a:	6060      	str	r0, [r4, #4]
 800809c:	6863      	ldr	r3, [r4, #4]
 800809e:	6123      	str	r3, [r4, #16]
 80080a0:	2300      	movs	r3, #0
 80080a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080a6:	e7aa      	b.n	8007ffe <_printf_i+0x146>
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	4632      	mov	r2, r6
 80080ac:	4649      	mov	r1, r9
 80080ae:	4640      	mov	r0, r8
 80080b0:	47d0      	blx	sl
 80080b2:	3001      	adds	r0, #1
 80080b4:	d0ad      	beq.n	8008012 <_printf_i+0x15a>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	079b      	lsls	r3, r3, #30
 80080ba:	d413      	bmi.n	80080e4 <_printf_i+0x22c>
 80080bc:	68e0      	ldr	r0, [r4, #12]
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	4298      	cmp	r0, r3
 80080c2:	bfb8      	it	lt
 80080c4:	4618      	movlt	r0, r3
 80080c6:	e7a6      	b.n	8008016 <_printf_i+0x15e>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4632      	mov	r2, r6
 80080cc:	4649      	mov	r1, r9
 80080ce:	4640      	mov	r0, r8
 80080d0:	47d0      	blx	sl
 80080d2:	3001      	adds	r0, #1
 80080d4:	d09d      	beq.n	8008012 <_printf_i+0x15a>
 80080d6:	3501      	adds	r5, #1
 80080d8:	68e3      	ldr	r3, [r4, #12]
 80080da:	9903      	ldr	r1, [sp, #12]
 80080dc:	1a5b      	subs	r3, r3, r1
 80080de:	42ab      	cmp	r3, r5
 80080e0:	dcf2      	bgt.n	80080c8 <_printf_i+0x210>
 80080e2:	e7eb      	b.n	80080bc <_printf_i+0x204>
 80080e4:	2500      	movs	r5, #0
 80080e6:	f104 0619 	add.w	r6, r4, #25
 80080ea:	e7f5      	b.n	80080d8 <_printf_i+0x220>
 80080ec:	080087b9 	.word	0x080087b9
 80080f0:	080087ca 	.word	0x080087ca

080080f4 <__sflush_r>:
 80080f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fc:	0716      	lsls	r6, r2, #28
 80080fe:	4605      	mov	r5, r0
 8008100:	460c      	mov	r4, r1
 8008102:	d454      	bmi.n	80081ae <__sflush_r+0xba>
 8008104:	684b      	ldr	r3, [r1, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	dc02      	bgt.n	8008110 <__sflush_r+0x1c>
 800810a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	dd48      	ble.n	80081a2 <__sflush_r+0xae>
 8008110:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008112:	2e00      	cmp	r6, #0
 8008114:	d045      	beq.n	80081a2 <__sflush_r+0xae>
 8008116:	2300      	movs	r3, #0
 8008118:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800811c:	682f      	ldr	r7, [r5, #0]
 800811e:	6a21      	ldr	r1, [r4, #32]
 8008120:	602b      	str	r3, [r5, #0]
 8008122:	d030      	beq.n	8008186 <__sflush_r+0x92>
 8008124:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	0759      	lsls	r1, r3, #29
 800812a:	d505      	bpl.n	8008138 <__sflush_r+0x44>
 800812c:	6863      	ldr	r3, [r4, #4]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008132:	b10b      	cbz	r3, 8008138 <__sflush_r+0x44>
 8008134:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008136:	1ad2      	subs	r2, r2, r3
 8008138:	2300      	movs	r3, #0
 800813a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800813c:	6a21      	ldr	r1, [r4, #32]
 800813e:	4628      	mov	r0, r5
 8008140:	47b0      	blx	r6
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	d106      	bne.n	8008156 <__sflush_r+0x62>
 8008148:	6829      	ldr	r1, [r5, #0]
 800814a:	291d      	cmp	r1, #29
 800814c:	d82b      	bhi.n	80081a6 <__sflush_r+0xb2>
 800814e:	4a2a      	ldr	r2, [pc, #168]	@ (80081f8 <__sflush_r+0x104>)
 8008150:	40ca      	lsrs	r2, r1
 8008152:	07d6      	lsls	r6, r2, #31
 8008154:	d527      	bpl.n	80081a6 <__sflush_r+0xb2>
 8008156:	2200      	movs	r2, #0
 8008158:	6062      	str	r2, [r4, #4]
 800815a:	04d9      	lsls	r1, r3, #19
 800815c:	6922      	ldr	r2, [r4, #16]
 800815e:	6022      	str	r2, [r4, #0]
 8008160:	d504      	bpl.n	800816c <__sflush_r+0x78>
 8008162:	1c42      	adds	r2, r0, #1
 8008164:	d101      	bne.n	800816a <__sflush_r+0x76>
 8008166:	682b      	ldr	r3, [r5, #0]
 8008168:	b903      	cbnz	r3, 800816c <__sflush_r+0x78>
 800816a:	6560      	str	r0, [r4, #84]	@ 0x54
 800816c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800816e:	602f      	str	r7, [r5, #0]
 8008170:	b1b9      	cbz	r1, 80081a2 <__sflush_r+0xae>
 8008172:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008176:	4299      	cmp	r1, r3
 8008178:	d002      	beq.n	8008180 <__sflush_r+0x8c>
 800817a:	4628      	mov	r0, r5
 800817c:	f7ff fbf4 	bl	8007968 <_free_r>
 8008180:	2300      	movs	r3, #0
 8008182:	6363      	str	r3, [r4, #52]	@ 0x34
 8008184:	e00d      	b.n	80081a2 <__sflush_r+0xae>
 8008186:	2301      	movs	r3, #1
 8008188:	4628      	mov	r0, r5
 800818a:	47b0      	blx	r6
 800818c:	4602      	mov	r2, r0
 800818e:	1c50      	adds	r0, r2, #1
 8008190:	d1c9      	bne.n	8008126 <__sflush_r+0x32>
 8008192:	682b      	ldr	r3, [r5, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0c6      	beq.n	8008126 <__sflush_r+0x32>
 8008198:	2b1d      	cmp	r3, #29
 800819a:	d001      	beq.n	80081a0 <__sflush_r+0xac>
 800819c:	2b16      	cmp	r3, #22
 800819e:	d11e      	bne.n	80081de <__sflush_r+0xea>
 80081a0:	602f      	str	r7, [r5, #0]
 80081a2:	2000      	movs	r0, #0
 80081a4:	e022      	b.n	80081ec <__sflush_r+0xf8>
 80081a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081aa:	b21b      	sxth	r3, r3
 80081ac:	e01b      	b.n	80081e6 <__sflush_r+0xf2>
 80081ae:	690f      	ldr	r7, [r1, #16]
 80081b0:	2f00      	cmp	r7, #0
 80081b2:	d0f6      	beq.n	80081a2 <__sflush_r+0xae>
 80081b4:	0793      	lsls	r3, r2, #30
 80081b6:	680e      	ldr	r6, [r1, #0]
 80081b8:	bf08      	it	eq
 80081ba:	694b      	ldreq	r3, [r1, #20]
 80081bc:	600f      	str	r7, [r1, #0]
 80081be:	bf18      	it	ne
 80081c0:	2300      	movne	r3, #0
 80081c2:	eba6 0807 	sub.w	r8, r6, r7
 80081c6:	608b      	str	r3, [r1, #8]
 80081c8:	f1b8 0f00 	cmp.w	r8, #0
 80081cc:	dde9      	ble.n	80081a2 <__sflush_r+0xae>
 80081ce:	6a21      	ldr	r1, [r4, #32]
 80081d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081d2:	4643      	mov	r3, r8
 80081d4:	463a      	mov	r2, r7
 80081d6:	4628      	mov	r0, r5
 80081d8:	47b0      	blx	r6
 80081da:	2800      	cmp	r0, #0
 80081dc:	dc08      	bgt.n	80081f0 <__sflush_r+0xfc>
 80081de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081e6:	81a3      	strh	r3, [r4, #12]
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f0:	4407      	add	r7, r0
 80081f2:	eba8 0800 	sub.w	r8, r8, r0
 80081f6:	e7e7      	b.n	80081c8 <__sflush_r+0xd4>
 80081f8:	20400001 	.word	0x20400001

080081fc <_fflush_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	690b      	ldr	r3, [r1, #16]
 8008200:	4605      	mov	r5, r0
 8008202:	460c      	mov	r4, r1
 8008204:	b913      	cbnz	r3, 800820c <_fflush_r+0x10>
 8008206:	2500      	movs	r5, #0
 8008208:	4628      	mov	r0, r5
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	b118      	cbz	r0, 8008216 <_fflush_r+0x1a>
 800820e:	6a03      	ldr	r3, [r0, #32]
 8008210:	b90b      	cbnz	r3, 8008216 <_fflush_r+0x1a>
 8008212:	f7ff f9af 	bl	8007574 <__sinit>
 8008216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f3      	beq.n	8008206 <_fflush_r+0xa>
 800821e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008220:	07d0      	lsls	r0, r2, #31
 8008222:	d404      	bmi.n	800822e <_fflush_r+0x32>
 8008224:	0599      	lsls	r1, r3, #22
 8008226:	d402      	bmi.n	800822e <_fflush_r+0x32>
 8008228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800822a:	f7ff fb9a 	bl	8007962 <__retarget_lock_acquire_recursive>
 800822e:	4628      	mov	r0, r5
 8008230:	4621      	mov	r1, r4
 8008232:	f7ff ff5f 	bl	80080f4 <__sflush_r>
 8008236:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008238:	07da      	lsls	r2, r3, #31
 800823a:	4605      	mov	r5, r0
 800823c:	d4e4      	bmi.n	8008208 <_fflush_r+0xc>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	059b      	lsls	r3, r3, #22
 8008242:	d4e1      	bmi.n	8008208 <_fflush_r+0xc>
 8008244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008246:	f7ff fb8d 	bl	8007964 <__retarget_lock_release_recursive>
 800824a:	e7dd      	b.n	8008208 <_fflush_r+0xc>

0800824c <__swhatbuf_r>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	460c      	mov	r4, r1
 8008250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008254:	2900      	cmp	r1, #0
 8008256:	b096      	sub	sp, #88	@ 0x58
 8008258:	4615      	mov	r5, r2
 800825a:	461e      	mov	r6, r3
 800825c:	da0d      	bge.n	800827a <__swhatbuf_r+0x2e>
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008264:	f04f 0100 	mov.w	r1, #0
 8008268:	bf14      	ite	ne
 800826a:	2340      	movne	r3, #64	@ 0x40
 800826c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008270:	2000      	movs	r0, #0
 8008272:	6031      	str	r1, [r6, #0]
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	b016      	add	sp, #88	@ 0x58
 8008278:	bd70      	pop	{r4, r5, r6, pc}
 800827a:	466a      	mov	r2, sp
 800827c:	f000 f848 	bl	8008310 <_fstat_r>
 8008280:	2800      	cmp	r0, #0
 8008282:	dbec      	blt.n	800825e <__swhatbuf_r+0x12>
 8008284:	9901      	ldr	r1, [sp, #4]
 8008286:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800828a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800828e:	4259      	negs	r1, r3
 8008290:	4159      	adcs	r1, r3
 8008292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008296:	e7eb      	b.n	8008270 <__swhatbuf_r+0x24>

08008298 <__smakebuf_r>:
 8008298:	898b      	ldrh	r3, [r1, #12]
 800829a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800829c:	079d      	lsls	r5, r3, #30
 800829e:	4606      	mov	r6, r0
 80082a0:	460c      	mov	r4, r1
 80082a2:	d507      	bpl.n	80082b4 <__smakebuf_r+0x1c>
 80082a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	6123      	str	r3, [r4, #16]
 80082ac:	2301      	movs	r3, #1
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	b003      	add	sp, #12
 80082b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b4:	ab01      	add	r3, sp, #4
 80082b6:	466a      	mov	r2, sp
 80082b8:	f7ff ffc8 	bl	800824c <__swhatbuf_r>
 80082bc:	9f00      	ldr	r7, [sp, #0]
 80082be:	4605      	mov	r5, r0
 80082c0:	4639      	mov	r1, r7
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff fbbc 	bl	8007a40 <_malloc_r>
 80082c8:	b948      	cbnz	r0, 80082de <__smakebuf_r+0x46>
 80082ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ce:	059a      	lsls	r2, r3, #22
 80082d0:	d4ee      	bmi.n	80082b0 <__smakebuf_r+0x18>
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	f043 0302 	orr.w	r3, r3, #2
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	e7e2      	b.n	80082a4 <__smakebuf_r+0xc>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	6020      	str	r0, [r4, #0]
 80082e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082ee:	b15b      	cbz	r3, 8008308 <__smakebuf_r+0x70>
 80082f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082f4:	4630      	mov	r0, r6
 80082f6:	f000 f81d 	bl	8008334 <_isatty_r>
 80082fa:	b128      	cbz	r0, 8008308 <__smakebuf_r+0x70>
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	f023 0303 	bic.w	r3, r3, #3
 8008302:	f043 0301 	orr.w	r3, r3, #1
 8008306:	81a3      	strh	r3, [r4, #12]
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	431d      	orrs	r5, r3
 800830c:	81a5      	strh	r5, [r4, #12]
 800830e:	e7cf      	b.n	80082b0 <__smakebuf_r+0x18>

08008310 <_fstat_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d07      	ldr	r5, [pc, #28]	@ (8008330 <_fstat_r+0x20>)
 8008314:	2300      	movs	r3, #0
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	4611      	mov	r1, r2
 800831c:	602b      	str	r3, [r5, #0]
 800831e:	f7f9 f908 	bl	8001532 <_fstat>
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	d102      	bne.n	800832c <_fstat_r+0x1c>
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	b103      	cbz	r3, 800832c <_fstat_r+0x1c>
 800832a:	6023      	str	r3, [r4, #0]
 800832c:	bd38      	pop	{r3, r4, r5, pc}
 800832e:	bf00      	nop
 8008330:	200008b0 	.word	0x200008b0

08008334 <_isatty_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d06      	ldr	r5, [pc, #24]	@ (8008350 <_isatty_r+0x1c>)
 8008338:	2300      	movs	r3, #0
 800833a:	4604      	mov	r4, r0
 800833c:	4608      	mov	r0, r1
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	f7f9 f907 	bl	8001552 <_isatty>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_isatty_r+0x1a>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_isatty_r+0x1a>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	200008b0 	.word	0x200008b0

08008354 <_sbrk_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d06      	ldr	r5, [pc, #24]	@ (8008370 <_sbrk_r+0x1c>)
 8008358:	2300      	movs	r3, #0
 800835a:	4604      	mov	r4, r0
 800835c:	4608      	mov	r0, r1
 800835e:	602b      	str	r3, [r5, #0]
 8008360:	f7f9 f910 	bl	8001584 <_sbrk>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_sbrk_r+0x1a>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_sbrk_r+0x1a>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	200008b0 	.word	0x200008b0

08008374 <_init>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	bf00      	nop
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr

08008380 <_fini>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr
