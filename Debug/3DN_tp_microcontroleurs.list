
3DN_tp_microcontroleurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007ce0  08007ce0  00008ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e0c  08007e0c  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e0c  08007e0c  00008e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e14  08007e14  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e14  08007e14  00008e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e18  08007e18  00008e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007e1c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  20000068  08007e84  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c0  08007e84  000094c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149b8  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fc  00000000  00000000  0001da50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00020b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d82  00000000  00000000  00021cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028eb7  00000000  00000000  00022a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bad  00000000  00000000  0004b909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f16ec  00000000  00000000  000634b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154ba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec4  00000000  00000000  00154be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00159aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cc8 	.word	0x08007cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007cc8 	.word	0x08007cc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <MX_DMA_Init+0x48>)
 80005a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005a6:	4a0f      	ldr	r2, [pc, #60]	@ (80005e4 <MX_DMA_Init+0x48>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80005ae:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <MX_DMA_Init+0x48>)
 80005b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	2010      	movs	r0, #16
 80005c0:	f001 f86b 	bl	800169a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005c4:	2010      	movs	r0, #16
 80005c6:	f001 f884 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2011      	movs	r0, #17
 80005d0:	f001 f863 	bl	800169a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005d4:	2011      	movs	r0, #17
 80005d6:	f001 f87c 	bl	80016d2 <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	@ 0x28
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b38      	ldr	r3, [pc, #224]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a37      	ldr	r2, [pc, #220]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b35      	ldr	r3, [pc, #212]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	4b32      	ldr	r3, [pc, #200]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	4a31      	ldr	r2, [pc, #196]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000622:	4b2f      	ldr	r3, [pc, #188]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	4a2b      	ldr	r2, [pc, #172]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063a:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	4a25      	ldr	r2, [pc, #148]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000652:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <MX_GPIO_Init+0xf8>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_nRESET_GPIO_Port, SPI3_nRESET_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2101      	movs	r1, #1
 8000662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000666:	f001 fc6f 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2120      	movs	r1, #32
 800066e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000672:	f001 fc69 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_nCS_GPIO_Port, SPI3_nCS_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2180      	movs	r1, #128	@ 0x80
 800067a:	481a      	ldr	r0, [pc, #104]	@ (80006e4 <MX_GPIO_Init+0xfc>)
 800067c:	f001 fc64 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000680:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000686:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	4814      	ldr	r0, [pc, #80]	@ (80006e8 <MX_GPIO_Init+0x100>)
 8000698:	f001 faac 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SPI3_nRESET_Pin|LD2_Pin;
 800069c:	2321      	movs	r3, #33	@ 0x21
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b6:	f001 fa9d 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_nCS_Pin */
  GPIO_InitStruct.Pin = SPI3_nCS_Pin;
 80006ba:	2380      	movs	r3, #128	@ 0x80
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_nCS_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_GPIO_Init+0xfc>)
 80006d2:	f001 fa8f 	bl	8001bf4 <HAL_GPIO_Init>

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	@ 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800

080006ec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_I2C2_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000764 <MX_I2C2_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_I2C2_Init+0x74>)
 80006f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <MX_I2C2_Init+0x7c>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_I2C2_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_I2C2_Init+0x74>)
 8000704:	2201      	movs	r2, #1
 8000706:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_I2C2_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_I2C2_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_I2C2_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_I2C2_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_I2C2_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <MX_I2C2_Init+0x74>)
 8000728:	f001 fc40 	bl	8001fac <HAL_I2C_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000732:	f000 f9bc 	bl	8000aae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <MX_I2C2_Init+0x74>)
 800073a:	f002 f85b 	bl	80027f4 <HAL_I2CEx_ConfigAnalogFilter>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000744:	f000 f9b3 	bl	8000aae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_I2C2_Init+0x74>)
 800074c:	f002 f89d 	bl	800288a <HAL_I2CEx_ConfigDigitalFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 f9aa 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000084 	.word	0x20000084
 8000764:	40005800 	.word	0x40005800
 8000768:	10d19ce4 	.word	0x10d19ce4

0800076c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0ac      	sub	sp, #176	@ 0xb0
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2288      	movs	r2, #136	@ 0x88
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f006 fd19 	bl	80071c4 <memset>
  if(i2cHandle->Instance==I2C2)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a21      	ldr	r2, [pc, #132]	@ (800081c <HAL_I2C_MspInit+0xb0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d13b      	bne.n	8000814 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800079c:	2380      	movs	r3, #128	@ 0x80
 800079e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 ff1f 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007b4:	f000 f97b 	bl	8000aae <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007bc:	4a18      	ldr	r2, [pc, #96]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 80007be:	f043 0302 	orr.w	r3, r3, #2
 80007c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c4:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d8:	2312      	movs	r3, #18
 80007da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007ea:	2304      	movs	r3, #4
 80007ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007f4:	4619      	mov	r1, r3
 80007f6:	480b      	ldr	r0, [pc, #44]	@ (8000824 <HAL_I2C_MspInit+0xb8>)
 80007f8:	f001 f9fc 	bl	8001bf4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 80007fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000800:	4a07      	ldr	r2, [pc, #28]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 8000802:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000806:	6593      	str	r3, [r2, #88]	@ 0x58
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <HAL_I2C_MspInit+0xb4>)
 800080a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000814:	bf00      	nop
 8000816:	37b0      	adds	r7, #176	@ 0xb0
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40005800 	.word	0x40005800
 8000820:	40021000 	.word	0x40021000
 8000824:	48000400 	.word	0x48000400

08000828 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000830:	1d39      	adds	r1, r7, #4
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2201      	movs	r2, #1
 8000838:	4803      	ldr	r0, [pc, #12]	@ (8000848 <__io_putchar+0x20>)
 800083a:	f005 fd5b 	bl	80062f4 <HAL_UART_Transmit>
	return chr;
 800083e:	687b      	ldr	r3, [r7, #4]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200012e8 	.word	0x200012e8

0800084c <Read_CODEC_ChipID>:

void Read_CODEC_ChipID(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af04      	add	r7, sp, #16
    uint8_t chip_id[2] = {0}; // Stockage du registre CHIP_ID (16 bits)
 8000852:	2300      	movs	r3, #0
 8000854:	80bb      	strh	r3, [r7, #4]

    // Lecture du registre CHIP_ID
    if (HAL_I2C_Mem_Read(&hi2c2, (CODEC_I2C_ADDRESS << 1), CHIP_ID_REG,
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	9302      	str	r3, [sp, #8]
 800085c:	2302      	movs	r3, #2
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2302      	movs	r3, #2
 8000866:	2200      	movs	r2, #0
 8000868:	2114      	movs	r1, #20
 800086a:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <Read_CODEC_ChipID+0x58>)
 800086c:	f001 fc3a 	bl	80020e4 <HAL_I2C_Mem_Read>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10e      	bne.n	8000894 <Read_CODEC_ChipID+0x48>
                         I2C_MEMADD_SIZE_16BIT, chip_id, 2, HAL_MAX_DELAY) == HAL_OK) {
        uint16_t chip_id_value = (chip_id[0] << 8) | chip_id[1];
 8000876:	793b      	ldrb	r3, [r7, #4]
 8000878:	b21b      	sxth	r3, r3
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	b21a      	sxth	r2, r3
 800087e:	797b      	ldrb	r3, [r7, #5]
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21b      	sxth	r3, r3
 8000886:	80fb      	strh	r3, [r7, #6]
        printf("CHIP ID: 0x%04X\r\n", chip_id_value);
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	4619      	mov	r1, r3
 800088c:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <Read_CODEC_ChipID+0x5c>)
 800088e:	f006 fb51 	bl	8006f34 <iprintf>
    } else {
        printf("Erreur lors de la lecture du CHIP ID\r\n");
    }
}
 8000892:	e002      	b.n	800089a <Read_CODEC_ChipID+0x4e>
        printf("Erreur lors de la lecture du CHIP ID\r\n");
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <Read_CODEC_ChipID+0x60>)
 8000896:	f006 fbb5 	bl	8007004 <puts>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000084 	.word	0x20000084
 80008a8:	08007ce0 	.word	0x08007ce0
 80008ac:	08007cf4 	.word	0x08007cf4

080008b0 <Start_SAI_Audio>:

void Start_SAI_Audio(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status_tx = HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)txBuffer, AUDIO_BUFFER_SIZE);
 80008b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008ba:	4913      	ldr	r1, [pc, #76]	@ (8000908 <Start_SAI_Audio+0x58>)
 80008bc:	4813      	ldr	r0, [pc, #76]	@ (800090c <Start_SAI_Audio+0x5c>)
 80008be:	f004 fbb9 	bl	8005034 <HAL_SAI_Transmit_DMA>
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]

    if (status_tx != HAL_OK) {
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d005      	beq.n	80008d8 <Start_SAI_Audio+0x28>
        printf("Erreur SAI TX: %d\r\n", status_tx);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4619      	mov	r1, r3
 80008d0:	480f      	ldr	r0, [pc, #60]	@ (8000910 <Start_SAI_Audio+0x60>)
 80008d2:	f006 fb2f 	bl	8006f34 <iprintf>
 80008d6:	e002      	b.n	80008de <Start_SAI_Audio+0x2e>
    } else {
        printf("SAI TX démarré avec succès\r\n");
 80008d8:	480e      	ldr	r0, [pc, #56]	@ (8000914 <Start_SAI_Audio+0x64>)
 80008da:	f006 fb93 	bl	8007004 <puts>
    }

    if (HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)rxBuffer, AUDIO_BUFFER_SIZE) != HAL_OK) {
 80008de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008e2:	490d      	ldr	r1, [pc, #52]	@ (8000918 <Start_SAI_Audio+0x68>)
 80008e4:	480d      	ldr	r0, [pc, #52]	@ (800091c <Start_SAI_Audio+0x6c>)
 80008e6:	f004 fc55 	bl	8005194 <HAL_SAI_Receive_DMA>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d003      	beq.n	80008f8 <Start_SAI_Audio+0x48>
        printf("Erreur démarrage SAI RX\r\n");
 80008f0:	480b      	ldr	r0, [pc, #44]	@ (8000920 <Start_SAI_Audio+0x70>)
 80008f2:	f006 fb87 	bl	8007004 <puts>
    } else {
        printf("SAI RX démarré\r\n");
    }
}
 80008f6:	e002      	b.n	80008fe <Start_SAI_Audio+0x4e>
        printf("SAI RX démarré\r\n");
 80008f8:	480a      	ldr	r0, [pc, #40]	@ (8000924 <Start_SAI_Audio+0x74>)
 80008fa:	f006 fb83 	bl	8007004 <puts>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200008e4 	.word	0x200008e4
 800090c:	200010e4 	.word	0x200010e4
 8000910:	08007d1c 	.word	0x08007d1c
 8000914:	08007d30 	.word	0x08007d30
 8000918:	200000e4 	.word	0x200000e4
 800091c:	20001168 	.word	0x20001168
 8000920:	08007d50 	.word	0x08007d50
 8000924:	08007d6c 	.word	0x08007d6c

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f000 fd3a 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f842 	bl	80009b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000934:	f000 f891 	bl	8000a5a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f7ff fe56 	bl	80005e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800093c:	f7ff fe2e 	bl	800059c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000940:	f000 fc7a 	bl	8001238 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000944:	f000 faac 	bl	8000ea0 <MX_SPI3_Init>
  MX_I2C2_Init();
 8000948:	f7ff fed0 	bl	80006ec <MX_I2C2_Init>
  MX_SAI2_Init();
 800094c:	f000 f964 	bl	8000c18 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <main+0x7c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <main+0x7c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800095e:	601a      	str	r2, [r3, #0]
	mcp23s17.hspi = &hspi3;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <main+0x80>)
 8000962:	4a12      	ldr	r2, [pc, #72]	@ (80009ac <main+0x84>)
 8000964:	601a      	str	r2, [r3, #0]
	mcp23s17.CS_Port = SPI3_nCS_GPIO_Port;
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <main+0x80>)
 8000968:	4a11      	ldr	r2, [pc, #68]	@ (80009b0 <main+0x88>)
 800096a:	605a      	str	r2, [r3, #4]
	mcp23s17.CS_Pin = SPI3_nCS_Pin;
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <main+0x80>)
 800096e:	2280      	movs	r2, #128	@ 0x80
 8000970:	811a      	strh	r2, [r3, #8]
	MCP23S17_Init(&mcp23s17);
 8000972:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <main+0x80>)
 8000974:	f000 f8cc 	bl	8000b10 <MCP23S17_Init>

	Read_CODEC_ChipID();
 8000978:	f7ff ff68 	bl	800084c <Read_CODEC_ChipID>

	Start_SAI_Audio();
 800097c:	f7ff ff98 	bl	80008b0 <Start_SAI_Audio>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000980:	2120      	movs	r1, #32
 8000982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000986:	f001 faf7 	bl	8001f78 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800098a:	2064      	movs	r0, #100	@ 0x64
 800098c:	f000 fd86 	bl	800149c <HAL_Delay>
		printf("Test printf\r\n");
 8000990:	4808      	ldr	r0, [pc, #32]	@ (80009b4 <main+0x8c>)
 8000992:	f006 fb37 	bl	8007004 <puts>

		MCP23S17_Chenillard(&mcp23s17, 200);
 8000996:	21c8      	movs	r1, #200	@ 0xc8
 8000998:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <main+0x80>)
 800099a:	f000 f90e 	bl	8000bba <MCP23S17_Chenillard>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800099e:	bf00      	nop
 80009a0:	e7ee      	b.n	8000980 <main+0x58>
 80009a2:	bf00      	nop
 80009a4:	200010e4 	.word	0x200010e4
 80009a8:	200000d8 	.word	0x200000d8
 80009ac:	20001280 	.word	0x20001280
 80009b0:	48000400 	.word	0x48000400
 80009b4:	08007d80 	.word	0x08007d80

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b096      	sub	sp, #88	@ 0x58
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2244      	movs	r2, #68	@ 0x44
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f006 fbfc 	bl	80071c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009de:	f001 ffaf 	bl	8002940 <HAL_PWREx_ControlVoltageScaling>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e8:	f000 f861 	bl	8000aae <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f6:	2310      	movs	r3, #16
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	2302      	movs	r3, #2
 80009fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fe:	2302      	movs	r3, #2
 8000a00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a06:	230a      	movs	r3, #10
 8000a08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 ffe6 	bl	80029ec <HAL_RCC_OscConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a26:	f000 f842 	bl	8000aae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2104      	movs	r1, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fbae 	bl	80031a4 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a4e:	f000 f82e 	bl	8000aae <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3758      	adds	r7, #88	@ 0x58
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b0a2      	sub	sp, #136	@ 0x88
 8000a5e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2288      	movs	r2, #136	@ 0x88
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f006 fbac 	bl	80071c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a70:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a76:	2302      	movs	r3, #2
 8000a78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000a7e:	230d      	movs	r3, #13
 8000a80:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000a82:	2311      	movs	r3, #17
 8000a84:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000a8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a92:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 fda8 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000aa2:	f000 f804 	bl	8000aae <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3788      	adds	r7, #136	@ 0x88
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab2:	b672      	cpsid	i
}
 8000ab4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ab6:	bf00      	nop
 8000ab8:	e7fd      	b.n	8000ab6 <Error_Handler+0x8>

08000aba <MCP23S17_WriteRegister>:
#include <string.h>
#include <stdlib.h>
#include "stdio.h"

// Écriture d'un registre du MCP23S17
static void MCP23S17_WriteRegister(MCP23S17_HandleTypeDef *dev, uint8_t reg, uint8_t value) {
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	70fb      	strb	r3, [r7, #3]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	70bb      	strb	r3, [r7, #2]
	uint8_t data[3] = {MCP23S17_OPCODE_WRITE, reg, value};
 8000aca:	2340      	movs	r3, #64	@ 0x40
 8000acc:	733b      	strb	r3, [r7, #12]
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	737b      	strb	r3, [r7, #13]
 8000ad2:	78bb      	ldrb	r3, [r7, #2]
 8000ad4:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_RESET);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6858      	ldr	r0, [r3, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	891b      	ldrh	r3, [r3, #8]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f001 fa31 	bl	8001f48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspi, data, 3, HAL_MAX_DELAY);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	f107 010c 	add.w	r1, r7, #12
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	2203      	movs	r2, #3
 8000af4:	f005 f8d5 	bl	8005ca2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_SET);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6858      	ldr	r0, [r3, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	891b      	ldrh	r3, [r3, #8]
 8000b00:	2201      	movs	r2, #1
 8000b02:	4619      	mov	r1, r3
 8000b04:	f001 fa20 	bl	8001f48 <HAL_GPIO_WritePin>
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <MCP23S17_Init>:

// Initialisation du MCP23S17
void MCP23S17_Init(MCP23S17_HandleTypeDef *dev) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	MCP23S17_WriteRegister(dev, MCP23S17_IODIRA, 0x00);  // GPA en sortie
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ffcc 	bl	8000aba <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(dev, MCP23S17_IODIRB, 0x00);  // GPB en sortie
 8000b22:	2200      	movs	r2, #0
 8000b24:	2101      	movs	r1, #1
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffc7 	bl	8000aba <MCP23S17_WriteRegister>
	MCP23S17_ClearAllLEDs(dev);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 f832 	bl	8000b96 <MCP23S17_ClearAllLEDs>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <MCP23S17_SetLED>:

void MCP23S17_SetLED(MCP23S17_HandleTypeDef *dev, uint8_t gpio, uint8_t led) {
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	460b      	mov	r3, r1
 8000b44:	70fb      	strb	r3, [r7, #3]
 8000b46:	4613      	mov	r3, r2
 8000b48:	70bb      	strb	r3, [r7, #2]
	// Éteindre toutes les LEDs du port en cours
	if (gpio == 0) {
 8000b4a:	78fb      	ldrb	r3, [r7, #3]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10f      	bne.n	8000b70 <MCP23S17_SetLED+0x36>
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, (1 << led));  // Allume une seule LED sur GPA
 8000b50:	78bb      	ldrb	r3, [r7, #2]
 8000b52:	2201      	movs	r2, #1
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2112      	movs	r1, #18
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffab 	bl	8000aba <MCP23S17_WriteRegister>
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, 0x00);        // Éteint toutes les LEDs sur GPB
 8000b64:	2200      	movs	r2, #0
 8000b66:	2113      	movs	r1, #19
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ffa6 	bl	8000aba <MCP23S17_WriteRegister>
	} else {
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, (1 << led));  // Allume une seule LED sur GPB
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, 0x00);        // Éteint toutes les LEDs sur GPA
	}
}
 8000b6e:	e00e      	b.n	8000b8e <MCP23S17_SetLED+0x54>
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, (1 << led));  // Allume une seule LED sur GPB
 8000b70:	78bb      	ldrb	r3, [r7, #2]
 8000b72:	2201      	movs	r2, #1
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	2113      	movs	r1, #19
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff9b 	bl	8000aba <MCP23S17_WriteRegister>
		MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, 0x00);        // Éteint toutes les LEDs sur GPA
 8000b84:	2200      	movs	r2, #0
 8000b86:	2112      	movs	r1, #18
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff96 	bl	8000aba <MCP23S17_WriteRegister>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <MCP23S17_ClearAllLEDs>:

// Éteindre toutes les LEDs
void MCP23S17_ClearAllLEDs(MCP23S17_HandleTypeDef *dev) {
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, 0x00);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2112      	movs	r1, #18
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ff89 	bl	8000aba <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, 0x00);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2113      	movs	r1, #19
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff84 	bl	8000aba <MCP23S17_WriteRegister>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <MCP23S17_Chenillard>:

void MCP23S17_Chenillard(MCP23S17_HandleTypeDef *dev, uint8_t delay_ms) {
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	70fb      	strb	r3, [r7, #3]
	uint8_t step = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]
	uint8_t gpio = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73bb      	strb	r3, [r7, #14]

	while (1) {
		MCP23S17_ClearAllLEDs(dev);  // Éteindre toutes les LEDs avant d'en allumer une
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffe1 	bl	8000b96 <MCP23S17_ClearAllLEDs>

		MCP23S17_SetLED(dev, gpio, step);
 8000bd4:	7bfa      	ldrb	r2, [r7, #15]
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffad 	bl	8000b3a <MCP23S17_SetLED>
		HAL_Delay(delay_ms);
 8000be0:	78fb      	ldrb	r3, [r7, #3]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fc5a 	bl	800149c <HAL_Delay>

		if (gpio == 0) {
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d10a      	bne.n	8000c04 <MCP23S17_Chenillard+0x4a>
			step++;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
			if (step > 7) {
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	d9e9      	bls.n	8000bce <MCP23S17_Chenillard+0x14>
				step = 7;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	73fb      	strb	r3, [r7, #15]
				gpio = 1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73bb      	strb	r3, [r7, #14]
 8000c02:	e7e4      	b.n	8000bce <MCP23S17_Chenillard+0x14>
			}
		} else {
			if (step == 0) {
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <MCP23S17_Chenillard+0x56>
				gpio = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73bb      	strb	r3, [r7, #14]
 8000c0e:	e7de      	b.n	8000bce <MCP23S17_Chenillard+0x14>
			} else {
				step--;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
		MCP23S17_ClearAllLEDs(dev);  // Éteindre toutes les LEDs avant d'en allumer une
 8000c16:	e7da      	b.n	8000bce <MCP23S17_Chenillard+0x14>

08000c18 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000ccc <MX_SAI2_Init+0xb4>)
 8000c20:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c22:	4b29      	ldr	r3, [pc, #164]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c28:	4b27      	ldr	r3, [pc, #156]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c2e:	4b26      	ldr	r3, [pc, #152]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c34:	4b24      	ldr	r3, [pc, #144]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000c40:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c42:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000c46:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000c60:	2302      	movs	r3, #2
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	4818      	ldr	r0, [pc, #96]	@ (8000cc8 <MX_SAI2_Init+0xb0>)
 8000c68:	f003 ffda 	bl	8004c20 <HAL_SAI_InitProtocol>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000c72:	f7ff ff1c 	bl	8000aae <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_SAI2_Init+0xb8>)
 8000c78:	4a16      	ldr	r2, [pc, #88]	@ (8000cd4 <MX_SAI2_Init+0xbc>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_SAI2_Init+0xb8>)
 8000c7e:	2203      	movs	r2, #3
 8000c80:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_SAI2_Init+0xb8>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_SAI2_Init+0xb8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <MX_SAI2_Init+0xb8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_SAI2_Init+0xb8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <MX_SAI2_Init+0xb8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_SAI2_Init+0xb8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <MX_SAI2_Init+0xb8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000cac:	2302      	movs	r3, #2
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <MX_SAI2_Init+0xb8>)
 8000cb4:	f003 ffb4 	bl	8004c20 <HAL_SAI_InitProtocol>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000cbe:	f7ff fef6 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200010e4 	.word	0x200010e4
 8000ccc:	40015804 	.word	0x40015804
 8000cd0:	20001168 	.word	0x20001168
 8000cd4:	40015824 	.word	0x40015824

08000cd8 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a64      	ldr	r2, [pc, #400]	@ (8000e78 <HAL_SAI_MspInit+0x1a0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d15e      	bne.n	8000da8 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000cea:	4b64      	ldr	r3, [pc, #400]	@ (8000e7c <HAL_SAI_MspInit+0x1a4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d113      	bne.n	8000d1a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000cf2:	4b63      	ldr	r3, [pc, #396]	@ (8000e80 <HAL_SAI_MspInit+0x1a8>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf6:	4a62      	ldr	r2, [pc, #392]	@ (8000e80 <HAL_SAI_MspInit+0x1a8>)
 8000cf8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cfe:	4b60      	ldr	r3, [pc, #384]	@ (8000e80 <HAL_SAI_MspInit+0x1a8>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	204b      	movs	r0, #75	@ 0x4b
 8000d10:	f000 fcc3 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000d14:	204b      	movs	r0, #75	@ 0x4b
 8000d16:	f000 fcdc 	bl	80016d2 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000d1a:	4b58      	ldr	r3, [pc, #352]	@ (8000e7c <HAL_SAI_MspInit+0x1a4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a56      	ldr	r2, [pc, #344]	@ (8000e7c <HAL_SAI_MspInit+0x1a4>)
 8000d22:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d24:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d36:	230d      	movs	r3, #13
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4850      	ldr	r0, [pc, #320]	@ (8000e84 <HAL_SAI_MspInit+0x1ac>)
 8000d42:	f000 ff57 	bl	8001bf4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000d46:	4b50      	ldr	r3, [pc, #320]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d48:	4a50      	ldr	r2, [pc, #320]	@ (8000e8c <HAL_SAI_MspInit+0x1b4>)
 8000d4a:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000d4c:	4b4e      	ldr	r3, [pc, #312]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d52:	4b4d      	ldr	r3, [pc, #308]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d54:	2210      	movs	r2, #16
 8000d56:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d58:	4b4b      	ldr	r3, [pc, #300]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d60:	2280      	movs	r2, #128	@ 0x80
 8000d62:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d64:	4b48      	ldr	r3, [pc, #288]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d6a:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d6c:	4b46      	ldr	r3, [pc, #280]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d72:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000d74:	4b44      	ldr	r3, [pc, #272]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d76:	2220      	movs	r2, #32
 8000d78:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000d7a:	4b43      	ldr	r3, [pc, #268]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000d80:	4841      	ldr	r0, [pc, #260]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d82:	f000 fcc1 	bl	8001708 <HAL_DMA_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000d8c:	f7ff fe8f 	bl	8000aae <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a3d      	ldr	r2, [pc, #244]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d94:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d96:	4a3c      	ldr	r2, [pc, #240]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a3a      	ldr	r2, [pc, #232]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000da0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000da2:	4a39      	ldr	r2, [pc, #228]	@ (8000e88 <HAL_SAI_MspInit+0x1b0>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a38      	ldr	r2, [pc, #224]	@ (8000e90 <HAL_SAI_MspInit+0x1b8>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d15e      	bne.n	8000e70 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000db2:	4b32      	ldr	r3, [pc, #200]	@ (8000e7c <HAL_SAI_MspInit+0x1a4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d113      	bne.n	8000de2 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000dba:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <HAL_SAI_MspInit+0x1a8>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dbe:	4a30      	ldr	r2, [pc, #192]	@ (8000e80 <HAL_SAI_MspInit+0x1a8>)
 8000dc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e80 <HAL_SAI_MspInit+0x1a8>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	204b      	movs	r0, #75	@ 0x4b
 8000dd8:	f000 fc5f 	bl	800169a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000ddc:	204b      	movs	r0, #75	@ 0x4b
 8000dde:	f000 fc78 	bl	80016d2 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000de2:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <HAL_SAI_MspInit+0x1a4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a24      	ldr	r2, [pc, #144]	@ (8000e7c <HAL_SAI_MspInit+0x1a4>)
 8000dea:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000dfe:	230d      	movs	r3, #13
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4822      	ldr	r0, [pc, #136]	@ (8000e94 <HAL_SAI_MspInit+0x1bc>)
 8000e0a:	f000 fef3 	bl	8001bf4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000e0e:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e10:	4a22      	ldr	r2, [pc, #136]	@ (8000e9c <HAL_SAI_MspInit+0x1c4>)
 8000e12:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000e14:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e28:	2280      	movs	r2, #128	@ 0x80
 8000e2a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e32:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e34:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e3a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e3e:	2220      	movs	r2, #32
 8000e40:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000e48:	4813      	ldr	r0, [pc, #76]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e4a:	f000 fc5d 	bl	8001708 <HAL_DMA_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000e54:	f7ff fe2b 	bl	8000aae <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e5c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a0c      	ldr	r2, [pc, #48]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e68:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <HAL_SAI_MspInit+0x1c0>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	@ 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40015804 	.word	0x40015804
 8000e7c:	2000127c 	.word	0x2000127c
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000400 	.word	0x48000400
 8000e88:	200011ec 	.word	0x200011ec
 8000e8c:	4002006c 	.word	0x4002006c
 8000e90:	40015824 	.word	0x40015824
 8000e94:	48000800 	.word	0x48000800
 8000e98:	20001234 	.word	0x20001234
 8000e9c:	40020080 	.word	0x40020080

08000ea0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <MX_SPI3_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000eac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000eb0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000eb2:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000eba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ebe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ed2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000eee:	2207      	movs	r2, #7
 8000ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000efa:	2208      	movs	r2, #8
 8000efc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_SPI3_Init+0x74>)
 8000f00:	f004 fe2c 	bl	8005b5c <HAL_SPI_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f7ff fdd0 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20001280 	.word	0x20001280
 8000f18:	40003c00 	.word	0x40003c00

08000f1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a25      	ldr	r2, [pc, #148]	@ (8000fd0 <HAL_SPI_MspInit+0xb4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d144      	bne.n	8000fc8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f3e:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <HAL_SPI_MspInit+0xb8>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f42:	4a24      	ldr	r2, [pc, #144]	@ (8000fd4 <HAL_SPI_MspInit+0xb8>)
 8000f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <HAL_SPI_MspInit+0xb8>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <HAL_SPI_MspInit+0xb8>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd4 <HAL_SPI_MspInit+0xb8>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <HAL_SPI_MspInit+0xb8>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_SPI_MspInit+0xb8>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <HAL_SPI_MspInit+0xb8>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <HAL_SPI_MspInit+0xb8>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	@ (8000fd8 <HAL_SPI_MspInit+0xbc>)
 8000fa4:	f000 fe26 	bl	8001bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa8:	2320      	movs	r3, #32
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <HAL_SPI_MspInit+0xc0>)
 8000fc4:	f000 fe16 	bl	8001bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	@ 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40003c00 	.word	0x40003c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000800 	.word	0x48000800
 8000fdc:	48000400 	.word	0x48000400

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_MspInit+0x44>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fea:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <HAL_MspInit+0x44>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_MspInit+0x44>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_MspInit+0x44>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_MspInit+0x44>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	6593      	str	r3, [r2, #88]	@ 0x58
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_MspInit+0x44>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <NMI_Handler+0x4>

08001030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <MemManage_Handler+0x4>

08001040 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <UsageFault_Handler+0x4>

08001050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107e:	f000 f9ed 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <DMA1_Channel6_IRQHandler+0x10>)
 800108e:	f000 fcd2 	bl	8001a36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200011ec 	.word	0x200011ec

0800109c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <DMA1_Channel7_IRQHandler+0x10>)
 80010a2:	f000 fcc8 	bl	8001a36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20001234 	.word	0x20001234

080010b0 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <SAI2_IRQHandler+0x14>)
 80010b6:	f004 f8fb 	bl	80052b0 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80010ba:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <SAI2_IRQHandler+0x18>)
 80010bc:	f004 f8f8 	bl	80052b0 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200010e4 	.word	0x200010e4
 80010c8:	20001168 	.word	0x20001168

080010cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e00a      	b.n	80010f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010de:	f3af 8000 	nop.w
 80010e2:	4601      	mov	r1, r0
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	b2ca      	uxtb	r2, r1
 80010ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf0      	blt.n	80010de <_read+0x12>
  }

  return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e009      	b.n	800112c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fb81 	bl	8000828 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf1      	blt.n	8001118 <_write+0x12>
  }
  return len;
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_close>:

int _close(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001166:	605a      	str	r2, [r3, #4]
  return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <_isatty>:

int _isatty(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f006 f842 	bl	8007260 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20018000 	.word	0x20018000
 8001208:	00000400 	.word	0x00000400
 800120c:	200012e4 	.word	0x200012e4
 8001210:	200014c0 	.word	0x200014c0

08001214 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	@ (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 800123e:	4a15      	ldr	r2, [pc, #84]	@ (8001294 <MX_USART2_UART_Init+0x5c>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_USART2_UART_Init+0x58>)
 800127c:	f004 ffec 	bl	8006258 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001286:	f7ff fc12 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200012e8 	.word	0x200012e8
 8001294:	40004400 	.word	0x40004400

08001298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0ac      	sub	sp, #176	@ 0xb0
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2288      	movs	r2, #136	@ 0x88
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f005 ff83 	bl	80071c4 <memset>
  if(uartHandle->Instance==USART2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a21      	ldr	r2, [pc, #132]	@ (8001348 <HAL_UART_MspInit+0xb0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d13b      	bne.n	8001340 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 f989 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012e0:	f7ff fbe5 	bl	8000aae <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e4:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_UART_MspInit+0xb4>)
 80012e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e8:	4a18      	ldr	r2, [pc, #96]	@ (800134c <HAL_UART_MspInit+0xb4>)
 80012ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <HAL_UART_MspInit+0xb4>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <HAL_UART_MspInit+0xb4>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001300:	4a12      	ldr	r2, [pc, #72]	@ (800134c <HAL_UART_MspInit+0xb4>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001308:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HAL_UART_MspInit+0xb4>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001314:	230c      	movs	r3, #12
 8001316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800132c:	2307      	movs	r3, #7
 800132e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133c:	f000 fc5a 	bl	8001bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001340:	bf00      	nop
 8001342:	37b0      	adds	r7, #176	@ 0xb0
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40004400 	.word	0x40004400
 800134c:	40021000 	.word	0x40021000

08001350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001388 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001354:	f7ff ff5e 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	@ (800138c <LoopForever+0x6>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	@ (8001390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <LoopForever+0xe>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	@ (800139c <LoopForever+0x16>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f005 ff75 	bl	800726c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001382:	f7ff fad1 	bl	8000928 <main>

08001386 <LoopForever>:

LoopForever:
    b LoopForever
 8001386:	e7fe      	b.n	8001386 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001388:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001394:	08007e1c 	.word	0x08007e1c
  ldr r2, =_sbss
 8001398:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800139c:	200014c0 	.word	0x200014c0

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <HAL_Init+0x3c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <HAL_Init+0x3c>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 f962 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 f80f 	bl	80013e4 <HAL_InitTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	e001      	b.n	80013d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d2:	f7ff fe05 	bl	8000fe0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013f0:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <HAL_InitTick+0x6c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d023      	beq.n	8001440 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_InitTick+0x70>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_InitTick+0x6c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f96d 	bl	80016ee <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10f      	bne.n	800143a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d809      	bhi.n	8001434 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f937 	bl	800169a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142c:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <HAL_InitTick+0x74>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e007      	b.n	8001444 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e004      	b.n	8001444 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e001      	b.n	8001444 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	20001370 	.word	0x20001370

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20001370 	.word	0x20001370

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	@ (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	@ (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e098      	b.n	800184c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	4b4d      	ldr	r3, [pc, #308]	@ (8001858 <HAL_DMA_Init+0x150>)
 8001722:	429a      	cmp	r2, r3
 8001724:	d80f      	bhi.n	8001746 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b4b      	ldr	r3, [pc, #300]	@ (800185c <HAL_DMA_Init+0x154>)
 800172e:	4413      	add	r3, r2
 8001730:	4a4b      	ldr	r2, [pc, #300]	@ (8001860 <HAL_DMA_Init+0x158>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	009a      	lsls	r2, r3, #2
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a48      	ldr	r2, [pc, #288]	@ (8001864 <HAL_DMA_Init+0x15c>)
 8001742:	641a      	str	r2, [r3, #64]	@ 0x40
 8001744:	e00e      	b.n	8001764 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b46      	ldr	r3, [pc, #280]	@ (8001868 <HAL_DMA_Init+0x160>)
 800174e:	4413      	add	r3, r2
 8001750:	4a43      	ldr	r2, [pc, #268]	@ (8001860 <HAL_DMA_Init+0x158>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	009a      	lsls	r2, r3, #2
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a42      	ldr	r2, [pc, #264]	@ (800186c <HAL_DMA_Init+0x164>)
 8001762:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800177a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800177e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017be:	d039      	beq.n	8001834 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	4a27      	ldr	r2, [pc, #156]	@ (8001864 <HAL_DMA_Init+0x15c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d11a      	bne.n	8001800 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017ca:	4b29      	ldr	r3, [pc, #164]	@ (8001870 <HAL_DMA_Init+0x168>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f003 031c 	and.w	r3, r3, #28
 80017d6:	210f      	movs	r1, #15
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	4924      	ldr	r1, [pc, #144]	@ (8001870 <HAL_DMA_Init+0x168>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <HAL_DMA_Init+0x168>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	f003 031c 	and.w	r3, r3, #28
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	491d      	ldr	r1, [pc, #116]	@ (8001870 <HAL_DMA_Init+0x168>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
 80017fe:	e019      	b.n	8001834 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_DMA_Init+0x16c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	f003 031c 	and.w	r3, r3, #28
 800180c:	210f      	movs	r1, #15
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	4917      	ldr	r1, [pc, #92]	@ (8001874 <HAL_DMA_Init+0x16c>)
 8001816:	4013      	ands	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_DMA_Init+0x16c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f003 031c 	and.w	r3, r3, #28
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	4911      	ldr	r1, [pc, #68]	@ (8001874 <HAL_DMA_Init+0x16c>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40020407 	.word	0x40020407
 800185c:	bffdfff8 	.word	0xbffdfff8
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	40020000 	.word	0x40020000
 8001868:	bffdfbf8 	.word	0xbffdfbf8
 800186c:	40020400 	.word	0x40020400
 8001870:	400200a8 	.word	0x400200a8
 8001874:	400204a8 	.word	0x400204a8

08001878 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_DMA_Start_IT+0x20>
 8001894:	2302      	movs	r3, #2
 8001896:	e04b      	b.n	8001930 <HAL_DMA_Start_IT+0xb8>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d13a      	bne.n	8001922 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f95f 	bl	8001b94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 020e 	orr.w	r2, r2, #14
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e00f      	b.n	8001910 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0204 	bic.w	r2, r2, #4
 80018fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 020a 	orr.w	r2, r2, #10
 800190e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e005      	b.n	800192e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800192a:	2302      	movs	r3, #2
 800192c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800192e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d008      	beq.n	8001962 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2204      	movs	r2, #4
 8001954:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e022      	b.n	80019a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 020e 	bic.w	r2, r2, #14
 8001970:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f003 021c 	and.w	r2, r3, #28
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d005      	beq.n	80019d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2204      	movs	r2, #4
 80019d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	e029      	b.n	8001a2c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 020e 	bic.w	r2, r2, #14
 80019e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fc:	f003 021c 	and.w	r2, r3, #28
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	2101      	movs	r1, #1
 8001a06:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
    }
  }
  return status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	f003 031c 	and.w	r3, r3, #28
 8001a56:	2204      	movs	r2, #4
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d026      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x7a>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d021      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0204 	bic.w	r2, r2, #4
 8001a88:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f003 021c 	and.w	r2, r3, #28
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	2104      	movs	r1, #4
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d071      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001aae:	e06c      	b.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	f003 031c 	and.w	r3, r3, #28
 8001ab8:	2202      	movs	r2, #2
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d02e      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xec>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d029      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10b      	bne.n	8001af4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020a 	bic.w	r2, r2, #10
 8001aea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af8:	f003 021c 	and.w	r2, r3, #28
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	2102      	movs	r1, #2
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d038      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b20:	e033      	b.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f003 031c 	and.w	r3, r3, #28
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d02a      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x156>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d025      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 020e 	bic.w	r2, r2, #14
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b54:	f003 021c 	and.w	r2, r3, #28
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
}
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f003 021c 	and.w	r2, r3, #28
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d108      	bne.n	8001bd8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bd6:	e007      	b.n	8001be8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	e17f      	b.n	8001f04 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8171 	beq.w	8001efe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d005      	beq.n	8001c34 <HAL_GPIO_Init+0x40>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d130      	bne.n	8001c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 0201 	and.w	r2, r3, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d118      	bne.n	8001cd4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	f003 0201 	and.w	r2, r3, #1
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d017      	beq.n	8001d10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d123      	bne.n	8001d64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	08da      	lsrs	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3208      	adds	r2, #8
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	6939      	ldr	r1, [r7, #16]
 8001d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0203 	and.w	r2, r3, #3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80ac 	beq.w	8001efe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f24 <HAL_GPIO_Init+0x330>)
 8001da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001daa:	4a5e      	ldr	r2, [pc, #376]	@ (8001f24 <HAL_GPIO_Init+0x330>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001db2:	4b5c      	ldr	r3, [pc, #368]	@ (8001f24 <HAL_GPIO_Init+0x330>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001de8:	d025      	beq.n	8001e36 <HAL_GPIO_Init+0x242>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <HAL_GPIO_Init+0x338>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <HAL_GPIO_Init+0x23e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f30 <HAL_GPIO_Init+0x33c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x23a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f34 <HAL_GPIO_Init+0x340>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x236>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	@ (8001f38 <HAL_GPIO_Init+0x344>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x232>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f3c <HAL_GPIO_Init+0x348>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x22e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4a      	ldr	r2, [pc, #296]	@ (8001f40 <HAL_GPIO_Init+0x34c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x22a>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00c      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e36:	2300      	movs	r3, #0
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e48:	4937      	ldr	r1, [pc, #220]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e56:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e7a:	4a32      	ldr	r2, [pc, #200]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e80:	4b30      	ldr	r3, [pc, #192]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea4:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ece:	4a1d      	ldr	r2, [pc, #116]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ef8:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f47f ae78 	bne.w	8001c04 <HAL_GPIO_Init+0x10>
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	48000400 	.word	0x48000400
 8001f30:	48000800 	.word	0x48000800
 8001f34:	48000c00 	.word	0x48000c00
 8001f38:	48001000 	.word	0x48001000
 8001f3c:	48001400 	.word	0x48001400
 8001f40:	48001800 	.word	0x48001800
 8001f44:	40010400 	.word	0x40010400

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	041a      	lsls	r2, r3, #16
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43d9      	mvns	r1, r3
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	400b      	ands	r3, r1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e08d      	b.n	80020da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fbca 	bl	800076c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2224      	movs	r2, #36	@ 0x24
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ffc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800200c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e006      	b.n	8002034 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002032:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d108      	bne.n	800204e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	e007      	b.n	800205e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800205c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800206c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002070:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002080:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69d9      	ldr	r1, [r3, #28]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1a      	ldr	r2, [r3, #32]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	817b      	strh	r3, [r7, #10]
 80020f6:	460b      	mov	r3, r1
 80020f8:	813b      	strh	r3, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b20      	cmp	r3, #32
 8002108:	f040 80fd 	bne.w	8002306 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_I2C_Mem_Read+0x34>
 8002112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0f1      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Mem_Read+0x4e>
 800212e:	2302      	movs	r3, #2
 8002130:	e0ea      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800213a:	f7ff f9a3 	bl	8001484 <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2319      	movs	r3, #25
 8002146:	2201      	movs	r2, #1
 8002148:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f95b 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d5      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2222      	movs	r2, #34	@ 0x22
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2240      	movs	r2, #64	@ 0x40
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a3a      	ldr	r2, [r7, #32]
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800217c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002184:	88f8      	ldrh	r0, [r7, #6]
 8002186:	893a      	ldrh	r2, [r7, #8]
 8002188:	8979      	ldrh	r1, [r7, #10]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	4603      	mov	r3, r0
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f8bf 	bl	8002318 <I2C_RequestMemoryRead>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0ad      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2bff      	cmp	r3, #255	@ 0xff
 80021b4:	d90e      	bls.n	80021d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	8979      	ldrh	r1, [r7, #10]
 80021c4:	4b52      	ldr	r3, [pc, #328]	@ (8002310 <HAL_I2C_Mem_Read+0x22c>)
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fadf 	bl	8002790 <I2C_TransferConfig>
 80021d2:	e00f      	b.n	80021f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002310 <HAL_I2C_Mem_Read+0x22c>)
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 face 	bl	8002790 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fa:	2200      	movs	r2, #0
 80021fc:	2104      	movs	r1, #4
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f902 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07c      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d034      	beq.n	80022b4 <HAL_I2C_Mem_Read+0x1d0>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224e:	2b00      	cmp	r3, #0
 8002250:	d130      	bne.n	80022b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002258:	2200      	movs	r2, #0
 800225a:	2180      	movs	r1, #128	@ 0x80
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f8d3 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e04d      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	2bff      	cmp	r3, #255	@ 0xff
 8002274:	d90e      	bls.n	8002294 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002280:	b2da      	uxtb	r2, r3
 8002282:	8979      	ldrh	r1, [r7, #10]
 8002284:	2300      	movs	r3, #0
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 fa7f 	bl	8002790 <I2C_TransferConfig>
 8002292:	e00f      	b.n	80022b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	8979      	ldrh	r1, [r7, #10]
 80022a6:	2300      	movs	r3, #0
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fa6e 	bl	8002790 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d19a      	bne.n	80021f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f940 	bl	8002548 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e01a      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2220      	movs	r2, #32
 80022d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_I2C_Mem_Read+0x230>)
 80022e6:	400b      	ands	r3, r1
 80022e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	80002400 	.word	0x80002400
 8002314:	fe00e800 	.word	0xfe00e800

08002318 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4603      	mov	r3, r0
 8002328:	817b      	strh	r3, [r7, #10]
 800232a:	460b      	mov	r3, r1
 800232c:	813b      	strh	r3, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	8979      	ldrh	r1, [r7, #10]
 8002338:	4b20      	ldr	r3, [pc, #128]	@ (80023bc <I2C_RequestMemoryRead+0xa4>)
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2300      	movs	r3, #0
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fa26 	bl	8002790 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f8b6 	bl	80024ba <I2C_WaitOnTXISFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e02c      	b.n	80023b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d105      	bne.n	800236a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800235e:	893b      	ldrh	r3, [r7, #8]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
 8002368:	e015      	b.n	8002396 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800236a:	893b      	ldrh	r3, [r7, #8]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	b29b      	uxth	r3, r3
 8002370:	b2da      	uxtb	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	69b9      	ldr	r1, [r7, #24]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f89c 	bl	80024ba <I2C_WaitOnTXISFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e012      	b.n	80023b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800238c:	893b      	ldrh	r3, [r7, #8]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2200      	movs	r2, #0
 800239e:	2140      	movs	r1, #64	@ 0x40
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f831 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	80002000 	.word	0x80002000

080023c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d103      	bne.n	80023de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d007      	beq.n	80023fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	619a      	str	r2, [r3, #24]
  }
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002418:	e03b      	b.n	8002492 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	6839      	ldr	r1, [r7, #0]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f8d6 	bl	80025d0 <I2C_IsErrorOccurred>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e041      	b.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d02d      	beq.n	8002492 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002436:	f7ff f825 	bl	8001484 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d302      	bcc.n	800244c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d122      	bne.n	8002492 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	429a      	cmp	r2, r3
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	429a      	cmp	r2, r3
 8002468:	d113      	bne.n	8002492 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	f043 0220 	orr.w	r2, r3, #32
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00f      	b.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4013      	ands	r3, r2
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	429a      	cmp	r2, r3
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d0b4      	beq.n	800241a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024c6:	e033      	b.n	8002530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f87f 	bl	80025d0 <I2C_IsErrorOccurred>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e031      	b.n	8002540 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e2:	d025      	beq.n	8002530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e4:	f7fe ffce 	bl	8001484 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d302      	bcc.n	80024fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d11a      	bne.n	8002530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b02      	cmp	r3, #2
 8002506:	d013      	beq.n	8002530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250c:	f043 0220 	orr.w	r2, r3, #32
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e007      	b.n	8002540 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d1c4      	bne.n	80024c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002554:	e02f      	b.n	80025b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f838 	bl	80025d0 <I2C_IsErrorOccurred>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e02d      	b.n	80025c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256a:	f7fe ff8b 	bl	8001484 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	429a      	cmp	r2, r3
 8002578:	d302      	bcc.n	8002580 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d11a      	bne.n	80025b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b20      	cmp	r3, #32
 800258c:	d013      	beq.n	80025b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f043 0220 	orr.w	r2, r3, #32
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e007      	b.n	80025c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d1c8      	bne.n	8002556 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	@ 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d068      	beq.n	80026ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2210      	movs	r2, #16
 8002602:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002604:	e049      	b.n	800269a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d045      	beq.n	800269a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7fe ff39 	bl	8001484 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_IsErrorOccurred+0x54>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d13a      	bne.n	800269a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002636:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002646:	d121      	bne.n	800268c <I2C_IsErrorOccurred+0xbc>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800264e:	d01d      	beq.n	800268c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b20      	cmp	r3, #32
 8002654:	d01a      	beq.n	800268c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002664:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002666:	f7fe ff0d 	bl	8001484 <HAL_GetTick>
 800266a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800266c:	e00e      	b.n	800268c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800266e:	f7fe ff09 	bl	8001484 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b19      	cmp	r3, #25
 800267a:	d907      	bls.n	800268c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f043 0320 	orr.w	r3, r3, #32
 8002682:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800268a:	e006      	b.n	800269a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b20      	cmp	r3, #32
 8002698:	d1e9      	bne.n	800266e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d003      	beq.n	80026b0 <I2C_IsErrorOccurred+0xe0>
 80026a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0aa      	beq.n	8002606 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2220      	movs	r2, #32
 80026be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002712:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f043 0302 	orr.w	r3, r3, #2
 800272a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800273c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01c      	beq.n	800277e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff fe3b 	bl	80023c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <I2C_IsErrorOccurred+0x1bc>)
 8002756:	400b      	ands	r3, r1
 8002758:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	431a      	orrs	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800277e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002782:	4618      	mov	r0, r3
 8002784:	3728      	adds	r7, #40	@ 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	fe00e800 	.word	0xfe00e800

08002790 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	817b      	strh	r3, [r7, #10]
 800279e:	4613      	mov	r3, r2
 80027a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027a8:	7a7b      	ldrb	r3, [r7, #9]
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	0d5b      	lsrs	r3, r3, #21
 80027ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80027ce:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <I2C_TransferConfig+0x60>)
 80027d0:	430b      	orrs	r3, r1
 80027d2:	43db      	mvns	r3, r3
 80027d4:	ea02 0103 	and.w	r1, r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	03ff63ff 	.word	0x03ff63ff

080027f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	d138      	bne.n	800287c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002814:	2302      	movs	r3, #2
 8002816:	e032      	b.n	800287e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	@ 0x24
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
  }
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b20      	cmp	r3, #32
 800289e:	d139      	bne.n	8002914 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e033      	b.n	8002916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2224      	movs	r2, #36	@ 0x24
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <HAL_PWREx_GetVoltageRange+0x18>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40007000 	.word	0x40007000

08002940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800294e:	d130      	bne.n	80029b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002950:	4b23      	ldr	r3, [pc, #140]	@ (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800295c:	d038      	beq.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800295e:	4b20      	ldr	r3, [pc, #128]	@ (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002966:	4a1e      	ldr	r2, [pc, #120]	@ (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002968:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800296c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800296e:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2232      	movs	r2, #50	@ 0x32
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	4a1b      	ldr	r2, [pc, #108]	@ (80029e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	0c9b      	lsrs	r3, r3, #18
 8002980:	3301      	adds	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002984:	e002      	b.n	800298c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3b01      	subs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800298c:	4b14      	ldr	r3, [pc, #80]	@ (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002998:	d102      	bne.n	80029a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f2      	bne.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a0:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ac:	d110      	bne.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e00f      	b.n	80029d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029b2:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029be:	d007      	beq.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029c0:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029c8:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40007000 	.word	0x40007000
 80029e4:	20000000 	.word	0x20000000
 80029e8:	431bde83 	.word	0x431bde83

080029ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e3ca      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fe:	4b97      	ldr	r3, [pc, #604]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a08:	4b94      	ldr	r3, [pc, #592]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80e4 	beq.w	8002be8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_RCC_OscConfig+0x4a>
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	f040 808b 	bne.w	8002b44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	f040 8087 	bne.w	8002b44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a36:	4b89      	ldr	r3, [pc, #548]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_RCC_OscConfig+0x62>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e3a2      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1a      	ldr	r2, [r3, #32]
 8002a52:	4b82      	ldr	r3, [pc, #520]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d004      	beq.n	8002a68 <HAL_RCC_OscConfig+0x7c>
 8002a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a66:	e005      	b.n	8002a74 <HAL_RCC_OscConfig+0x88>
 8002a68:	4b7c      	ldr	r3, [pc, #496]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d223      	bcs.n	8002ac0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fd55 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e383      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8c:	4b73      	ldr	r3, [pc, #460]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a72      	ldr	r2, [pc, #456]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002a92:	f043 0308 	orr.w	r3, r3, #8
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b70      	ldr	r3, [pc, #448]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	496d      	ldr	r1, [pc, #436]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	4968      	ldr	r1, [pc, #416]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
 8002abe:	e025      	b.n	8002b0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac0:	4b66      	ldr	r3, [pc, #408]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a65      	ldr	r2, [pc, #404]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002ac6:	f043 0308 	orr.w	r3, r3, #8
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b63      	ldr	r3, [pc, #396]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4960      	ldr	r1, [pc, #384]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ade:	4b5f      	ldr	r3, [pc, #380]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	495b      	ldr	r1, [pc, #364]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d109      	bne.n	8002b0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fd15 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e343      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b0c:	f000 fc4a 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b52      	ldr	r3, [pc, #328]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	4950      	ldr	r1, [pc, #320]	@ (8002c60 <HAL_RCC_OscConfig+0x274>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	4a4e      	ldr	r2, [pc, #312]	@ (8002c64 <HAL_RCC_OscConfig+0x278>)
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002c68 <HAL_RCC_OscConfig+0x27c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe fc57 	bl	80013e4 <HAL_InitTick>
 8002b36:	4603      	mov	r3, r0
 8002b38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d052      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	e327      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d032      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b4c:	4b43      	ldr	r3, [pc, #268]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a42      	ldr	r2, [pc, #264]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fc94 	bl	8001484 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b60:	f7fe fc90 	bl	8001484 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e310      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b72:	4b3a      	ldr	r3, [pc, #232]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b7e:	4b37      	ldr	r3, [pc, #220]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a36      	ldr	r2, [pc, #216]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b84:	f043 0308 	orr.w	r3, r3, #8
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4931      	ldr	r1, [pc, #196]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	492c      	ldr	r1, [pc, #176]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
 8002bb0:	e01a      	b.n	8002be8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a29      	ldr	r2, [pc, #164]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fc61 	bl	8001484 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fc5d 	bl	8001484 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e2dd      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd8:	4b20      	ldr	r3, [pc, #128]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x1da>
 8002be4:	e000      	b.n	8002be8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002be6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d074      	beq.n	8002cde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d005      	beq.n	8002c06 <HAL_RCC_OscConfig+0x21a>
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	d10e      	bne.n	8002c1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d10b      	bne.n	8002c1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d064      	beq.n	8002cdc <HAL_RCC_OscConfig+0x2f0>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d160      	bne.n	8002cdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e2ba      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x24a>
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	e026      	b.n	8002c84 <HAL_RCC_OscConfig+0x298>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c3e:	d115      	bne.n	8002c6c <HAL_RCC_OscConfig+0x280>
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a05      	ldr	r2, [pc, #20]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002c46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a02      	ldr	r2, [pc, #8]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e014      	b.n	8002c84 <HAL_RCC_OscConfig+0x298>
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	08007d90 	.word	0x08007d90
 8002c64:	20000000 	.word	0x20000000
 8002c68:	20000004 	.word	0x20000004
 8002c6c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a9f      	ldr	r2, [pc, #636]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b9d      	ldr	r3, [pc, #628]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a9c      	ldr	r2, [pc, #624]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fbfa 	bl	8001484 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe fbf6 	bl	8001484 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e276      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca6:	4b92      	ldr	r3, [pc, #584]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2a8>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fbe6 	bl	8001484 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fbe2 	bl	8001484 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	@ 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e262      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cce:	4b88      	ldr	r3, [pc, #544]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2d0>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d060      	beq.n	8002dac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_OscConfig+0x310>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d119      	bne.n	8002d2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d116      	bne.n	8002d2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cfc:	4b7c      	ldr	r3, [pc, #496]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_OscConfig+0x328>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e23f      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4b76      	ldr	r3, [pc, #472]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	4973      	ldr	r1, [pc, #460]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d28:	e040      	b.n	8002dac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d023      	beq.n	8002d7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d32:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fba1 	bl	8001484 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe fb9d 	bl	8001484 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e21d      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d58:	4b65      	ldr	r3, [pc, #404]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b62      	ldr	r3, [pc, #392]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	495f      	ldr	r1, [pc, #380]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	e018      	b.n	8002dac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fb7d 	bl	8001484 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fb79 	bl	8001484 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e1f9      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da0:	4b53      	ldr	r3, [pc, #332]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d03c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01c      	beq.n	8002dfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fb58 	bl	8001484 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fb54 	bl	8001484 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1d4      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dea:	4b41      	ldr	r3, [pc, #260]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ef      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x3ec>
 8002df8:	e01b      	b.n	8002e32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e00:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002e02:	f023 0301 	bic.w	r3, r3, #1
 8002e06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fb3b 	bl	8001484 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e12:	f7fe fb37 	bl	8001484 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e1b7      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e24:	4b32      	ldr	r3, [pc, #200]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1ef      	bne.n	8002e12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80a6 	beq.w	8002f8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e44:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10d      	bne.n	8002e6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e50:	4b27      	ldr	r3, [pc, #156]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	4a26      	ldr	r2, [pc, #152]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6c:	4b21      	ldr	r3, [pc, #132]	@ (8002ef4 <HAL_RCC_OscConfig+0x508>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d118      	bne.n	8002eaa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef4 <HAL_RCC_OscConfig+0x508>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef4 <HAL_RCC_OscConfig+0x508>)
 8002e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e84:	f7fe fafe 	bl	8001484 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8c:	f7fe fafa 	bl	8001484 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e17a      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <HAL_RCC_OscConfig+0x508>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d108      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4d8>
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ec2:	e029      	b.n	8002f18 <HAL_RCC_OscConfig+0x52c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d115      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x50c>
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed2:	4a07      	ldr	r2, [pc, #28]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002ed4:	f043 0304 	orr.w	r3, r3, #4
 8002ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002edc:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee2:	4a03      	ldr	r2, [pc, #12]	@ (8002ef0 <HAL_RCC_OscConfig+0x504>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eec:	e014      	b.n	8002f18 <HAL_RCC_OscConfig+0x52c>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	4b9c      	ldr	r3, [pc, #624]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	4a9b      	ldr	r2, [pc, #620]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f08:	4b98      	ldr	r3, [pc, #608]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0e:	4a97      	ldr	r2, [pc, #604]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d016      	beq.n	8002f4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f20:	f7fe fab0 	bl	8001484 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fe faac 	bl	8001484 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e12a      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3e:	4b8b      	ldr	r3, [pc, #556]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ed      	beq.n	8002f28 <HAL_RCC_OscConfig+0x53c>
 8002f4c:	e015      	b.n	8002f7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe fa99 	bl	8001484 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe fa95 	bl	8001484 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e113      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f6c:	4b7f      	ldr	r3, [pc, #508]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1ed      	bne.n	8002f56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7a:	7ffb      	ldrb	r3, [r7, #31]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f80:	4b7a      	ldr	r3, [pc, #488]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	4a79      	ldr	r2, [pc, #484]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8002f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80fe 	beq.w	8003192 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	f040 80d0 	bne.w	8003140 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fa0:	4b72      	ldr	r3, [pc, #456]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f003 0203 	and.w	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d130      	bne.n	8003016 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d127      	bne.n	8003016 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d11f      	bne.n	8003016 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fe0:	2a07      	cmp	r2, #7
 8002fe2:	bf14      	ite	ne
 8002fe4:	2201      	movne	r2, #1
 8002fe6:	2200      	moveq	r2, #0
 8002fe8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d113      	bne.n	8003016 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d109      	bne.n	8003016 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	3b01      	subs	r3, #1
 8003010:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d06e      	beq.n	80030f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	d069      	beq.n	80030f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800301c:	4b53      	ldr	r3, [pc, #332]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003028:	4b50      	ldr	r3, [pc, #320]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0ad      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003038:	4b4c      	ldr	r3, [pc, #304]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a4b      	ldr	r2, [pc, #300]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 800303e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003042:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003044:	f7fe fa1e 	bl	8001484 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fa1a 	bl	8001484 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e09a      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305e:	4b43      	ldr	r3, [pc, #268]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800306a:	4b40      	ldr	r3, [pc, #256]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	4b40      	ldr	r3, [pc, #256]	@ (8003170 <HAL_RCC_OscConfig+0x784>)
 8003070:	4013      	ands	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800307a:	3a01      	subs	r2, #1
 800307c:	0112      	lsls	r2, r2, #4
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003084:	0212      	lsls	r2, r2, #8
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800308c:	0852      	lsrs	r2, r2, #1
 800308e:	3a01      	subs	r2, #1
 8003090:	0552      	lsls	r2, r2, #21
 8003092:	4311      	orrs	r1, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003098:	0852      	lsrs	r2, r2, #1
 800309a:	3a01      	subs	r2, #1
 800309c:	0652      	lsls	r2, r2, #25
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030a4:	0912      	lsrs	r2, r2, #4
 80030a6:	0452      	lsls	r2, r2, #17
 80030a8:	430a      	orrs	r2, r1
 80030aa:	4930      	ldr	r1, [pc, #192]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030b0:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2d      	ldr	r2, [pc, #180]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 80030b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030bc:	4b2b      	ldr	r3, [pc, #172]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a2a      	ldr	r2, [pc, #168]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 80030c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c8:	f7fe f9dc 	bl	8001484 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe f9d8 	bl	8001484 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e058      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e2:	4b22      	ldr	r3, [pc, #136]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ee:	e050      	b.n	8003192 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e04f      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f4:	4b1d      	ldr	r3, [pc, #116]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d148      	bne.n	8003192 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003100:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8003106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800310a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800310c:	4b17      	ldr	r3, [pc, #92]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4a16      	ldr	r2, [pc, #88]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8003112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003116:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003118:	f7fe f9b4 	bl	8001484 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe f9b0 	bl	8001484 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e030      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x734>
 800313e:	e028      	b.n	8003192 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d023      	beq.n	800318e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a08      	ldr	r2, [pc, #32]	@ (800316c <HAL_RCC_OscConfig+0x780>)
 800314c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7fe f997 	bl	8001484 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003158:	e00c      	b.n	8003174 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315a:	f7fe f993 	bl	8001484 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d905      	bls.n	8003174 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e013      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
 800316c:	40021000 	.word	0x40021000
 8003170:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003174:	4b09      	ldr	r3, [pc, #36]	@ (800319c <HAL_RCC_OscConfig+0x7b0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ec      	bne.n	800315a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003180:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_RCC_OscConfig+0x7b0>)
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	4905      	ldr	r1, [pc, #20]	@ (800319c <HAL_RCC_OscConfig+0x7b0>)
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_RCC_OscConfig+0x7b4>)
 8003188:	4013      	ands	r3, r2
 800318a:	60cb      	str	r3, [r1, #12]
 800318c:	e001      	b.n	8003192 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	feeefffc 	.word	0xfeeefffc

080031a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0e7      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b75      	ldr	r3, [pc, #468]	@ (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d910      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b72      	ldr	r3, [pc, #456]	@ (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4970      	ldr	r1, [pc, #448]	@ (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0cf      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d010      	beq.n	8003216 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	4b66      	ldr	r3, [pc, #408]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003200:	429a      	cmp	r2, r3
 8003202:	d908      	bls.n	8003216 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b63      	ldr	r3, [pc, #396]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4960      	ldr	r1, [pc, #384]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d04c      	beq.n	80032bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b03      	cmp	r3, #3
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322a:	4b5a      	ldr	r3, [pc, #360]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d121      	bne.n	800327a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0a6      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003242:	4b54      	ldr	r3, [pc, #336]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e09a      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800325a:	4b4e      	ldr	r3, [pc, #312]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e08e      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800326a:	4b4a      	ldr	r3, [pc, #296]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e086      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b46      	ldr	r3, [pc, #280]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4943      	ldr	r1, [pc, #268]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328c:	f7fe f8fa 	bl	8001484 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003294:	f7fe f8f6 	bl	8001484 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e06e      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 020c 	and.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1eb      	bne.n	8003294 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d010      	beq.n	80032ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	4b31      	ldr	r3, [pc, #196]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d208      	bcs.n	80032ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	492b      	ldr	r1, [pc, #172]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ea:	4b29      	ldr	r3, [pc, #164]	@ (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d210      	bcs.n	800331a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f8:	4b25      	ldr	r3, [pc, #148]	@ (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 0207 	bic.w	r2, r3, #7
 8003300:	4923      	ldr	r1, [pc, #140]	@ (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003308:	4b21      	ldr	r3, [pc, #132]	@ (8003390 <HAL_RCC_ClockConfig+0x1ec>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d001      	beq.n	800331a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e036      	b.n	8003388 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003326:	4b1b      	ldr	r3, [pc, #108]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	4918      	ldr	r1, [pc, #96]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003344:	4b13      	ldr	r3, [pc, #76]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4910      	ldr	r1, [pc, #64]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003354:	4313      	orrs	r3, r2
 8003356:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003358:	f000 f824 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <HAL_RCC_ClockConfig+0x1f0>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	490b      	ldr	r1, [pc, #44]	@ (8003398 <HAL_RCC_ClockConfig+0x1f4>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	4a09      	ldr	r2, [pc, #36]	@ (800339c <HAL_RCC_ClockConfig+0x1f8>)
 8003376:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003378:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <HAL_RCC_ClockConfig+0x1fc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe f831 	bl	80013e4 <HAL_InitTick>
 8003382:	4603      	mov	r3, r0
 8003384:	72fb      	strb	r3, [r7, #11]

  return status;
 8003386:	7afb      	ldrb	r3, [r7, #11]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40022000 	.word	0x40022000
 8003394:	40021000 	.word	0x40021000
 8003398:	08007d90 	.word	0x08007d90
 800339c:	20000000 	.word	0x20000000
 80033a0:	20000004 	.word	0x20000004

080033a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	@ 0x24
 80033a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b2:	4b3e      	ldr	r3, [pc, #248]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033bc:	4b3b      	ldr	r3, [pc, #236]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x34>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	d121      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d11e      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033d8:	4b34      	ldr	r3, [pc, #208]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033e4:	4b31      	ldr	r3, [pc, #196]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e005      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033f4:	4b2d      	ldr	r3, [pc, #180]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003400:	4a2b      	ldr	r2, [pc, #172]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003408:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003414:	e00a      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d102      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800341c:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	e004      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d101      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003428:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800342a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d134      	bne.n	800349c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003432:	4b1e      	ldr	r3, [pc, #120]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d003      	beq.n	800344a <HAL_RCC_GetSysClockFreq+0xa6>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d003      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0xac>
 8003448:	e005      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800344a:	4b1a      	ldr	r3, [pc, #104]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800344c:	617b      	str	r3, [r7, #20]
      break;
 800344e:	e005      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003452:	617b      	str	r3, [r7, #20]
      break;
 8003454:	e002      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	617b      	str	r3, [r7, #20]
      break;
 800345a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345c:	4b13      	ldr	r3, [pc, #76]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	3301      	adds	r3, #1
 8003468:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800346a:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	fb03 f202 	mul.w	r2, r3, r2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003482:	4b0a      	ldr	r3, [pc, #40]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	0e5b      	lsrs	r3, r3, #25
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	3301      	adds	r3, #1
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800349c:	69bb      	ldr	r3, [r7, #24]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3724      	adds	r7, #36	@ 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	08007da8 	.word	0x08007da8
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	@ (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4904      	ldr	r1, [pc, #16]	@ (80034fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	08007da0 	.word	0x08007da0

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003504:	f7ff ffda 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0adb      	lsrs	r3, r3, #11
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4904      	ldr	r1, [pc, #16]	@ (8003528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	08007da0 	.word	0x08007da0

0800352c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003538:	4b2a      	ldr	r3, [pc, #168]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003544:	f7ff f9ee 	bl	8002924 <HAL_PWREx_GetVoltageRange>
 8003548:	6178      	str	r0, [r7, #20]
 800354a:	e014      	b.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b25      	ldr	r3, [pc, #148]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003550:	4a24      	ldr	r2, [pc, #144]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	@ 0x58
 8003558:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003564:	f7ff f9de 	bl	8002924 <HAL_PWREx_GetVoltageRange>
 8003568:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b1e      	ldr	r3, [pc, #120]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356e:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003574:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800357c:	d10b      	bne.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b80      	cmp	r3, #128	@ 0x80
 8003582:	d919      	bls.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2ba0      	cmp	r3, #160	@ 0xa0
 8003588:	d902      	bls.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800358a:	2302      	movs	r3, #2
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e013      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003590:	2301      	movs	r3, #1
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e010      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b80      	cmp	r3, #128	@ 0x80
 800359a:	d902      	bls.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800359c:	2303      	movs	r3, #3
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e00a      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b80      	cmp	r3, #128	@ 0x80
 80035a6:	d102      	bne.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a8:	2302      	movs	r3, #2
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e004      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b70      	cmp	r3, #112	@ 0x70
 80035b2:	d101      	bne.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b4:	2301      	movs	r3, #1
 80035b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 0207 	bic.w	r2, r3, #7
 80035c0:	4909      	ldr	r1, [pc, #36]	@ (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035c8:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40022000 	.word	0x40022000

080035ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f8:	2300      	movs	r3, #0
 80035fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003604:	2b00      	cmp	r3, #0
 8003606:	d041      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800360c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003610:	d02a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003612:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003616:	d824      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003618:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800361c:	d008      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800361e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003622:	d81e      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362c:	d010      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800362e:	e018      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003630:	4b86      	ldr	r3, [pc, #536]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a85      	ldr	r2, [pc, #532]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800363c:	e015      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3304      	adds	r3, #4
 8003642:	2100      	movs	r1, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f001 f829 	bl	800469c <RCCEx_PLLSAI1_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800364e:	e00c      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3320      	adds	r3, #32
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f914 	bl	8004884 <RCCEx_PLLSAI2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003660:	e003      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	74fb      	strb	r3, [r7, #19]
      break;
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003670:	4b76      	ldr	r3, [pc, #472]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003676:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800367e:	4973      	ldr	r1, [pc, #460]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003686:	e001      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d041      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800369c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036a0:	d02a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036a6:	d824      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036ac:	d008      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036b2:	d81e      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036bc:	d010      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036be:	e018      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036c0:	4b62      	ldr	r3, [pc, #392]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a61      	ldr	r2, [pc, #388]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036cc:	e015      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 ffe1 	bl	800469c <RCCEx_PLLSAI1_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036de:	e00c      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3320      	adds	r3, #32
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 f8cc 	bl	8004884 <RCCEx_PLLSAI2_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f0:	e003      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	74fb      	strb	r3, [r7, #19]
      break;
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10b      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003700:	4b52      	ldr	r3, [pc, #328]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800370e:	494f      	ldr	r1, [pc, #316]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003716:	e001      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80a0 	beq.w	800386a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800372e:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800373e:	2300      	movs	r3, #0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003744:	4b41      	ldr	r3, [pc, #260]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003748:	4a40      	ldr	r2, [pc, #256]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800374e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003750:	4b3e      	ldr	r3, [pc, #248]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375c:	2301      	movs	r3, #1
 800375e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003760:	4b3b      	ldr	r3, [pc, #236]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3a      	ldr	r2, [pc, #232]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800376c:	f7fd fe8a 	bl	8001484 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003772:	e009      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fd fe86 	bl	8001484 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	74fb      	strb	r3, [r7, #19]
        break;
 8003786:	e005      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003788:	4b31      	ldr	r3, [pc, #196]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ef      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d15c      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800379a:	4b2c      	ldr	r3, [pc, #176]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d019      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b8:	4b24      	ldr	r3, [pc, #144]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037c4:	4b21      	ldr	r3, [pc, #132]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ca:	4a20      	ldr	r2, [pc, #128]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037d4:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	4a1c      	ldr	r2, [pc, #112]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037e4:	4a19      	ldr	r2, [pc, #100]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fd fe45 	bl	8001484 <HAL_GetTick>
 80037fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fc:	e00b      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fd fe41 	bl	8001484 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d902      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	74fb      	strb	r3, [r7, #19]
            break;
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ec      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10c      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382a:	4b08      	ldr	r3, [pc, #32]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003830:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383a:	4904      	ldr	r1, [pc, #16]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003842:	e009      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	74bb      	strb	r3, [r7, #18]
 8003848:	e006      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003858:	7c7b      	ldrb	r3, [r7, #17]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d105      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003862:	4a9d      	ldr	r2, [pc, #628]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003868:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003876:	4b98      	ldr	r3, [pc, #608]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387c:	f023 0203 	bic.w	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003884:	4994      	ldr	r1, [pc, #592]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003898:	4b8f      	ldr	r3, [pc, #572]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	f023 020c 	bic.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a6:	498c      	ldr	r1, [pc, #560]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ba:	4b87      	ldr	r3, [pc, #540]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	4983      	ldr	r1, [pc, #524]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038dc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	497b      	ldr	r1, [pc, #492]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038fe:	4b76      	ldr	r3, [pc, #472]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800390c:	4972      	ldr	r1, [pc, #456]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003920:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392e:	496a      	ldr	r1, [pc, #424]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003942:	4b65      	ldr	r3, [pc, #404]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003948:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	4961      	ldr	r1, [pc, #388]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003964:	4b5c      	ldr	r3, [pc, #368]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003972:	4959      	ldr	r1, [pc, #356]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003986:	4b54      	ldr	r3, [pc, #336]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003994:	4950      	ldr	r1, [pc, #320]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b6:	4948      	ldr	r1, [pc, #288]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ca:	4b43      	ldr	r3, [pc, #268]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	493f      	ldr	r1, [pc, #252]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d028      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ec:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039fa:	4937      	ldr	r1, [pc, #220]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a0c:	4b32      	ldr	r3, [pc, #200]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a31      	ldr	r2, [pc, #196]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a16:	60d3      	str	r3, [r2, #12]
 8003a18:	e011      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fe36 	bl	800469c <RCCEx_PLLSAI1_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a34:	7cfb      	ldrb	r3, [r7, #19]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a3a:	7cfb      	ldrb	r3, [r7, #19]
 8003a3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d028      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a4a:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a58:	491f      	ldr	r1, [pc, #124]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a68:	d106      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a74:	60d3      	str	r3, [r2, #12]
 8003a76:	e011      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2101      	movs	r1, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fe07 	bl	800469c <RCCEx_PLLSAI1_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a92:	7cfb      	ldrb	r3, [r7, #19]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d02b      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab6:	4908      	ldr	r1, [pc, #32]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ac6:	d109      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac8:	4b03      	ldr	r3, [pc, #12]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a02      	ldr	r2, [pc, #8]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad2:	60d3      	str	r3, [r2, #12]
 8003ad4:	e014      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2101      	movs	r1, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fdd5 	bl	800469c <RCCEx_PLLSAI1_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af6:	7cfb      	ldrb	r3, [r7, #19]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d02f      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b1a:	4928      	ldr	r1, [pc, #160]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	2102      	movs	r1, #2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fdb2 	bl	800469c <RCCEx_PLLSAI1_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d014      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	74bb      	strb	r3, [r7, #18]
 8003b46:	e011      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3320      	adds	r3, #32
 8003b56:	2102      	movs	r1, #2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fe93 	bl	8004884 <RCCEx_PLLSAI2_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b78:	4b10      	ldr	r3, [pc, #64]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b86:	490d      	ldr	r1, [pc, #52]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b9a:	4b08      	ldr	r3, [pc, #32]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003baa:	4904      	ldr	r1, [pc, #16]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bb2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bd2:	d13e      	bne.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003bd4:	4bb2      	ldr	r3, [pc, #712]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bde:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003be6:	d028      	beq.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bee:	f200 8542 	bhi.w	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf8:	d005      	beq.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c00:	d00e      	beq.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003c02:	f000 bd38 	b.w	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c06:	4ba6      	ldr	r3, [pc, #664]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	f040 8532 	bne.w	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c1a:	61fb      	str	r3, [r7, #28]
      break;
 8003c1c:	f000 bd2d 	b.w	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003c20:	4b9f      	ldr	r3, [pc, #636]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	f040 8527 	bne.w	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003c30:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003c34:	61fb      	str	r3, [r7, #28]
      break;
 8003c36:	f000 bd22 	b.w	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c3a:	4b99      	ldr	r3, [pc, #612]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c46:	f040 851c 	bne.w	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003c4a:	4b96      	ldr	r3, [pc, #600]	@ (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003c4c:	61fb      	str	r3, [r7, #28]
      break;
 8003c4e:	f000 bd18 	b.w	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c52:	4b93      	ldr	r3, [pc, #588]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d036      	beq.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d840      	bhi.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d020      	beq.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003c74:	e039      	b.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c76:	4b8a      	ldr	r3, [pc, #552]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d116      	bne.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c82:	4b87      	ldr	r3, [pc, #540]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003c8e:	4b84      	ldr	r3, [pc, #528]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	e005      	b.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003c9a:	4b81      	ldr	r3, [pc, #516]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	4a80      	ldr	r2, [pc, #512]	@ (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003cae:	e01f      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
      break;
 8003cb4:	e01c      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc2:	d102      	bne.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003cc4:	4b79      	ldr	r3, [pc, #484]	@ (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003cc6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003cc8:	e012      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
      break;
 8003cce:	e00f      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003cd0:	4b73      	ldr	r3, [pc, #460]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cdc:	d102      	bne.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003cde:	4b74      	ldr	r3, [pc, #464]	@ (8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003ce0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61bb      	str	r3, [r7, #24]
      break;
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
      break;
 8003cee:	bf00      	nop
    }

    switch(PeriphClk)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003cf6:	f000 80dd 	beq.w	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d00:	f200 84c1 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d0a:	f000 80d3 	beq.w	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d14:	f200 84b7 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1e:	f000 835f 	beq.w	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d28:	f200 84ad 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d32:	f000 847e 	beq.w	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d3c:	f200 84a3 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d46:	f000 82cd 	beq.w	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d50:	f200 8499 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5a:	f000 80ab 	beq.w	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d64:	f200 848f 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6e:	f000 8090 	beq.w	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d78:	f200 8485 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d82:	d07f      	beq.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8a:	f200 847c 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d94:	f000 8403 	beq.w	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	f200 8472 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da8:	f000 83af 	beq.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db2:	f200 8468 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dbc:	f000 8379 	beq.w	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc6:	f200 845e 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b80      	cmp	r3, #128	@ 0x80
 8003dce:	f000 8344 	beq.w	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b80      	cmp	r3, #128	@ 0x80
 8003dd6:	f200 8456 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d84b      	bhi.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 844f 	beq.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	2b1f      	cmp	r3, #31
 8003dee:	f200 844a 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003df2:	a201      	add	r2, pc, #4	@ (adr r2, 8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003fe1 	.word	0x08003fe1
 8003dfc:	0800404f 	.word	0x0800404f
 8003e00:	08004687 	.word	0x08004687
 8003e04:	080040e3 	.word	0x080040e3
 8003e08:	08004687 	.word	0x08004687
 8003e0c:	08004687 	.word	0x08004687
 8003e10:	08004687 	.word	0x08004687
 8003e14:	08004169 	.word	0x08004169
 8003e18:	08004687 	.word	0x08004687
 8003e1c:	08004687 	.word	0x08004687
 8003e20:	08004687 	.word	0x08004687
 8003e24:	08004687 	.word	0x08004687
 8003e28:	08004687 	.word	0x08004687
 8003e2c:	08004687 	.word	0x08004687
 8003e30:	08004687 	.word	0x08004687
 8003e34:	080041e1 	.word	0x080041e1
 8003e38:	08004687 	.word	0x08004687
 8003e3c:	08004687 	.word	0x08004687
 8003e40:	08004687 	.word	0x08004687
 8003e44:	08004687 	.word	0x08004687
 8003e48:	08004687 	.word	0x08004687
 8003e4c:	08004687 	.word	0x08004687
 8003e50:	08004687 	.word	0x08004687
 8003e54:	08004687 	.word	0x08004687
 8003e58:	08004687 	.word	0x08004687
 8003e5c:	08004687 	.word	0x08004687
 8003e60:	08004687 	.word	0x08004687
 8003e64:	08004687 	.word	0x08004687
 8003e68:	08004687 	.word	0x08004687
 8003e6c:	08004687 	.word	0x08004687
 8003e70:	08004687 	.word	0x08004687
 8003e74:	08004263 	.word	0x08004263
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	f000 82c1 	beq.w	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003e80:	f000 bc01 	b.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003e84:	69b9      	ldr	r1, [r7, #24]
 8003e86:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003e8a:	f000 fdd9 	bl	8004a40 <RCCEx_GetSAIxPeriphCLKFreq>
 8003e8e:	61f8      	str	r0, [r7, #28]
      break;
 8003e90:	e3fa      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003e92:	69b9      	ldr	r1, [r7, #24]
 8003e94:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003e98:	f000 fdd2 	bl	8004a40 <RCCEx_GetSAIxPeriphCLKFreq>
 8003e9c:	61f8      	str	r0, [r7, #28]
      break;
 8003e9e:	e3f3      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	0003d090 	.word	0x0003d090
 8003ea8:	08007da8 	.word	0x08007da8
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003eb4:	4ba9      	ldr	r3, [pc, #676]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003ebe:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003ec6:	d00c      	beq.n	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003ece:	d87f      	bhi.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ed6:	d04e      	beq.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ede:	d01d      	beq.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003ee0:	e076      	b.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003ee2:	4b9e      	ldr	r3, [pc, #632]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d172      	bne.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003eee:	4b9b      	ldr	r3, [pc, #620]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003efa:	4b98      	ldr	r3, [pc, #608]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	e005      	b.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003f06:	4b95      	ldr	r3, [pc, #596]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	4a93      	ldr	r2, [pc, #588]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f18:	61fb      	str	r3, [r7, #28]
          break;
 8003f1a:	e05b      	b.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003f1c:	4b8f      	ldr	r3, [pc, #572]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f28:	d156      	bne.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003f2a:	4b8c      	ldr	r3, [pc, #560]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f36:	d14f      	bne.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003f38:	4b88      	ldr	r3, [pc, #544]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f42:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	fb03 f202 	mul.w	r2, r3, r2
 8003f4c:	4b83      	ldr	r3, [pc, #524]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	3301      	adds	r3, #1
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	0d5b      	lsrs	r3, r3, #21
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	3301      	adds	r3, #1
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	61fb      	str	r3, [r7, #28]
          break;
 8003f74:	e030      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003f76:	4b79      	ldr	r3, [pc, #484]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f82:	d12b      	bne.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003f84:	4b75      	ldr	r3, [pc, #468]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f90:	d124      	bne.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003f92:	4b72      	ldr	r3, [pc, #456]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	fb03 f202 	mul.w	r2, r3, r2
 8003fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003fb8:	4b68      	ldr	r3, [pc, #416]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	0d5b      	lsrs	r3, r3, #21
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	61fb      	str	r3, [r7, #28]
          break;
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003fd0:	bf00      	nop
 8003fd2:	e359      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fd4:	bf00      	nop
 8003fd6:	e357      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fd8:	bf00      	nop
 8003fda:	e355      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fdc:	bf00      	nop
        break;
 8003fde:	e353      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d827      	bhi.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	08004011 	.word	0x08004011
 8004000:	08004019 	.word	0x08004019
 8004004:	0800402d 	.word	0x0800402d
          frequency = HAL_RCC_GetPCLK2Freq();
 8004008:	f7ff fa7a 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 800400c:	61f8      	str	r0, [r7, #28]
          break;
 800400e:	e01d      	b.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004010:	f7ff f9c8 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8004014:	61f8      	str	r0, [r7, #28]
          break;
 8004016:	e019      	b.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004018:	4b50      	ldr	r3, [pc, #320]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004024:	d10f      	bne.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004026:	4b4f      	ldr	r3, [pc, #316]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004028:	61fb      	str	r3, [r7, #28]
          break;
 800402a:	e00c      	b.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800402c:	4b4b      	ldr	r3, [pc, #300]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d107      	bne.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800403e:	61fb      	str	r3, [r7, #28]
          break;
 8004040:	e003      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004042:	bf00      	nop
 8004044:	e320      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004046:	bf00      	nop
 8004048:	e31e      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800404a:	bf00      	nop
        break;
 800404c:	e31c      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800404e:	4b43      	ldr	r3, [pc, #268]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b0c      	cmp	r3, #12
 800405e:	d83a      	bhi.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004060:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	0800409d 	.word	0x0800409d
 800406c:	080040d7 	.word	0x080040d7
 8004070:	080040d7 	.word	0x080040d7
 8004074:	080040d7 	.word	0x080040d7
 8004078:	080040a5 	.word	0x080040a5
 800407c:	080040d7 	.word	0x080040d7
 8004080:	080040d7 	.word	0x080040d7
 8004084:	080040d7 	.word	0x080040d7
 8004088:	080040ad 	.word	0x080040ad
 800408c:	080040d7 	.word	0x080040d7
 8004090:	080040d7 	.word	0x080040d7
 8004094:	080040d7 	.word	0x080040d7
 8004098:	080040c1 	.word	0x080040c1
          frequency = HAL_RCC_GetPCLK1Freq();
 800409c:	f7ff fa1a 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 80040a0:	61f8      	str	r0, [r7, #28]
          break;
 80040a2:	e01d      	b.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80040a4:	f7ff f97e 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 80040a8:	61f8      	str	r0, [r7, #28]
          break;
 80040aa:	e019      	b.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040ac:	4b2b      	ldr	r3, [pc, #172]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b8:	d10f      	bne.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80040ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80040bc:	61fb      	str	r3, [r7, #28]
          break;
 80040be:	e00c      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040c0:	4b26      	ldr	r3, [pc, #152]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d107      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80040ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040d2:	61fb      	str	r3, [r7, #28]
          break;
 80040d4:	e003      	b.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80040d6:	bf00      	nop
 80040d8:	e2d6      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040da:	bf00      	nop
 80040dc:	e2d4      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040de:	bf00      	nop
        break;
 80040e0:	e2d2      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80040e2:	4b1e      	ldr	r3, [pc, #120]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040ec:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b30      	cmp	r3, #48	@ 0x30
 80040f2:	d021      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b30      	cmp	r3, #48	@ 0x30
 80040f8:	d829      	bhi.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d011      	beq.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b20      	cmp	r3, #32
 8004104:	d823      	bhi.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b10      	cmp	r3, #16
 8004110:	d004      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004112:	e01c      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004114:	f7ff f9de 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004118:	61f8      	str	r0, [r7, #28]
          break;
 800411a:	e01d      	b.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 800411c:	f7ff f942 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8004120:	61f8      	str	r0, [r7, #28]
          break;
 8004122:	e019      	b.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004124:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004130:	d10f      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004132:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004134:	61fb      	str	r3, [r7, #28]
          break;
 8004136:	e00c      	b.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004138:	4b08      	ldr	r3, [pc, #32]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d107      	bne.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800414a:	61fb      	str	r3, [r7, #28]
          break;
 800414c:	e003      	b.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800414e:	bf00      	nop
 8004150:	e29a      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004152:	bf00      	nop
 8004154:	e298      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004156:	bf00      	nop
        break;
 8004158:	e296      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	08007da8 	.word	0x08007da8
 8004164:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004168:	4b9b      	ldr	r3, [pc, #620]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004172:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2bc0      	cmp	r3, #192	@ 0xc0
 8004178:	d021      	beq.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2bc0      	cmp	r3, #192	@ 0xc0
 800417e:	d829      	bhi.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b80      	cmp	r3, #128	@ 0x80
 8004184:	d011      	beq.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b80      	cmp	r3, #128	@ 0x80
 800418a:	d823      	bhi.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d004      	beq.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004198:	e01c      	b.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800419a:	f7ff f99b 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 800419e:	61f8      	str	r0, [r7, #28]
          break;
 80041a0:	e01d      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80041a2:	f7ff f8ff 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 80041a6:	61f8      	str	r0, [r7, #28]
          break;
 80041a8:	e019      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041aa:	4b8b      	ldr	r3, [pc, #556]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b6:	d10f      	bne.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80041b8:	4b88      	ldr	r3, [pc, #544]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80041ba:	61fb      	str	r3, [r7, #28]
          break;
 80041bc:	e00c      	b.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041be:	4b86      	ldr	r3, [pc, #536]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d107      	bne.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80041cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d0:	61fb      	str	r3, [r7, #28]
          break;
 80041d2:	e003      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80041d4:	bf00      	nop
 80041d6:	e257      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041d8:	bf00      	nop
 80041da:	e255      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041dc:	bf00      	nop
        break;
 80041de:	e253      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80041e0:	4b7d      	ldr	r3, [pc, #500]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ea:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041f2:	d025      	beq.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041fa:	d82c      	bhi.n	8004256 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004202:	d013      	beq.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420a:	d824      	bhi.n	8004256 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004218:	d004      	beq.n	8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800421a:	e01c      	b.n	8004256 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 800421c:	f7ff f95a 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004220:	61f8      	str	r0, [r7, #28]
          break;
 8004222:	e01d      	b.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004224:	f7ff f8be 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8004228:	61f8      	str	r0, [r7, #28]
          break;
 800422a:	e019      	b.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800422c:	4b6a      	ldr	r3, [pc, #424]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004238:	d10f      	bne.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800423a:	4b68      	ldr	r3, [pc, #416]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800423c:	61fb      	str	r3, [r7, #28]
          break;
 800423e:	e00c      	b.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004240:	4b65      	ldr	r3, [pc, #404]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b02      	cmp	r3, #2
 800424c:	d107      	bne.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800424e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004252:	61fb      	str	r3, [r7, #28]
          break;
 8004254:	e003      	b.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004256:	bf00      	nop
 8004258:	e216      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800425a:	bf00      	nop
 800425c:	e214      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800425e:	bf00      	nop
        break;
 8004260:	e212      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004262:	4b5d      	ldr	r3, [pc, #372]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004268:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800426c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004274:	d025      	beq.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800427c:	d82c      	bhi.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004284:	d013      	beq.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800428c:	d824      	bhi.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429a:	d004      	beq.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800429c:	e01c      	b.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800429e:	f7ff f919 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 80042a2:	61f8      	str	r0, [r7, #28]
          break;
 80042a4:	e01d      	b.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80042a6:	f7ff f87d 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 80042aa:	61f8      	str	r0, [r7, #28]
          break;
 80042ac:	e019      	b.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042ae:	4b4a      	ldr	r3, [pc, #296]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ba:	d10f      	bne.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80042bc:	4b47      	ldr	r3, [pc, #284]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80042be:	61fb      	str	r3, [r7, #28]
          break;
 80042c0:	e00c      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042c2:	4b45      	ldr	r3, [pc, #276]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d107      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80042d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042d4:	61fb      	str	r3, [r7, #28]
          break;
 80042d6:	e003      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80042d8:	bf00      	nop
 80042da:	e1d5      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042dc:	bf00      	nop
 80042de:	e1d3      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042e0:	bf00      	nop
        break;
 80042e2:	e1d1      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80042e4:	4b3c      	ldr	r3, [pc, #240]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042ee:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042f6:	d00c      	beq.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042fe:	d864      	bhi.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004306:	d008      	beq.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800430e:	d030      	beq.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004310:	e05b      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004312:	f7ff f847 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8004316:	61f8      	str	r0, [r7, #28]
          break;
 8004318:	e05c      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800431a:	4b2f      	ldr	r3, [pc, #188]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004326:	d152      	bne.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004328:	4b2b      	ldr	r3, [pc, #172]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d04c      	beq.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004334:	4b28      	ldr	r3, [pc, #160]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800433e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	fb03 f202 	mul.w	r2, r3, r2
 8004348:	4b23      	ldr	r3, [pc, #140]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	3301      	adds	r3, #1
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800435a:	4b1f      	ldr	r3, [pc, #124]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	0e5b      	lsrs	r3, r3, #25
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	3301      	adds	r3, #1
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	fbb2 f3f3 	udiv	r3, r2, r3
 800436e:	61fb      	str	r3, [r7, #28]
          break;
 8004370:	e02d      	b.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004372:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800437a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800437e:	d128      	bne.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004380:	4b15      	ldr	r3, [pc, #84]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d022      	beq.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800438c:	4b12      	ldr	r3, [pc, #72]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004396:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	fb03 f202 	mul.w	r2, r3, r2
 80043a0:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	3301      	adds	r3, #1
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80043b2:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	0e5b      	lsrs	r3, r3, #25
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	3301      	adds	r3, #1
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	61fb      	str	r3, [r7, #28]
          break;
 80043c8:	e003      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80043ca:	bf00      	nop
 80043cc:	e15c      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043ce:	bf00      	nop
 80043d0:	e15a      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043d2:	bf00      	nop
        break;
 80043d4:	e158      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80043e0:	4b9d      	ldr	r3, [pc, #628]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043ea:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80043f2:	f7ff f885 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 80043f6:	61f8      	str	r0, [r7, #28]
        break;
 80043f8:	e146      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80043fa:	f7fe ffd3 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 80043fe:	61f8      	str	r0, [r7, #28]
        break;
 8004400:	e142      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004402:	4b95      	ldr	r3, [pc, #596]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004408:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800440c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004414:	d013      	beq.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800441c:	d819      	bhi.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d004      	beq.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442a:	d004      	beq.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800442c:	e011      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800442e:	f7ff f851 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004432:	61f8      	str	r0, [r7, #28]
          break;
 8004434:	e010      	b.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004436:	f7fe ffb5 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 800443a:	61f8      	str	r0, [r7, #28]
          break;
 800443c:	e00c      	b.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800443e:	4b86      	ldr	r3, [pc, #536]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444a:	d104      	bne.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800444c:	4b83      	ldr	r3, [pc, #524]	@ (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800444e:	61fb      	str	r3, [r7, #28]
          break;
 8004450:	e001      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004452:	bf00      	nop
 8004454:	e118      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004456:	bf00      	nop
        break;
 8004458:	e116      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800445a:	4b7f      	ldr	r3, [pc, #508]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004460:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004464:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800446c:	d013      	beq.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004474:	d819      	bhi.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d004      	beq.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004482:	d004      	beq.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004484:	e011      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004486:	f7ff f825 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 800448a:	61f8      	str	r0, [r7, #28]
          break;
 800448c:	e010      	b.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800448e:	f7fe ff89 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8004492:	61f8      	str	r0, [r7, #28]
          break;
 8004494:	e00c      	b.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004496:	4b70      	ldr	r3, [pc, #448]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a2:	d104      	bne.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80044a4:	4b6d      	ldr	r3, [pc, #436]	@ (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80044a6:	61fb      	str	r3, [r7, #28]
          break;
 80044a8:	e001      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80044aa:	bf00      	nop
 80044ac:	e0ec      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044ae:	bf00      	nop
        break;
 80044b0:	e0ea      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80044b2:	4b69      	ldr	r3, [pc, #420]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044bc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044c4:	d013      	beq.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044cc:	d819      	bhi.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044da:	d004      	beq.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80044dc:	e011      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044de:	f7fe fff9 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 80044e2:	61f8      	str	r0, [r7, #28]
          break;
 80044e4:	e010      	b.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80044e6:	f7fe ff5d 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 80044ea:	61f8      	str	r0, [r7, #28]
          break;
 80044ec:	e00c      	b.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fa:	d104      	bne.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80044fc:	4b57      	ldr	r3, [pc, #348]	@ (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80044fe:	61fb      	str	r3, [r7, #28]
          break;
 8004500:	e001      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004502:	bf00      	nop
 8004504:	e0c0      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004506:	bf00      	nop
        break;
 8004508:	e0be      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800450a:	4b53      	ldr	r3, [pc, #332]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004510:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004514:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800451c:	d02c      	beq.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004524:	d833      	bhi.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800452c:	d01a      	beq.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004534:	d82b      	bhi.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d004      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004542:	d004      	beq.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004544:	e023      	b.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004546:	f7fe ffc5 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 800454a:	61f8      	str	r0, [r7, #28]
          break;
 800454c:	e026      	b.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800454e:	4b42      	ldr	r3, [pc, #264]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b02      	cmp	r3, #2
 800455a:	d11a      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800455c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004560:	61fb      	str	r3, [r7, #28]
          break;
 8004562:	e016      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004564:	4b3c      	ldr	r3, [pc, #240]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004570:	d111      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004572:	4b3a      	ldr	r3, [pc, #232]	@ (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004574:	61fb      	str	r3, [r7, #28]
          break;
 8004576:	e00e      	b.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004578:	4b37      	ldr	r3, [pc, #220]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d109      	bne.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800458a:	61fb      	str	r3, [r7, #28]
          break;
 800458c:	e005      	b.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800458e:	bf00      	nop
 8004590:	e07a      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004592:	bf00      	nop
 8004594:	e078      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004596:	bf00      	nop
 8004598:	e076      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800459a:	bf00      	nop
        break;
 800459c:	e074      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800459e:	4b2e      	ldr	r3, [pc, #184]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80045a8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045b0:	d02c      	beq.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045b8:	d833      	bhi.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045c0:	d01a      	beq.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045c8:	d82b      	bhi.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045d6:	d004      	beq.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80045d8:	e023      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045da:	f7fe ff7b 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 80045de:	61f8      	str	r0, [r7, #28]
          break;
 80045e0:	e026      	b.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80045e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d11a      	bne.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80045f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80045f4:	61fb      	str	r3, [r7, #28]
          break;
 80045f6:	e016      	b.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045f8:	4b17      	ldr	r3, [pc, #92]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004604:	d111      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004608:	61fb      	str	r3, [r7, #28]
          break;
 800460a:	e00e      	b.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800460c:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b02      	cmp	r3, #2
 8004618:	d109      	bne.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800461a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800461e:	61fb      	str	r3, [r7, #28]
          break;
 8004620:	e005      	b.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004622:	bf00      	nop
 8004624:	e030      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004626:	bf00      	nop
 8004628:	e02e      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800462a:	bf00      	nop
 800462c:	e02c      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800462e:	bf00      	nop
        break;
 8004630:	e02a      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004632:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004638:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800463c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464a:	d009      	beq.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800464c:	e012      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800464e:	f7fe ff41 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004652:	61f8      	str	r0, [r7, #28]
          break;
 8004654:	e00e      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004656:	bf00      	nop
 8004658:	40021000 	.word	0x40021000
 800465c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004660:	4b0c      	ldr	r3, [pc, #48]	@ (8004694 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466c:	d101      	bne.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004670:	61fb      	str	r3, [r7, #28]
          break;
 8004672:	bf00      	nop
        break;
 8004674:	e008      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004676:	bf00      	nop
 8004678:	e006      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800467a:	bf00      	nop
 800467c:	e004      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800467e:	bf00      	nop
 8004680:	e002      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004682:	bf00      	nop
 8004684:	e000      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004686:	bf00      	nop
    }
  }

  return(frequency);
 8004688:	69fb      	ldr	r3, [r7, #28]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000
 8004698:	00f42400 	.word	0x00f42400

0800469c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046aa:	4b75      	ldr	r3, [pc, #468]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d018      	beq.n	80046e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046b6:	4b72      	ldr	r3, [pc, #456]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0203 	and.w	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d10d      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
       ||
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
       ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d047      	beq.n	8004772 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
 80046e6:	e044      	b.n	8004772 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d018      	beq.n	8004722 <RCCEx_PLLSAI1_Config+0x86>
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d825      	bhi.n	8004740 <RCCEx_PLLSAI1_Config+0xa4>
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d002      	beq.n	80046fe <RCCEx_PLLSAI1_Config+0x62>
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d009      	beq.n	8004710 <RCCEx_PLLSAI1_Config+0x74>
 80046fc:	e020      	b.n	8004740 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046fe:	4b60      	ldr	r3, [pc, #384]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d11d      	bne.n	8004746 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470e:	e01a      	b.n	8004746 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004710:	4b5b      	ldr	r3, [pc, #364]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004718:	2b00      	cmp	r3, #0
 800471a:	d116      	bne.n	800474a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004720:	e013      	b.n	800474a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004722:	4b57      	ldr	r3, [pc, #348]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800472e:	4b54      	ldr	r3, [pc, #336]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800473e:	e006      	b.n	800474e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      break;
 8004744:	e004      	b.n	8004750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004746:	bf00      	nop
 8004748:	e002      	b.n	8004750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800474e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10d      	bne.n	8004772 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004756:	4b4a      	ldr	r3, [pc, #296]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6819      	ldr	r1, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	430b      	orrs	r3, r1
 800476c:	4944      	ldr	r1, [pc, #272]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800476e:	4313      	orrs	r3, r2
 8004770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d17d      	bne.n	8004874 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004778:	4b41      	ldr	r3, [pc, #260]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a40      	ldr	r2, [pc, #256]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004784:	f7fc fe7e 	bl	8001484 <HAL_GetTick>
 8004788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800478a:	e009      	b.n	80047a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800478c:	f7fc fe7a 	bl	8001484 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d902      	bls.n	80047a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	73fb      	strb	r3, [r7, #15]
        break;
 800479e:	e005      	b.n	80047ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047a0:	4b37      	ldr	r3, [pc, #220]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ef      	bne.n	800478c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d160      	bne.n	8004874 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d111      	bne.n	80047dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047b8:	4b31      	ldr	r3, [pc, #196]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6892      	ldr	r2, [r2, #8]
 80047c8:	0211      	lsls	r1, r2, #8
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68d2      	ldr	r2, [r2, #12]
 80047ce:	0912      	lsrs	r2, r2, #4
 80047d0:	0452      	lsls	r2, r2, #17
 80047d2:	430a      	orrs	r2, r1
 80047d4:	492a      	ldr	r1, [pc, #168]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	610b      	str	r3, [r1, #16]
 80047da:	e027      	b.n	800482c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d112      	bne.n	8004808 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e2:	4b27      	ldr	r3, [pc, #156]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80047ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6892      	ldr	r2, [r2, #8]
 80047f2:	0211      	lsls	r1, r2, #8
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6912      	ldr	r2, [r2, #16]
 80047f8:	0852      	lsrs	r2, r2, #1
 80047fa:	3a01      	subs	r2, #1
 80047fc:	0552      	lsls	r2, r2, #21
 80047fe:	430a      	orrs	r2, r1
 8004800:	491f      	ldr	r1, [pc, #124]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	610b      	str	r3, [r1, #16]
 8004806:	e011      	b.n	800482c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004808:	4b1d      	ldr	r3, [pc, #116]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004810:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	0211      	lsls	r1, r2, #8
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6952      	ldr	r2, [r2, #20]
 800481e:	0852      	lsrs	r2, r2, #1
 8004820:	3a01      	subs	r2, #1
 8004822:	0652      	lsls	r2, r2, #25
 8004824:	430a      	orrs	r2, r1
 8004826:	4916      	ldr	r1, [pc, #88]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004828:	4313      	orrs	r3, r2
 800482a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800482c:	4b14      	ldr	r3, [pc, #80]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a13      	ldr	r2, [pc, #76]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004832:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fc fe24 	bl	8001484 <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800483e:	e009      	b.n	8004854 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004840:	f7fc fe20 	bl	8001484 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d902      	bls.n	8004854 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	73fb      	strb	r3, [r7, #15]
          break;
 8004852:	e005      	b.n	8004860 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004854:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ef      	beq.n	8004840 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	4904      	ldr	r1, [pc, #16]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000

08004884 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004892:	4b6a      	ldr	r3, [pc, #424]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d018      	beq.n	80048d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800489e:	4b67      	ldr	r3, [pc, #412]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0203 	and.w	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d10d      	bne.n	80048ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
       ||
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048b6:	4b61      	ldr	r3, [pc, #388]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	091b      	lsrs	r3, r3, #4
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
       ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d047      	beq.n	800495a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
 80048ce:	e044      	b.n	800495a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d018      	beq.n	800490a <RCCEx_PLLSAI2_Config+0x86>
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d825      	bhi.n	8004928 <RCCEx_PLLSAI2_Config+0xa4>
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d002      	beq.n	80048e6 <RCCEx_PLLSAI2_Config+0x62>
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d009      	beq.n	80048f8 <RCCEx_PLLSAI2_Config+0x74>
 80048e4:	e020      	b.n	8004928 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048e6:	4b55      	ldr	r3, [pc, #340]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d11d      	bne.n	800492e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f6:	e01a      	b.n	800492e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048f8:	4b50      	ldr	r3, [pc, #320]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004900:	2b00      	cmp	r3, #0
 8004902:	d116      	bne.n	8004932 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004908:	e013      	b.n	8004932 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800490a:	4b4c      	ldr	r3, [pc, #304]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004916:	4b49      	ldr	r3, [pc, #292]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004926:	e006      	b.n	8004936 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
      break;
 800492c:	e004      	b.n	8004938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800492e:	bf00      	nop
 8004930:	e002      	b.n	8004938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004932:	bf00      	nop
 8004934:	e000      	b.n	8004938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004936:	bf00      	nop
    }

    if(status == HAL_OK)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10d      	bne.n	800495a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800493e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	3b01      	subs	r3, #1
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	430b      	orrs	r3, r1
 8004954:	4939      	ldr	r1, [pc, #228]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004956:	4313      	orrs	r3, r2
 8004958:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d167      	bne.n	8004a30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004960:	4b36      	ldr	r3, [pc, #216]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a35      	ldr	r2, [pc, #212]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800496a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496c:	f7fc fd8a 	bl	8001484 <HAL_GetTick>
 8004970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004972:	e009      	b.n	8004988 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004974:	f7fc fd86 	bl	8001484 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d902      	bls.n	8004988 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	73fb      	strb	r3, [r7, #15]
        break;
 8004986:	e005      	b.n	8004994 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004988:	4b2c      	ldr	r3, [pc, #176]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1ef      	bne.n	8004974 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d14a      	bne.n	8004a30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d111      	bne.n	80049c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049a0:	4b26      	ldr	r3, [pc, #152]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80049a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6892      	ldr	r2, [r2, #8]
 80049b0:	0211      	lsls	r1, r2, #8
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68d2      	ldr	r2, [r2, #12]
 80049b6:	0912      	lsrs	r2, r2, #4
 80049b8:	0452      	lsls	r2, r2, #17
 80049ba:	430a      	orrs	r2, r1
 80049bc:	491f      	ldr	r1, [pc, #124]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	614b      	str	r3, [r1, #20]
 80049c2:	e011      	b.n	80049e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049c4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6892      	ldr	r2, [r2, #8]
 80049d4:	0211      	lsls	r1, r2, #8
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6912      	ldr	r2, [r2, #16]
 80049da:	0852      	lsrs	r2, r2, #1
 80049dc:	3a01      	subs	r2, #1
 80049de:	0652      	lsls	r2, r2, #25
 80049e0:	430a      	orrs	r2, r1
 80049e2:	4916      	ldr	r1, [pc, #88]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049e8:	4b14      	ldr	r3, [pc, #80]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fc fd46 	bl	8001484 <HAL_GetTick>
 80049f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049fa:	e009      	b.n	8004a10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049fc:	f7fc fd42 	bl	8001484 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d902      	bls.n	8004a10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a0e:	e005      	b.n	8004a1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a10:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ef      	beq.n	80049fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a22:	4b06      	ldr	r3, [pc, #24]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	4904      	ldr	r1, [pc, #16]	@ (8004a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000

08004a40 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	@ 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a5c:	d10c      	bne.n	8004a78 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004a5e:	4b6e      	ldr	r3, [pc, #440]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a64:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004a68:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a70:	d112      	bne.n	8004a98 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004a72:	4b6a      	ldr	r3, [pc, #424]	@ (8004c1c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	e00f      	b.n	8004a98 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a7e:	d10b      	bne.n	8004a98 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004a80:	4b65      	ldr	r3, [pc, #404]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a86:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004a8a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a92:	d101      	bne.n	8004a98 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004a94:	4b61      	ldr	r3, [pc, #388]	@ (8004c1c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004a96:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f040 80b4 	bne.w	8004c08 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004aaa:	d003      	beq.n	8004ab4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ab2:	d135      	bne.n	8004b20 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004ab4:	4b58      	ldr	r3, [pc, #352]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004abc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ac0:	f040 80a1 	bne.w	8004c06 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004ac4:	4b54      	ldr	r3, [pc, #336]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 809a 	beq.w	8004c06 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ad2:	4b51      	ldr	r3, [pc, #324]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	091b      	lsrs	r3, r3, #4
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	3301      	adds	r3, #1
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004ae6:	4b4c      	ldr	r3, [pc, #304]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004af0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004af8:	4b47      	ldr	r3, [pc, #284]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004b04:	2311      	movs	r3, #17
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e001      	b.n	8004b0e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004b0a:	2307      	movs	r3, #7
 8004b0c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	fb03 f202 	mul.w	r2, r3, r2
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004b1e:	e072      	b.n	8004c06 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d133      	bne.n	8004b8e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004b26:	4b3c      	ldr	r3, [pc, #240]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b32:	d169      	bne.n	8004c08 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004b34:	4b38      	ldr	r3, [pc, #224]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d063      	beq.n	8004c08 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b40:	4b35      	ldr	r3, [pc, #212]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004b54:	4b30      	ldr	r3, [pc, #192]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b5e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004b66:	4b2c      	ldr	r3, [pc, #176]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004b72:	2311      	movs	r3, #17
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e001      	b.n	8004b7c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004b78:	2307      	movs	r3, #7
 8004b7a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	fb03 f202 	mul.w	r2, r3, r2
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	e03c      	b.n	8004c08 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b94:	d003      	beq.n	8004b9e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b9c:	d134      	bne.n	8004c08 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004baa:	d12d      	bne.n	8004c08 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004bac:	4b1a      	ldr	r3, [pc, #104]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d027      	beq.n	8004c08 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004bb8:	4b17      	ldr	r3, [pc, #92]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004bcc:	4b12      	ldr	r3, [pc, #72]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004bde:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004bea:	2311      	movs	r3, #17
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e001      	b.n	8004bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004bf0:	2307      	movs	r3, #7
 8004bf2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	fb03 f202 	mul.w	r2, r3, r2
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e000      	b.n	8004c08 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004c06:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004c08:	69fb      	ldr	r3, [r7, #28]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3724      	adds	r7, #36	@ 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	001fff68 	.word	0x001fff68

08004c20 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d904      	bls.n	8004c3e <HAL_SAI_InitProtocol+0x1e>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	3b03      	subs	r3, #3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d812      	bhi.n	8004c62 <HAL_SAI_InitProtocol+0x42>
 8004c3c:	e008      	b.n	8004c50 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fd09 	bl	800565c <SAI_InitI2S>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4e:	e00b      	b.n	8004c68 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fdb2 	bl	80057c0 <SAI_InitPCM>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c60:	e002      	b.n	8004c68 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
      break;
 8004c66:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d104      	bne.n	8004c78 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f808 	bl	8004c84 <HAL_SAI_Init>
 8004c74:	4603      	mov	r3, r0
 8004c76:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e155      	b.n	8004f42 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc f814 	bl	8000cd8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fe3f 	bl	8005934 <SAI_Disable>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e140      	b.n	8004f42 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d00c      	beq.n	8004cea <HAL_SAI_Init+0x66>
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d80d      	bhi.n	8004cf0 <HAL_SAI_Init+0x6c>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_SAI_Init+0x5a>
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d003      	beq.n	8004ce4 <HAL_SAI_Init+0x60>
 8004cdc:	e008      	b.n	8004cf0 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
      break;
 8004ce2:	e008      	b.n	8004cf6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	61fb      	str	r3, [r7, #28]
      break;
 8004ce8:	e005      	b.n	8004cf6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004cea:	2320      	movs	r3, #32
 8004cec:	61fb      	str	r3, [r7, #28]
      break;
 8004cee:	e002      	b.n	8004cf6 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61fb      	str	r3, [r7, #28]
      break;
 8004cf4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d81d      	bhi.n	8004d3a <HAL_SAI_Init+0xb6>
 8004cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8004d04 <HAL_SAI_Init+0x80>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d1b 	.word	0x08004d1b
 8004d0c:	08004d23 	.word	0x08004d23
 8004d10:	08004d2b 	.word	0x08004d2b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
      break;
 8004d18:	e012      	b.n	8004d40 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004d1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d1e:	617b      	str	r3, [r7, #20]
      break;
 8004d20:	e00e      	b.n	8004d40 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d26:	617b      	str	r3, [r7, #20]
      break;
 8004d28:	e00a      	b.n	8004d40 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d2e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
      break;
 8004d38:	e002      	b.n	8004d40 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
      break;
 8004d3e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a81      	ldr	r2, [pc, #516]	@ (8004f4c <HAL_SAI_Init+0x2c8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_SAI_Init+0xd0>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a80      	ldr	r2, [pc, #512]	@ (8004f50 <HAL_SAI_Init+0x2cc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004d54:	4a7f      	ldr	r2, [pc, #508]	@ (8004f54 <HAL_SAI_Init+0x2d0>)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e002      	b.n	8004d62 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004d5c:	4a7e      	ldr	r2, [pc, #504]	@ (8004f58 <HAL_SAI_Init+0x2d4>)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d041      	beq.n	8004dee <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a77      	ldr	r2, [pc, #476]	@ (8004f4c <HAL_SAI_Init+0x2c8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_SAI_Init+0xfa>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a75      	ldr	r2, [pc, #468]	@ (8004f50 <HAL_SAI_Init+0x2cc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d105      	bne.n	8004d8a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004d7e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004d82:	f7fe ff1d 	bl	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d86:	6138      	str	r0, [r7, #16]
 8004d88:	e004      	b.n	8004d94 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004d8a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004d8e:	f7fe ff17 	bl	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d92:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	461a      	mov	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	025b      	lsls	r3, r3, #9
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a6b      	ldr	r2, [pc, #428]	@ (8004f5c <HAL_SAI_Init+0x2d8>)
 8004db0:	fba2 2303 	umull	r2, r3, r2, r3
 8004db4:	08da      	lsrs	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004dba:	68f9      	ldr	r1, [r7, #12]
 8004dbc:	4b67      	ldr	r3, [pc, #412]	@ (8004f5c <HAL_SAI_Init+0x2d8>)
 8004dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004dc2:	08da      	lsrs	r2, r3, #3
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	1aca      	subs	r2, r1, r3
 8004dce:	2a08      	cmp	r2, #8
 8004dd0:	d904      	bls.n	8004ddc <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d104      	bne.n	8004dee <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	085a      	lsrs	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_SAI_Init+0x17a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d109      	bne.n	8004e12 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_SAI_Init+0x186>
 8004e06:	2300      	movs	r3, #0
 8004e08:	e001      	b.n	8004e0e <HAL_SAI_Init+0x18a>
 8004e0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	e008      	b.n	8004e24 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d102      	bne.n	8004e20 <HAL_SAI_Init+0x19c>
 8004e1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e1e:	e000      	b.n	8004e22 <HAL_SAI_Init+0x19e>
 8004e20:	2300      	movs	r3, #0
 8004e22:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f60 <HAL_SAI_Init+0x2dc>)
 8004e30:	400b      	ands	r3, r1
 8004e32:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e42:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e48:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004e5c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e68:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	051b      	lsls	r3, r3, #20
 8004e70:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004e88:	f023 030f 	bic.w	r3, r3, #15
 8004e8c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6859      	ldr	r1, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6899      	ldr	r1, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f64 <HAL_SAI_Init+0x2e0>)
 8004eb8:	400b      	ands	r3, r1
 8004eba:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6899      	ldr	r1, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ecc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004ed2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004ed8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004ee2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68d9      	ldr	r1, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004efa:	400b      	ands	r3, r1
 8004efc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68d9      	ldr	r1, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f12:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004f14:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40015404 	.word	0x40015404
 8004f50:	40015424 	.word	0x40015424
 8004f54:	40015400 	.word	0x40015400
 8004f58:	40015800 	.word	0x40015800
 8004f5c:	cccccccd 	.word	0xcccccccd
 8004f60:	ff05c010 	.word	0xff05c010
 8004f64:	fff88000 	.word	0xfff88000

08004f68 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_SAI_Abort+0x1a>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e053      	b.n	800502a <HAL_SAI_Abort+0xc2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fcd2 	bl	8005934 <SAI_Disable>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fa8:	d125      	bne.n	8004ff6 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004fb8:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b12      	cmp	r3, #18
 8004fc4:	d108      	bne.n	8004fd8 <HAL_SAI_Abort+0x70>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fc fcb0 	bl	8001938 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b22      	cmp	r3, #34	@ 0x22
 8004fe2:	d108      	bne.n	8004ff6 <HAL_SAI_Abort+0x8e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fc fca1 	bl	8001938 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f04f 32ff 	mov.w	r2, #4294967295
 8005006:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0208 	orr.w	r2, r2, #8
 8005016:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005042:	f7fc fa1f 	bl	8001484 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_SAI_Transmit_DMA+0x20>
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e093      	b.n	8005180 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	f040 808c 	bne.w	800517e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_SAI_Transmit_DMA+0x40>
 8005070:	2302      	movs	r3, #2
 8005072:	e085      	b.n	8005180 <HAL_SAI_Transmit_DMA+0x14c>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	88fa      	ldrh	r2, [r7, #6]
 800508e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2212      	movs	r2, #18
 800509e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a6:	4a38      	ldr	r2, [pc, #224]	@ (8005188 <HAL_SAI_Transmit_DMA+0x154>)
 80050a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ae:	4a37      	ldr	r2, [pc, #220]	@ (800518c <HAL_SAI_Transmit_DMA+0x158>)
 80050b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b6:	4a36      	ldr	r2, [pc, #216]	@ (8005190 <HAL_SAI_Transmit_DMA+0x15c>)
 80050b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050be:	2200      	movs	r2, #0
 80050c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050ca:	4619      	mov	r1, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	331c      	adds	r3, #28
 80050d2:	461a      	mov	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80050da:	f7fc fbcd 	bl	8001878 <HAL_DMA_Start_IT>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e047      	b.n	8005180 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80050f0:	2100      	movs	r1, #0
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fbe6 	bl	80058c4 <SAI_InterruptFlag>
 80050f8:	4601      	mov	r1, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005116:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005118:	e015      	b.n	8005146 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800511a:	f7fc f9b3 	bl	8001484 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005128:	d90d      	bls.n	8005146 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005130:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e01c      	b.n	8005180 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0e2      	beq.n	800511a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d107      	bne.n	8005172 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005170:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	e000      	b.n	8005180 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800517e:	2302      	movs	r3, #2
  }
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	08005a07 	.word	0x08005a07
 800518c:	080059a9 	.word	0x080059a9
 8005190:	08005a9d 	.word	0x08005a9d

08005194 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <HAL_SAI_Receive_DMA+0x1a>
 80051a8:	88fb      	ldrh	r3, [r7, #6]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e074      	b.n	800529c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d16d      	bne.n	800529a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_SAI_Receive_DMA+0x38>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e067      	b.n	800529c <HAL_SAI_Receive_DMA+0x108>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88fa      	ldrh	r2, [r7, #6]
 80051de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	88fa      	ldrh	r2, [r7, #6]
 80051e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2222      	movs	r2, #34	@ 0x22
 80051f6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fe:	4a29      	ldr	r2, [pc, #164]	@ (80052a4 <HAL_SAI_Receive_DMA+0x110>)
 8005200:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005206:	4a28      	ldr	r2, [pc, #160]	@ (80052a8 <HAL_SAI_Receive_DMA+0x114>)
 8005208:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520e:	4a27      	ldr	r2, [pc, #156]	@ (80052ac <HAL_SAI_Receive_DMA+0x118>)
 8005210:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005216:	2200      	movs	r2, #0
 8005218:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	331c      	adds	r3, #28
 8005224:	4619      	mov	r1, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800522a:	461a      	mov	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005232:	f7fc fb21 	bl	8001878 <HAL_DMA_Start_IT>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e029      	b.n	800529c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005248:	2100      	movs	r1, #0
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 fb3a 	bl	80058c4 <SAI_InterruptFlag>
 8005250:	4601      	mov	r1, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800526e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d107      	bne.n	800528e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800528c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	08005a81 	.word	0x08005a81
 80052a8:	08005a23 	.word	0x08005a23
 80052ac:	08005a9d 	.word	0x08005a9d

080052b0 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8192 	beq.w	80055ea <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d009      	beq.n	80052fc <HAL_SAI_IRQHandler+0x4c>
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4798      	blx	r3
 80052fa:	e176      	b.n	80055ea <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01e      	beq.n	8005344 <HAL_SAI_IRQHandler+0x94>
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d019      	beq.n	8005344 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2201      	movs	r2, #1
 8005316:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b22      	cmp	r3, #34	@ 0x22
 8005322:	d101      	bne.n	8005328 <HAL_SAI_IRQHandler+0x78>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_SAI_IRQHandler+0x7a>
 8005328:	2302      	movs	r3, #2
 800532a:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f983 	bl	8005648 <HAL_SAI_ErrorCallback>
 8005342:	e152      	b.n	80055ea <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d011      	beq.n	8005372 <HAL_SAI_IRQHandler+0xc2>
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2202      	movs	r2, #2
 800535e:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 8140 	beq.w	80055ea <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800536e:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8005370:	e13b      	b.n	80055ea <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d055      	beq.n	8005428 <HAL_SAI_IRQHandler+0x178>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d050      	beq.n	8005428 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2220      	movs	r2, #32
 800538c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005394:	f043 0204 	orr.w	r2, r3, #4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d038      	beq.n	800541a <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d016      	beq.n	80053de <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053b4:	4a8f      	ldr	r2, [pc, #572]	@ (80055f4 <HAL_SAI_IRQHandler+0x344>)
 80053b6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fc faf9 	bl	80019b4 <HAL_DMA_Abort_IT>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f935 	bl	8005648 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80fc 	beq.w	80055e0 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ec:	4a81      	ldr	r2, [pc, #516]	@ (80055f4 <HAL_SAI_IRQHandler+0x344>)
 80053ee:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fc fadd 	bl	80019b4 <HAL_DMA_Abort_IT>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80ef 	beq.w	80055e0 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005408:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f918 	bl	8005648 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005418:	e0e2      	b.n	80055e0 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff fda4 	bl	8004f68 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f911 	bl	8005648 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005426:	e0db      	b.n	80055e0 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d055      	beq.n	80054de <HAL_SAI_IRQHandler+0x22e>
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d050      	beq.n	80054de <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2240      	movs	r2, #64	@ 0x40
 8005442:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800544a:	f043 0208 	orr.w	r2, r3, #8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d038      	beq.n	80054d0 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d016      	beq.n	8005494 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800546a:	4a62      	ldr	r2, [pc, #392]	@ (80055f4 <HAL_SAI_IRQHandler+0x344>)
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005472:	4618      	mov	r0, r3
 8005474:	f7fc fa9e 	bl	80019b4 <HAL_DMA_Abort_IT>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005484:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f8da 	bl	8005648 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 80a3 	beq.w	80055e4 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a2:	4a54      	ldr	r2, [pc, #336]	@ (80055f4 <HAL_SAI_IRQHandler+0x344>)
 80054a4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fc fa82 	bl	80019b4 <HAL_DMA_Abort_IT>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8096 	beq.w	80055e4 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f8bd 	bl	8005648 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054ce:	e089      	b.n	80055e4 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff fd49 	bl	8004f68 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f8b6 	bl	8005648 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054dc:	e082      	b.n	80055e4 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d061      	beq.n	80055ac <HAL_SAI_IRQHandler+0x2fc>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d05c      	beq.n	80055ac <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2204      	movs	r2, #4
 80054f8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005500:	f043 0220 	orr.w	r2, r3, #32
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d036      	beq.n	8005582 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d016      	beq.n	800554a <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005520:	4a34      	ldr	r2, [pc, #208]	@ (80055f4 <HAL_SAI_IRQHandler+0x344>)
 8005522:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005528:	4618      	mov	r0, r3
 800552a:	f7fc fa43 	bl	80019b4 <HAL_DMA_Abort_IT>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f87f 	bl	8005648 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554e:	2b00      	cmp	r3, #0
 8005550:	d04a      	beq.n	80055e8 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005556:	4a27      	ldr	r2, [pc, #156]	@ (80055f4 <HAL_SAI_IRQHandler+0x344>)
 8005558:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555e:	4618      	mov	r0, r3
 8005560:	f7fc fa28 	bl	80019b4 <HAL_DMA_Abort_IT>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d03e      	beq.n	80055e8 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005570:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f864 	bl	8005648 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005580:	e032      	b.n	80055e8 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f04f 32ff 	mov.w	r2, #4294967295
 8005592:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f84f 	bl	8005648 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055aa:	e01d      	b.n	80055e8 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d019      	beq.n	80055ea <HAL_SAI_IRQHandler+0x33a>
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d014      	beq.n	80055ea <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2210      	movs	r2, #16
 80055c6:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ce:	f043 0210 	orr.w	r2, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f835 	bl	8005648 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80055de:	e004      	b.n	80055ea <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055e0:	bf00      	nop
 80055e2:	e002      	b.n	80055ea <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055e4:	bf00      	nop
 80055e6:	e000      	b.n	80055ea <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055e8:	bf00      	nop
}
 80055ea:	bf00      	nop
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	08005aef 	.word	0x08005aef

080055f8 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <SAI_InitI2S+0x2e>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d103      	bne.n	8005692 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005690:	e002      	b.n	8005698 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800569e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e077      	b.n	80057b2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d107      	bne.n	80056d8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80056d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80056d6:	e006      	b.n	80056e6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056de:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d84f      	bhi.n	800578c <SAI_InitI2S+0x130>
 80056ec:	a201      	add	r2, pc, #4	@ (adr r2, 80056f4 <SAI_InitI2S+0x98>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005705 	.word	0x08005705
 80056f8:	08005727 	.word	0x08005727
 80056fc:	08005749 	.word	0x08005749
 8005700:	0800576b 	.word	0x0800576b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2280      	movs	r2, #128	@ 0x80
 8005708:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	011a      	lsls	r2, r3, #4
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2240      	movs	r2, #64	@ 0x40
 8005722:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005724:	e035      	b.n	8005792 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2280      	movs	r2, #128	@ 0x80
 800572a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	019a      	lsls	r2, r3, #6
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2280      	movs	r2, #128	@ 0x80
 8005744:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005746:	e024      	b.n	8005792 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	22c0      	movs	r2, #192	@ 0xc0
 800574c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	019a      	lsls	r2, r3, #6
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2280      	movs	r2, #128	@ 0x80
 8005766:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005768:	e013      	b.n	8005792 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	22e0      	movs	r2, #224	@ 0xe0
 800576e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	019a      	lsls	r2, r3, #6
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2280      	movs	r2, #128	@ 0x80
 8005788:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800578a:	e002      	b.n	8005792 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	75fb      	strb	r3, [r7, #23]
      break;
 8005790:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d10b      	bne.n	80057b0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d102      	bne.n	80057a4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2210      	movs	r2, #16
 80057a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d102      	bne.n	80057b0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2208      	movs	r2, #8
 80057ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop

080057c0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <SAI_InitPCM+0x2e>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d103      	bne.n	80057f6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057f4:	e002      	b.n	80057fc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005808:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005810:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005824:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d103      	bne.n	8005834 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	645a      	str	r2, [r3, #68]	@ 0x44
 8005832:	e002      	b.n	800583a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	220d      	movs	r2, #13
 8005838:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b03      	cmp	r3, #3
 800583e:	d837      	bhi.n	80058b0 <SAI_InitPCM+0xf0>
 8005840:	a201      	add	r2, pc, #4	@ (adr r2, 8005848 <SAI_InitPCM+0x88>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	08005859 	.word	0x08005859
 800584c:	0800586f 	.word	0x0800586f
 8005850:	08005885 	.word	0x08005885
 8005854:	0800589b 	.word	0x0800589b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2280      	movs	r2, #128	@ 0x80
 800585c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	011a      	lsls	r2, r3, #4
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2240      	movs	r2, #64	@ 0x40
 800586a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800586c:	e023      	b.n	80058b6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2280      	movs	r2, #128	@ 0x80
 8005872:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2280      	movs	r2, #128	@ 0x80
 8005880:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005882:	e018      	b.n	80058b6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	22c0      	movs	r2, #192	@ 0xc0
 8005888:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2280      	movs	r2, #128	@ 0x80
 8005896:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005898:	e00d      	b.n	80058b6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	22e0      	movs	r2, #224	@ 0xe0
 800589e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2280      	movs	r2, #128	@ 0x80
 80058ac:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80058ae:	e002      	b.n	80058b6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	75fb      	strb	r3, [r7, #23]
      break;
 80058b4:	bf00      	nop
  }

  return status;
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d103      	bne.n	80058e2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f043 0308 	orr.w	r3, r3, #8
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d10b      	bne.n	8005902 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d003      	beq.n	80058fa <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d103      	bne.n	8005902 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f043 0310 	orr.w	r3, r3, #16
 8005900:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b03      	cmp	r3, #3
 8005908:	d003      	beq.n	8005912 <SAI_InterruptFlag+0x4e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d104      	bne.n	800591c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	e003      	b.n	8005924 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f043 0304 	orr.w	r3, r3, #4
 8005922:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005924:	68fb      	ldr	r3, [r7, #12]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
	...

08005934 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800593c:	4b18      	ldr	r3, [pc, #96]	@ (80059a0 <SAI_Disable+0x6c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a18      	ldr	r2, [pc, #96]	@ (80059a4 <SAI_Disable+0x70>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	0b1b      	lsrs	r3, r3, #12
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800595e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800596c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	72fb      	strb	r3, [r7, #11]
      break;
 800597a:	e009      	b.n	8005990 <SAI_Disable+0x5c>
    }
    count--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3b01      	subs	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e7      	bne.n	8005960 <SAI_Disable+0x2c>

  return status;
 8005990:	7afb      	ldrb	r3, [r7, #11]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000000 	.word	0x20000000
 80059a4:	95cbec1b 	.word	0x95cbec1b

080059a8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d01c      	beq.n	80059f8 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80059d4:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80059d6:	2100      	movs	r1, #0
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff ff73 	bl	80058c4 <SAI_InterruptFlag>
 80059de:	4603      	mov	r3, r0
 80059e0:	43d9      	mvns	r1, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	400a      	ands	r2, r1
 80059ee:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff fdfd 	bl	80055f8 <HAL_SAI_TxCpltCallback>
#endif
}
 80059fe:	bf00      	nop
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a12:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f7ff fdf9 	bl	800560c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005a1a:	bf00      	nop
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2e:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d01c      	beq.n	8005a72 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005a46:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005a50:	2100      	movs	r1, #0
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff ff36 	bl	80058c4 <SAI_InterruptFlag>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	43d9      	mvns	r1, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	400a      	ands	r2, r1
 8005a68:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff fdd4 	bl	8005620 <HAL_SAI_RxCpltCallback>
#endif
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff fdd0 	bl	8005634 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005a94:	bf00      	nop
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005ac8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff ff32 	bl	8005934 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff fdb1 	bl	8005648 <HAL_SAI_ErrorCallback>
#endif
}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2200      	movs	r2, #0
 8005b12:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1c:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d00a      	beq.n	8005b3e <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff ff03 	bl	8005934 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0208 	orr.w	r2, r2, #8
 8005b3c:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff fd7a 	bl	8005648 <HAL_SAI_ErrorCallback>
#endif
}
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e095      	b.n	8005c9a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b7e:	d009      	beq.n	8005b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	61da      	str	r2, [r3, #28]
 8005b86:	e005      	b.n	8005b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fb f9b4 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bd4:	d902      	bls.n	8005bdc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e002      	b.n	8005be2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005be0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005bea:	d007      	beq.n	8005bfc <HAL_SPI_Init+0xa0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bf4:	d002      	beq.n	8005bfc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3e:	ea42 0103 	orr.w	r1, r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c46:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	0c1b      	lsrs	r3, r3, #16
 8005c58:	f003 0204 	and.w	r2, r3, #4
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c78:	ea42 0103 	orr.w	r1, r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b088      	sub	sp, #32
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cb2:	f7fb fbe7 	bl	8001484 <HAL_GetTick>
 8005cb6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005cb8:	88fb      	ldrh	r3, [r7, #6]
 8005cba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d001      	beq.n	8005ccc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e15c      	b.n	8005f86 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Transmit+0x36>
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e154      	b.n	8005f86 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_SPI_Transmit+0x48>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e14d      	b.n	8005f86 <HAL_SPI_Transmit+0x2e4>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	88fa      	ldrh	r2, [r7, #6]
 8005d0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d3c:	d10f      	bne.n	8005d5e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d68:	2b40      	cmp	r3, #64	@ 0x40
 8005d6a:	d007      	beq.n	8005d7c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d84:	d952      	bls.n	8005e2c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_SPI_Transmit+0xf2>
 8005d8e:	8b7b      	ldrh	r3, [r7, #26]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d145      	bne.n	8005e20 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d98:	881a      	ldrh	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da4:	1c9a      	adds	r2, r3, #2
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005db8:	e032      	b.n	8005e20 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d112      	bne.n	8005dee <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	881a      	ldrh	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	1c9a      	adds	r2, r3, #2
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005dec:	e018      	b.n	8005e20 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dee:	f7fb fb49 	bl	8001484 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d803      	bhi.n	8005e06 <HAL_SPI_Transmit+0x164>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d102      	bne.n	8005e0c <HAL_SPI_Transmit+0x16a>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d109      	bne.n	8005e20 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e0b2      	b.n	8005f86 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1c7      	bne.n	8005dba <HAL_SPI_Transmit+0x118>
 8005e2a:	e083      	b.n	8005f34 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <HAL_SPI_Transmit+0x198>
 8005e34:	8b7b      	ldrh	r3, [r7, #26]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d177      	bne.n	8005f2a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d912      	bls.n	8005e6a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e48:	881a      	ldrh	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e54:	1c9a      	adds	r2, r3, #2
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b02      	subs	r3, #2
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e68:	e05f      	b.n	8005f2a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	330c      	adds	r3, #12
 8005e74:	7812      	ldrb	r2, [r2, #0]
 8005e76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e90:	e04b      	b.n	8005f2a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d12b      	bne.n	8005ef8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d912      	bls.n	8005ed0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eae:	881a      	ldrh	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eba:	1c9a      	adds	r2, r3, #2
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b02      	subs	r3, #2
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ece:	e02c      	b.n	8005f2a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	7812      	ldrb	r2, [r2, #0]
 8005edc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ef6:	e018      	b.n	8005f2a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ef8:	f7fb fac4 	bl	8001484 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d803      	bhi.n	8005f10 <HAL_SPI_Transmit+0x26e>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d102      	bne.n	8005f16 <HAL_SPI_Transmit+0x274>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d109      	bne.n	8005f2a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e02d      	b.n	8005f86 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1ae      	bne.n	8005e92 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f947 	bl	80061cc <SPI_EndRxTxTransaction>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005f84:	2300      	movs	r3, #0
  }
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fa0:	f7fb fa70 	bl	8001484 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	1a9b      	subs	r3, r3, r2
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	4413      	add	r3, r2
 8005fae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fb0:	f7fb fa68 	bl	8001484 <HAL_GetTick>
 8005fb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fb6:	4b39      	ldr	r3, [pc, #228]	@ (800609c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	015b      	lsls	r3, r3, #5
 8005fbc:	0d1b      	lsrs	r3, r3, #20
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	fb02 f303 	mul.w	r3, r2, r3
 8005fc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc6:	e054      	b.n	8006072 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d050      	beq.n	8006072 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fd0:	f7fb fa58 	bl	8001484 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d902      	bls.n	8005fe6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d13d      	bne.n	8006062 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ff4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ffe:	d111      	bne.n	8006024 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006008:	d004      	beq.n	8006014 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006012:	d107      	bne.n	8006024 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006022:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800602c:	d10f      	bne.n	800604e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800604c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e017      	b.n	8006092 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	3b01      	subs	r3, #1
 8006070:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4013      	ands	r3, r2
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	bf0c      	ite	eq
 8006082:	2301      	moveq	r3, #1
 8006084:	2300      	movne	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	429a      	cmp	r2, r3
 800608e:	d19b      	bne.n	8005fc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000000 	.word	0x20000000

080060a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	@ 0x28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060b2:	f7fb f9e7 	bl	8001484 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	4413      	add	r3, r2
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80060c2:	f7fb f9df 	bl	8001484 <HAL_GetTick>
 80060c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060d0:	4b3d      	ldr	r3, [pc, #244]	@ (80061c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	4613      	mov	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	00da      	lsls	r2, r3, #3
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	0d1b      	lsrs	r3, r3, #20
 80060e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e2:	fb02 f303 	mul.w	r3, r2, r3
 80060e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80060e8:	e060      	b.n	80061ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80060f0:	d107      	bne.n	8006102 <SPI_WaitFifoStateUntilTimeout+0x62>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d104      	bne.n	8006102 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006100:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006108:	d050      	beq.n	80061ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800610a:	f7fb f9bb 	bl	8001484 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006116:	429a      	cmp	r2, r3
 8006118:	d902      	bls.n	8006120 <SPI_WaitFifoStateUntilTimeout+0x80>
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d13d      	bne.n	800619c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800612e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006138:	d111      	bne.n	800615e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006142:	d004      	beq.n	800614e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800614c:	d107      	bne.n	800615e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800615c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006166:	d10f      	bne.n	8006188 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006186:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e010      	b.n	80061be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d196      	bne.n	80060ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3728      	adds	r7, #40	@ 0x28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000000 	.word	0x20000000

080061cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2200      	movs	r2, #0
 80061e0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff ff5b 	bl	80060a0 <SPI_WaitFifoStateUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f4:	f043 0220 	orr.w	r2, r3, #32
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e027      	b.n	8006250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2200      	movs	r2, #0
 8006208:	2180      	movs	r1, #128	@ 0x80
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f7ff fec0 	bl	8005f90 <SPI_WaitFlagStateUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800621a:	f043 0220 	orr.w	r2, r3, #32
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e014      	b.n	8006250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2200      	movs	r2, #0
 800622e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff ff34 	bl	80060a0 <SPI_WaitFifoStateUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006242:	f043 0220 	orr.w	r2, r3, #32
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e000      	b.n	8006250 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e040      	b.n	80062ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fb f80c 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2224      	movs	r2, #36	@ 0x24
 8006284:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0201 	bic.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fb6a 	bl	8006978 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f8af 	bl	8006408 <UART_SetConfig>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e01b      	b.n	80062ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fbe9 	bl	8006abc <UART_CheckIdleState>
 80062ea:	4603      	mov	r3, r0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	@ 0x28
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	4613      	mov	r3, r2
 8006302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006308:	2b20      	cmp	r3, #32
 800630a:	d177      	bne.n	80063fc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_UART_Transmit+0x24>
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e070      	b.n	80063fe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2221      	movs	r2, #33	@ 0x21
 8006328:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800632a:	f7fb f8ab 	bl	8001484 <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	88fa      	ldrh	r2, [r7, #6]
 800633c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006348:	d108      	bne.n	800635c <HAL_UART_Transmit+0x68>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d104      	bne.n	800635c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006352:	2300      	movs	r3, #0
 8006354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	e003      	b.n	8006364 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006364:	e02f      	b.n	80063c6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2200      	movs	r2, #0
 800636e:	2180      	movs	r1, #128	@ 0x80
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fc4b 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e03b      	b.n	80063fe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10b      	bne.n	80063a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	881a      	ldrh	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006398:	b292      	uxth	r2, r2
 800639a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	3302      	adds	r3, #2
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	e007      	b.n	80063b4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	3301      	adds	r3, #1
 80063b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1c9      	bne.n	8006366 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2200      	movs	r2, #0
 80063da:	2140      	movs	r1, #64	@ 0x40
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fc15 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e005      	b.n	80063fe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2220      	movs	r2, #32
 80063f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e000      	b.n	80063fe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80063fc:	2302      	movs	r3, #2
  }
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3720      	adds	r7, #32
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800640c:	b08a      	sub	sp, #40	@ 0x28
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	431a      	orrs	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	431a      	orrs	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	4313      	orrs	r3, r2
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4ba4      	ldr	r3, [pc, #656]	@ (80066c8 <UART_SetConfig+0x2c0>)
 8006438:	4013      	ands	r3, r2
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006440:	430b      	orrs	r3, r1
 8006442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a99      	ldr	r2, [pc, #612]	@ (80066cc <UART_SetConfig+0x2c4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006470:	4313      	orrs	r3, r2
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006484:	430a      	orrs	r2, r1
 8006486:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a90      	ldr	r2, [pc, #576]	@ (80066d0 <UART_SetConfig+0x2c8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d126      	bne.n	80064e0 <UART_SetConfig+0xd8>
 8006492:	4b90      	ldr	r3, [pc, #576]	@ (80066d4 <UART_SetConfig+0x2cc>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	2b03      	cmp	r3, #3
 800649e:	d81b      	bhi.n	80064d8 <UART_SetConfig+0xd0>
 80064a0:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <UART_SetConfig+0xa0>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064b9 	.word	0x080064b9
 80064ac:	080064c9 	.word	0x080064c9
 80064b0:	080064c1 	.word	0x080064c1
 80064b4:	080064d1 	.word	0x080064d1
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064be:	e116      	b.n	80066ee <UART_SetConfig+0x2e6>
 80064c0:	2302      	movs	r3, #2
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c6:	e112      	b.n	80066ee <UART_SetConfig+0x2e6>
 80064c8:	2304      	movs	r3, #4
 80064ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ce:	e10e      	b.n	80066ee <UART_SetConfig+0x2e6>
 80064d0:	2308      	movs	r3, #8
 80064d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d6:	e10a      	b.n	80066ee <UART_SetConfig+0x2e6>
 80064d8:	2310      	movs	r3, #16
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064de:	e106      	b.n	80066ee <UART_SetConfig+0x2e6>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a7c      	ldr	r2, [pc, #496]	@ (80066d8 <UART_SetConfig+0x2d0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d138      	bne.n	800655c <UART_SetConfig+0x154>
 80064ea:	4b7a      	ldr	r3, [pc, #488]	@ (80066d4 <UART_SetConfig+0x2cc>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f0:	f003 030c 	and.w	r3, r3, #12
 80064f4:	2b0c      	cmp	r3, #12
 80064f6:	d82d      	bhi.n	8006554 <UART_SetConfig+0x14c>
 80064f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006500 <UART_SetConfig+0xf8>)
 80064fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fe:	bf00      	nop
 8006500:	08006535 	.word	0x08006535
 8006504:	08006555 	.word	0x08006555
 8006508:	08006555 	.word	0x08006555
 800650c:	08006555 	.word	0x08006555
 8006510:	08006545 	.word	0x08006545
 8006514:	08006555 	.word	0x08006555
 8006518:	08006555 	.word	0x08006555
 800651c:	08006555 	.word	0x08006555
 8006520:	0800653d 	.word	0x0800653d
 8006524:	08006555 	.word	0x08006555
 8006528:	08006555 	.word	0x08006555
 800652c:	08006555 	.word	0x08006555
 8006530:	0800654d 	.word	0x0800654d
 8006534:	2300      	movs	r3, #0
 8006536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653a:	e0d8      	b.n	80066ee <UART_SetConfig+0x2e6>
 800653c:	2302      	movs	r3, #2
 800653e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006542:	e0d4      	b.n	80066ee <UART_SetConfig+0x2e6>
 8006544:	2304      	movs	r3, #4
 8006546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654a:	e0d0      	b.n	80066ee <UART_SetConfig+0x2e6>
 800654c:	2308      	movs	r3, #8
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006552:	e0cc      	b.n	80066ee <UART_SetConfig+0x2e6>
 8006554:	2310      	movs	r3, #16
 8006556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655a:	e0c8      	b.n	80066ee <UART_SetConfig+0x2e6>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a5e      	ldr	r2, [pc, #376]	@ (80066dc <UART_SetConfig+0x2d4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d125      	bne.n	80065b2 <UART_SetConfig+0x1aa>
 8006566:	4b5b      	ldr	r3, [pc, #364]	@ (80066d4 <UART_SetConfig+0x2cc>)
 8006568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800656c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006570:	2b30      	cmp	r3, #48	@ 0x30
 8006572:	d016      	beq.n	80065a2 <UART_SetConfig+0x19a>
 8006574:	2b30      	cmp	r3, #48	@ 0x30
 8006576:	d818      	bhi.n	80065aa <UART_SetConfig+0x1a2>
 8006578:	2b20      	cmp	r3, #32
 800657a:	d00a      	beq.n	8006592 <UART_SetConfig+0x18a>
 800657c:	2b20      	cmp	r3, #32
 800657e:	d814      	bhi.n	80065aa <UART_SetConfig+0x1a2>
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <UART_SetConfig+0x182>
 8006584:	2b10      	cmp	r3, #16
 8006586:	d008      	beq.n	800659a <UART_SetConfig+0x192>
 8006588:	e00f      	b.n	80065aa <UART_SetConfig+0x1a2>
 800658a:	2300      	movs	r3, #0
 800658c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006590:	e0ad      	b.n	80066ee <UART_SetConfig+0x2e6>
 8006592:	2302      	movs	r3, #2
 8006594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006598:	e0a9      	b.n	80066ee <UART_SetConfig+0x2e6>
 800659a:	2304      	movs	r3, #4
 800659c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a0:	e0a5      	b.n	80066ee <UART_SetConfig+0x2e6>
 80065a2:	2308      	movs	r3, #8
 80065a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a8:	e0a1      	b.n	80066ee <UART_SetConfig+0x2e6>
 80065aa:	2310      	movs	r3, #16
 80065ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b0:	e09d      	b.n	80066ee <UART_SetConfig+0x2e6>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a4a      	ldr	r2, [pc, #296]	@ (80066e0 <UART_SetConfig+0x2d8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d125      	bne.n	8006608 <UART_SetConfig+0x200>
 80065bc:	4b45      	ldr	r3, [pc, #276]	@ (80066d4 <UART_SetConfig+0x2cc>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80065c8:	d016      	beq.n	80065f8 <UART_SetConfig+0x1f0>
 80065ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80065cc:	d818      	bhi.n	8006600 <UART_SetConfig+0x1f8>
 80065ce:	2b80      	cmp	r3, #128	@ 0x80
 80065d0:	d00a      	beq.n	80065e8 <UART_SetConfig+0x1e0>
 80065d2:	2b80      	cmp	r3, #128	@ 0x80
 80065d4:	d814      	bhi.n	8006600 <UART_SetConfig+0x1f8>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <UART_SetConfig+0x1d8>
 80065da:	2b40      	cmp	r3, #64	@ 0x40
 80065dc:	d008      	beq.n	80065f0 <UART_SetConfig+0x1e8>
 80065de:	e00f      	b.n	8006600 <UART_SetConfig+0x1f8>
 80065e0:	2300      	movs	r3, #0
 80065e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e6:	e082      	b.n	80066ee <UART_SetConfig+0x2e6>
 80065e8:	2302      	movs	r3, #2
 80065ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ee:	e07e      	b.n	80066ee <UART_SetConfig+0x2e6>
 80065f0:	2304      	movs	r3, #4
 80065f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f6:	e07a      	b.n	80066ee <UART_SetConfig+0x2e6>
 80065f8:	2308      	movs	r3, #8
 80065fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fe:	e076      	b.n	80066ee <UART_SetConfig+0x2e6>
 8006600:	2310      	movs	r3, #16
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006606:	e072      	b.n	80066ee <UART_SetConfig+0x2e6>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a35      	ldr	r2, [pc, #212]	@ (80066e4 <UART_SetConfig+0x2dc>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d12a      	bne.n	8006668 <UART_SetConfig+0x260>
 8006612:	4b30      	ldr	r3, [pc, #192]	@ (80066d4 <UART_SetConfig+0x2cc>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800661c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006620:	d01a      	beq.n	8006658 <UART_SetConfig+0x250>
 8006622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006626:	d81b      	bhi.n	8006660 <UART_SetConfig+0x258>
 8006628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800662c:	d00c      	beq.n	8006648 <UART_SetConfig+0x240>
 800662e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006632:	d815      	bhi.n	8006660 <UART_SetConfig+0x258>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <UART_SetConfig+0x238>
 8006638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663c:	d008      	beq.n	8006650 <UART_SetConfig+0x248>
 800663e:	e00f      	b.n	8006660 <UART_SetConfig+0x258>
 8006640:	2300      	movs	r3, #0
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006646:	e052      	b.n	80066ee <UART_SetConfig+0x2e6>
 8006648:	2302      	movs	r3, #2
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664e:	e04e      	b.n	80066ee <UART_SetConfig+0x2e6>
 8006650:	2304      	movs	r3, #4
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006656:	e04a      	b.n	80066ee <UART_SetConfig+0x2e6>
 8006658:	2308      	movs	r3, #8
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665e:	e046      	b.n	80066ee <UART_SetConfig+0x2e6>
 8006660:	2310      	movs	r3, #16
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006666:	e042      	b.n	80066ee <UART_SetConfig+0x2e6>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a17      	ldr	r2, [pc, #92]	@ (80066cc <UART_SetConfig+0x2c4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d13a      	bne.n	80066e8 <UART_SetConfig+0x2e0>
 8006672:	4b18      	ldr	r3, [pc, #96]	@ (80066d4 <UART_SetConfig+0x2cc>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006678:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800667c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006680:	d01a      	beq.n	80066b8 <UART_SetConfig+0x2b0>
 8006682:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006686:	d81b      	bhi.n	80066c0 <UART_SetConfig+0x2b8>
 8006688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800668c:	d00c      	beq.n	80066a8 <UART_SetConfig+0x2a0>
 800668e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006692:	d815      	bhi.n	80066c0 <UART_SetConfig+0x2b8>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <UART_SetConfig+0x298>
 8006698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669c:	d008      	beq.n	80066b0 <UART_SetConfig+0x2a8>
 800669e:	e00f      	b.n	80066c0 <UART_SetConfig+0x2b8>
 80066a0:	2300      	movs	r3, #0
 80066a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a6:	e022      	b.n	80066ee <UART_SetConfig+0x2e6>
 80066a8:	2302      	movs	r3, #2
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ae:	e01e      	b.n	80066ee <UART_SetConfig+0x2e6>
 80066b0:	2304      	movs	r3, #4
 80066b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b6:	e01a      	b.n	80066ee <UART_SetConfig+0x2e6>
 80066b8:	2308      	movs	r3, #8
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066be:	e016      	b.n	80066ee <UART_SetConfig+0x2e6>
 80066c0:	2310      	movs	r3, #16
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c6:	e012      	b.n	80066ee <UART_SetConfig+0x2e6>
 80066c8:	efff69f3 	.word	0xefff69f3
 80066cc:	40008000 	.word	0x40008000
 80066d0:	40013800 	.word	0x40013800
 80066d4:	40021000 	.word	0x40021000
 80066d8:	40004400 	.word	0x40004400
 80066dc:	40004800 	.word	0x40004800
 80066e0:	40004c00 	.word	0x40004c00
 80066e4:	40005000 	.word	0x40005000
 80066e8:	2310      	movs	r3, #16
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a9f      	ldr	r2, [pc, #636]	@ (8006970 <UART_SetConfig+0x568>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d17a      	bne.n	80067ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d824      	bhi.n	800674a <UART_SetConfig+0x342>
 8006700:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <UART_SetConfig+0x300>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	0800672d 	.word	0x0800672d
 800670c:	0800674b 	.word	0x0800674b
 8006710:	08006735 	.word	0x08006735
 8006714:	0800674b 	.word	0x0800674b
 8006718:	0800673b 	.word	0x0800673b
 800671c:	0800674b 	.word	0x0800674b
 8006720:	0800674b 	.word	0x0800674b
 8006724:	0800674b 	.word	0x0800674b
 8006728:	08006743 	.word	0x08006743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800672c:	f7fc fed2 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8006730:	61f8      	str	r0, [r7, #28]
        break;
 8006732:	e010      	b.n	8006756 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006734:	4b8f      	ldr	r3, [pc, #572]	@ (8006974 <UART_SetConfig+0x56c>)
 8006736:	61fb      	str	r3, [r7, #28]
        break;
 8006738:	e00d      	b.n	8006756 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800673a:	f7fc fe33 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 800673e:	61f8      	str	r0, [r7, #28]
        break;
 8006740:	e009      	b.n	8006756 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006746:	61fb      	str	r3, [r7, #28]
        break;
 8006748:	e005      	b.n	8006756 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006754:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80fb 	beq.w	8006954 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	4413      	add	r3, r2
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	429a      	cmp	r2, r3
 800676c:	d305      	bcc.n	800677a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	429a      	cmp	r2, r3
 8006778:	d903      	bls.n	8006782 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006780:	e0e8      	b.n	8006954 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	2200      	movs	r2, #0
 8006786:	461c      	mov	r4, r3
 8006788:	4615      	mov	r5, r2
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	022b      	lsls	r3, r5, #8
 8006794:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006798:	0222      	lsls	r2, r4, #8
 800679a:	68f9      	ldr	r1, [r7, #12]
 800679c:	6849      	ldr	r1, [r1, #4]
 800679e:	0849      	lsrs	r1, r1, #1
 80067a0:	2000      	movs	r0, #0
 80067a2:	4688      	mov	r8, r1
 80067a4:	4681      	mov	r9, r0
 80067a6:	eb12 0a08 	adds.w	sl, r2, r8
 80067aa:	eb43 0b09 	adc.w	fp, r3, r9
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	603b      	str	r3, [r7, #0]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067bc:	4650      	mov	r0, sl
 80067be:	4659      	mov	r1, fp
 80067c0:	f7f9 fd56 	bl	8000270 <__aeabi_uldivmod>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4613      	mov	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067d2:	d308      	bcc.n	80067e6 <UART_SetConfig+0x3de>
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067da:	d204      	bcs.n	80067e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	60da      	str	r2, [r3, #12]
 80067e4:	e0b6      	b.n	8006954 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067ec:	e0b2      	b.n	8006954 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067f6:	d15e      	bne.n	80068b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80067f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d828      	bhi.n	8006852 <UART_SetConfig+0x44a>
 8006800:	a201      	add	r2, pc, #4	@ (adr r2, 8006808 <UART_SetConfig+0x400>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	0800682d 	.word	0x0800682d
 800680c:	08006835 	.word	0x08006835
 8006810:	0800683d 	.word	0x0800683d
 8006814:	08006853 	.word	0x08006853
 8006818:	08006843 	.word	0x08006843
 800681c:	08006853 	.word	0x08006853
 8006820:	08006853 	.word	0x08006853
 8006824:	08006853 	.word	0x08006853
 8006828:	0800684b 	.word	0x0800684b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800682c:	f7fc fe52 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8006830:	61f8      	str	r0, [r7, #28]
        break;
 8006832:	e014      	b.n	800685e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006834:	f7fc fe64 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8006838:	61f8      	str	r0, [r7, #28]
        break;
 800683a:	e010      	b.n	800685e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800683c:	4b4d      	ldr	r3, [pc, #308]	@ (8006974 <UART_SetConfig+0x56c>)
 800683e:	61fb      	str	r3, [r7, #28]
        break;
 8006840:	e00d      	b.n	800685e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006842:	f7fc fdaf 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8006846:	61f8      	str	r0, [r7, #28]
        break;
 8006848:	e009      	b.n	800685e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800684e:	61fb      	str	r3, [r7, #28]
        break;
 8006850:	e005      	b.n	800685e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800685c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d077      	beq.n	8006954 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	005a      	lsls	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	085b      	lsrs	r3, r3, #1
 800686e:	441a      	add	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	2b0f      	cmp	r3, #15
 800687e:	d916      	bls.n	80068ae <UART_SetConfig+0x4a6>
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006886:	d212      	bcs.n	80068ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f023 030f 	bic.w	r3, r3, #15
 8006890:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	085b      	lsrs	r3, r3, #1
 8006896:	b29b      	uxth	r3, r3
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	b29a      	uxth	r2, r3
 800689e:	8afb      	ldrh	r3, [r7, #22]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	8afa      	ldrh	r2, [r7, #22]
 80068aa:	60da      	str	r2, [r3, #12]
 80068ac:	e052      	b.n	8006954 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068b4:	e04e      	b.n	8006954 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068ba:	2b08      	cmp	r3, #8
 80068bc:	d827      	bhi.n	800690e <UART_SetConfig+0x506>
 80068be:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <UART_SetConfig+0x4bc>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	080068e9 	.word	0x080068e9
 80068c8:	080068f1 	.word	0x080068f1
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	0800690f 	.word	0x0800690f
 80068d4:	080068ff 	.word	0x080068ff
 80068d8:	0800690f 	.word	0x0800690f
 80068dc:	0800690f 	.word	0x0800690f
 80068e0:	0800690f 	.word	0x0800690f
 80068e4:	08006907 	.word	0x08006907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e8:	f7fc fdf4 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 80068ec:	61f8      	str	r0, [r7, #28]
        break;
 80068ee:	e014      	b.n	800691a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f0:	f7fc fe06 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 80068f4:	61f8      	str	r0, [r7, #28]
        break;
 80068f6:	e010      	b.n	800691a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006974 <UART_SetConfig+0x56c>)
 80068fa:	61fb      	str	r3, [r7, #28]
        break;
 80068fc:	e00d      	b.n	800691a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068fe:	f7fc fd51 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8006902:	61f8      	str	r0, [r7, #28]
        break;
 8006904:	e009      	b.n	800691a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800690a:	61fb      	str	r3, [r7, #28]
        break;
 800690c:	e005      	b.n	800691a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006918:	bf00      	nop
    }

    if (pclk != 0U)
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d019      	beq.n	8006954 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	085a      	lsrs	r2, r3, #1
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	441a      	add	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006932:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b0f      	cmp	r3, #15
 8006938:	d909      	bls.n	800694e <UART_SetConfig+0x546>
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006940:	d205      	bcs.n	800694e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60da      	str	r2, [r3, #12]
 800694c:	e002      	b.n	8006954 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006960:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006964:	4618      	mov	r0, r3
 8006966:	3728      	adds	r7, #40	@ 0x28
 8006968:	46bd      	mov	sp, r7
 800696a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800696e:	bf00      	nop
 8006970:	40008000 	.word	0x40008000
 8006974:	00f42400 	.word	0x00f42400

08006978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01a      	beq.n	8006a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a76:	d10a      	bne.n	8006a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b098      	sub	sp, #96	@ 0x60
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006acc:	f7fa fcda 	bl	8001484 <HAL_GetTick>
 8006ad0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d12e      	bne.n	8006b3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f88c 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d021      	beq.n	8006b3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e062      	b.n	8006c04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d149      	bne.n	8006be0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b54:	2200      	movs	r2, #0
 8006b56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f856 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d03c      	beq.n	8006be0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	623b      	str	r3, [r7, #32]
   return(result);
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e6      	bne.n	8006b66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0301 	bic.w	r3, r3, #1
 8006bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bb8:	61fa      	str	r2, [r7, #28]
 8006bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	69b9      	ldr	r1, [r7, #24]
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e5      	bne.n	8006b98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e011      	b.n	8006c04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3758      	adds	r7, #88	@ 0x58
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1c:	e04f      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c24:	d04b      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c26:	f7fa fc2d 	bl	8001484 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d302      	bcc.n	8006c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e04e      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d037      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b80      	cmp	r3, #128	@ 0x80
 8006c52:	d034      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b40      	cmp	r3, #64	@ 0x40
 8006c58:	d031      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d110      	bne.n	8006c8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f838 	bl	8006ce6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2208      	movs	r2, #8
 8006c7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e029      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c98:	d111      	bne.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f81e 	bl	8006ce6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e00f      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	bf0c      	ite	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	2300      	movne	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d0a0      	beq.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b095      	sub	sp, #84	@ 0x54
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e6      	bne.n	8006cee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3308      	adds	r3, #8
 8006d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	f023 0301 	bic.w	r3, r3, #1
 8006d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e5      	bne.n	8006d20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d118      	bne.n	8006d8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f023 0310 	bic.w	r3, r3, #16
 8006d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6979      	ldr	r1, [r7, #20]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	613b      	str	r3, [r7, #16]
   return(result);
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e6      	bne.n	8006d5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006da2:	bf00      	nop
 8006da4:	3754      	adds	r7, #84	@ 0x54
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <std>:
 8006db0:	2300      	movs	r3, #0
 8006db2:	b510      	push	{r4, lr}
 8006db4:	4604      	mov	r4, r0
 8006db6:	e9c0 3300 	strd	r3, r3, [r0]
 8006dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dbe:	6083      	str	r3, [r0, #8]
 8006dc0:	8181      	strh	r1, [r0, #12]
 8006dc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dc4:	81c2      	strh	r2, [r0, #14]
 8006dc6:	6183      	str	r3, [r0, #24]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	2208      	movs	r2, #8
 8006dcc:	305c      	adds	r0, #92	@ 0x5c
 8006dce:	f000 f9f9 	bl	80071c4 <memset>
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e08 <std+0x58>)
 8006dd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e0c <std+0x5c>)
 8006dd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <std+0x60>)
 8006ddc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dde:	4b0d      	ldr	r3, [pc, #52]	@ (8006e14 <std+0x64>)
 8006de0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006de2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e18 <std+0x68>)
 8006de4:	6224      	str	r4, [r4, #32]
 8006de6:	429c      	cmp	r4, r3
 8006de8:	d006      	beq.n	8006df8 <std+0x48>
 8006dea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dee:	4294      	cmp	r4, r2
 8006df0:	d002      	beq.n	8006df8 <std+0x48>
 8006df2:	33d0      	adds	r3, #208	@ 0xd0
 8006df4:	429c      	cmp	r4, r3
 8006df6:	d105      	bne.n	8006e04 <std+0x54>
 8006df8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e00:	f000 ba58 	b.w	80072b4 <__retarget_lock_init_recursive>
 8006e04:	bd10      	pop	{r4, pc}
 8006e06:	bf00      	nop
 8006e08:	08007015 	.word	0x08007015
 8006e0c:	08007037 	.word	0x08007037
 8006e10:	0800706f 	.word	0x0800706f
 8006e14:	08007093 	.word	0x08007093
 8006e18:	20001374 	.word	0x20001374

08006e1c <stdio_exit_handler>:
 8006e1c:	4a02      	ldr	r2, [pc, #8]	@ (8006e28 <stdio_exit_handler+0xc>)
 8006e1e:	4903      	ldr	r1, [pc, #12]	@ (8006e2c <stdio_exit_handler+0x10>)
 8006e20:	4803      	ldr	r0, [pc, #12]	@ (8006e30 <stdio_exit_handler+0x14>)
 8006e22:	f000 b869 	b.w	8006ef8 <_fwalk_sglue>
 8006e26:	bf00      	nop
 8006e28:	2000000c 	.word	0x2000000c
 8006e2c:	08007b51 	.word	0x08007b51
 8006e30:	2000001c 	.word	0x2000001c

08006e34 <cleanup_stdio>:
 8006e34:	6841      	ldr	r1, [r0, #4]
 8006e36:	4b0c      	ldr	r3, [pc, #48]	@ (8006e68 <cleanup_stdio+0x34>)
 8006e38:	4299      	cmp	r1, r3
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	d001      	beq.n	8006e44 <cleanup_stdio+0x10>
 8006e40:	f000 fe86 	bl	8007b50 <_fflush_r>
 8006e44:	68a1      	ldr	r1, [r4, #8]
 8006e46:	4b09      	ldr	r3, [pc, #36]	@ (8006e6c <cleanup_stdio+0x38>)
 8006e48:	4299      	cmp	r1, r3
 8006e4a:	d002      	beq.n	8006e52 <cleanup_stdio+0x1e>
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 fe7f 	bl	8007b50 <_fflush_r>
 8006e52:	68e1      	ldr	r1, [r4, #12]
 8006e54:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <cleanup_stdio+0x3c>)
 8006e56:	4299      	cmp	r1, r3
 8006e58:	d004      	beq.n	8006e64 <cleanup_stdio+0x30>
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e60:	f000 be76 	b.w	8007b50 <_fflush_r>
 8006e64:	bd10      	pop	{r4, pc}
 8006e66:	bf00      	nop
 8006e68:	20001374 	.word	0x20001374
 8006e6c:	200013dc 	.word	0x200013dc
 8006e70:	20001444 	.word	0x20001444

08006e74 <global_stdio_init.part.0>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <global_stdio_init.part.0+0x30>)
 8006e78:	4c0b      	ldr	r4, [pc, #44]	@ (8006ea8 <global_stdio_init.part.0+0x34>)
 8006e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8006eac <global_stdio_init.part.0+0x38>)
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	4620      	mov	r0, r4
 8006e80:	2200      	movs	r2, #0
 8006e82:	2104      	movs	r1, #4
 8006e84:	f7ff ff94 	bl	8006db0 <std>
 8006e88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	2109      	movs	r1, #9
 8006e90:	f7ff ff8e 	bl	8006db0 <std>
 8006e94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e98:	2202      	movs	r2, #2
 8006e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9e:	2112      	movs	r1, #18
 8006ea0:	f7ff bf86 	b.w	8006db0 <std>
 8006ea4:	200014ac 	.word	0x200014ac
 8006ea8:	20001374 	.word	0x20001374
 8006eac:	08006e1d 	.word	0x08006e1d

08006eb0 <__sfp_lock_acquire>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	@ (8006eb8 <__sfp_lock_acquire+0x8>)
 8006eb2:	f000 ba00 	b.w	80072b6 <__retarget_lock_acquire_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	200014b5 	.word	0x200014b5

08006ebc <__sfp_lock_release>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	@ (8006ec4 <__sfp_lock_release+0x8>)
 8006ebe:	f000 b9fb 	b.w	80072b8 <__retarget_lock_release_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	200014b5 	.word	0x200014b5

08006ec8 <__sinit>:
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	4604      	mov	r4, r0
 8006ecc:	f7ff fff0 	bl	8006eb0 <__sfp_lock_acquire>
 8006ed0:	6a23      	ldr	r3, [r4, #32]
 8006ed2:	b11b      	cbz	r3, 8006edc <__sinit+0x14>
 8006ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed8:	f7ff bff0 	b.w	8006ebc <__sfp_lock_release>
 8006edc:	4b04      	ldr	r3, [pc, #16]	@ (8006ef0 <__sinit+0x28>)
 8006ede:	6223      	str	r3, [r4, #32]
 8006ee0:	4b04      	ldr	r3, [pc, #16]	@ (8006ef4 <__sinit+0x2c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f5      	bne.n	8006ed4 <__sinit+0xc>
 8006ee8:	f7ff ffc4 	bl	8006e74 <global_stdio_init.part.0>
 8006eec:	e7f2      	b.n	8006ed4 <__sinit+0xc>
 8006eee:	bf00      	nop
 8006ef0:	08006e35 	.word	0x08006e35
 8006ef4:	200014ac 	.word	0x200014ac

08006ef8 <_fwalk_sglue>:
 8006ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006efc:	4607      	mov	r7, r0
 8006efe:	4688      	mov	r8, r1
 8006f00:	4614      	mov	r4, r2
 8006f02:	2600      	movs	r6, #0
 8006f04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f08:	f1b9 0901 	subs.w	r9, r9, #1
 8006f0c:	d505      	bpl.n	8006f1a <_fwalk_sglue+0x22>
 8006f0e:	6824      	ldr	r4, [r4, #0]
 8006f10:	2c00      	cmp	r4, #0
 8006f12:	d1f7      	bne.n	8006f04 <_fwalk_sglue+0xc>
 8006f14:	4630      	mov	r0, r6
 8006f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f1a:	89ab      	ldrh	r3, [r5, #12]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d907      	bls.n	8006f30 <_fwalk_sglue+0x38>
 8006f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f24:	3301      	adds	r3, #1
 8006f26:	d003      	beq.n	8006f30 <_fwalk_sglue+0x38>
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	47c0      	blx	r8
 8006f2e:	4306      	orrs	r6, r0
 8006f30:	3568      	adds	r5, #104	@ 0x68
 8006f32:	e7e9      	b.n	8006f08 <_fwalk_sglue+0x10>

08006f34 <iprintf>:
 8006f34:	b40f      	push	{r0, r1, r2, r3}
 8006f36:	b507      	push	{r0, r1, r2, lr}
 8006f38:	4906      	ldr	r1, [pc, #24]	@ (8006f54 <iprintf+0x20>)
 8006f3a:	ab04      	add	r3, sp, #16
 8006f3c:	6808      	ldr	r0, [r1, #0]
 8006f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f42:	6881      	ldr	r1, [r0, #8]
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	f000 fadb 	bl	8007500 <_vfiprintf_r>
 8006f4a:	b003      	add	sp, #12
 8006f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f50:	b004      	add	sp, #16
 8006f52:	4770      	bx	lr
 8006f54:	20000018 	.word	0x20000018

08006f58 <_puts_r>:
 8006f58:	6a03      	ldr	r3, [r0, #32]
 8006f5a:	b570      	push	{r4, r5, r6, lr}
 8006f5c:	6884      	ldr	r4, [r0, #8]
 8006f5e:	4605      	mov	r5, r0
 8006f60:	460e      	mov	r6, r1
 8006f62:	b90b      	cbnz	r3, 8006f68 <_puts_r+0x10>
 8006f64:	f7ff ffb0 	bl	8006ec8 <__sinit>
 8006f68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f6a:	07db      	lsls	r3, r3, #31
 8006f6c:	d405      	bmi.n	8006f7a <_puts_r+0x22>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	0598      	lsls	r0, r3, #22
 8006f72:	d402      	bmi.n	8006f7a <_puts_r+0x22>
 8006f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f76:	f000 f99e 	bl	80072b6 <__retarget_lock_acquire_recursive>
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	0719      	lsls	r1, r3, #28
 8006f7e:	d502      	bpl.n	8006f86 <_puts_r+0x2e>
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d135      	bne.n	8006ff2 <_puts_r+0x9a>
 8006f86:	4621      	mov	r1, r4
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f000 f8c5 	bl	8007118 <__swsetup_r>
 8006f8e:	b380      	cbz	r0, 8006ff2 <_puts_r+0x9a>
 8006f90:	f04f 35ff 	mov.w	r5, #4294967295
 8006f94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f96:	07da      	lsls	r2, r3, #31
 8006f98:	d405      	bmi.n	8006fa6 <_puts_r+0x4e>
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	059b      	lsls	r3, r3, #22
 8006f9e:	d402      	bmi.n	8006fa6 <_puts_r+0x4e>
 8006fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fa2:	f000 f989 	bl	80072b8 <__retarget_lock_release_recursive>
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	da04      	bge.n	8006fb8 <_puts_r+0x60>
 8006fae:	69a2      	ldr	r2, [r4, #24]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	dc17      	bgt.n	8006fe4 <_puts_r+0x8c>
 8006fb4:	290a      	cmp	r1, #10
 8006fb6:	d015      	beq.n	8006fe4 <_puts_r+0x8c>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	6022      	str	r2, [r4, #0]
 8006fbe:	7019      	strb	r1, [r3, #0]
 8006fc0:	68a3      	ldr	r3, [r4, #8]
 8006fc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	60a3      	str	r3, [r4, #8]
 8006fca:	2900      	cmp	r1, #0
 8006fcc:	d1ed      	bne.n	8006faa <_puts_r+0x52>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da11      	bge.n	8006ff6 <_puts_r+0x9e>
 8006fd2:	4622      	mov	r2, r4
 8006fd4:	210a      	movs	r1, #10
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f000 f85f 	bl	800709a <__swbuf_r>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d0d7      	beq.n	8006f90 <_puts_r+0x38>
 8006fe0:	250a      	movs	r5, #10
 8006fe2:	e7d7      	b.n	8006f94 <_puts_r+0x3c>
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 f857 	bl	800709a <__swbuf_r>
 8006fec:	3001      	adds	r0, #1
 8006fee:	d1e7      	bne.n	8006fc0 <_puts_r+0x68>
 8006ff0:	e7ce      	b.n	8006f90 <_puts_r+0x38>
 8006ff2:	3e01      	subs	r6, #1
 8006ff4:	e7e4      	b.n	8006fc0 <_puts_r+0x68>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	6022      	str	r2, [r4, #0]
 8006ffc:	220a      	movs	r2, #10
 8006ffe:	701a      	strb	r2, [r3, #0]
 8007000:	e7ee      	b.n	8006fe0 <_puts_r+0x88>
	...

08007004 <puts>:
 8007004:	4b02      	ldr	r3, [pc, #8]	@ (8007010 <puts+0xc>)
 8007006:	4601      	mov	r1, r0
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	f7ff bfa5 	b.w	8006f58 <_puts_r>
 800700e:	bf00      	nop
 8007010:	20000018 	.word	0x20000018

08007014 <__sread>:
 8007014:	b510      	push	{r4, lr}
 8007016:	460c      	mov	r4, r1
 8007018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701c:	f000 f8fc 	bl	8007218 <_read_r>
 8007020:	2800      	cmp	r0, #0
 8007022:	bfab      	itete	ge
 8007024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007026:	89a3      	ldrhlt	r3, [r4, #12]
 8007028:	181b      	addge	r3, r3, r0
 800702a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800702e:	bfac      	ite	ge
 8007030:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007032:	81a3      	strhlt	r3, [r4, #12]
 8007034:	bd10      	pop	{r4, pc}

08007036 <__swrite>:
 8007036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703a:	461f      	mov	r7, r3
 800703c:	898b      	ldrh	r3, [r1, #12]
 800703e:	05db      	lsls	r3, r3, #23
 8007040:	4605      	mov	r5, r0
 8007042:	460c      	mov	r4, r1
 8007044:	4616      	mov	r6, r2
 8007046:	d505      	bpl.n	8007054 <__swrite+0x1e>
 8007048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704c:	2302      	movs	r3, #2
 800704e:	2200      	movs	r2, #0
 8007050:	f000 f8d0 	bl	80071f4 <_lseek_r>
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800705a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800705e:	81a3      	strh	r3, [r4, #12]
 8007060:	4632      	mov	r2, r6
 8007062:	463b      	mov	r3, r7
 8007064:	4628      	mov	r0, r5
 8007066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800706a:	f000 b8e7 	b.w	800723c <_write_r>

0800706e <__sseek>:
 800706e:	b510      	push	{r4, lr}
 8007070:	460c      	mov	r4, r1
 8007072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007076:	f000 f8bd 	bl	80071f4 <_lseek_r>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	bf15      	itete	ne
 8007080:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007082:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007086:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800708a:	81a3      	strheq	r3, [r4, #12]
 800708c:	bf18      	it	ne
 800708e:	81a3      	strhne	r3, [r4, #12]
 8007090:	bd10      	pop	{r4, pc}

08007092 <__sclose>:
 8007092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007096:	f000 b89d 	b.w	80071d4 <_close_r>

0800709a <__swbuf_r>:
 800709a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709c:	460e      	mov	r6, r1
 800709e:	4614      	mov	r4, r2
 80070a0:	4605      	mov	r5, r0
 80070a2:	b118      	cbz	r0, 80070ac <__swbuf_r+0x12>
 80070a4:	6a03      	ldr	r3, [r0, #32]
 80070a6:	b90b      	cbnz	r3, 80070ac <__swbuf_r+0x12>
 80070a8:	f7ff ff0e 	bl	8006ec8 <__sinit>
 80070ac:	69a3      	ldr	r3, [r4, #24]
 80070ae:	60a3      	str	r3, [r4, #8]
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	071a      	lsls	r2, r3, #28
 80070b4:	d501      	bpl.n	80070ba <__swbuf_r+0x20>
 80070b6:	6923      	ldr	r3, [r4, #16]
 80070b8:	b943      	cbnz	r3, 80070cc <__swbuf_r+0x32>
 80070ba:	4621      	mov	r1, r4
 80070bc:	4628      	mov	r0, r5
 80070be:	f000 f82b 	bl	8007118 <__swsetup_r>
 80070c2:	b118      	cbz	r0, 80070cc <__swbuf_r+0x32>
 80070c4:	f04f 37ff 	mov.w	r7, #4294967295
 80070c8:	4638      	mov	r0, r7
 80070ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	6922      	ldr	r2, [r4, #16]
 80070d0:	1a98      	subs	r0, r3, r2
 80070d2:	6963      	ldr	r3, [r4, #20]
 80070d4:	b2f6      	uxtb	r6, r6
 80070d6:	4283      	cmp	r3, r0
 80070d8:	4637      	mov	r7, r6
 80070da:	dc05      	bgt.n	80070e8 <__swbuf_r+0x4e>
 80070dc:	4621      	mov	r1, r4
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 fd36 	bl	8007b50 <_fflush_r>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d1ed      	bne.n	80070c4 <__swbuf_r+0x2a>
 80070e8:	68a3      	ldr	r3, [r4, #8]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	60a3      	str	r3, [r4, #8]
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	6022      	str	r2, [r4, #0]
 80070f4:	701e      	strb	r6, [r3, #0]
 80070f6:	6962      	ldr	r2, [r4, #20]
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d004      	beq.n	8007108 <__swbuf_r+0x6e>
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	07db      	lsls	r3, r3, #31
 8007102:	d5e1      	bpl.n	80070c8 <__swbuf_r+0x2e>
 8007104:	2e0a      	cmp	r6, #10
 8007106:	d1df      	bne.n	80070c8 <__swbuf_r+0x2e>
 8007108:	4621      	mov	r1, r4
 800710a:	4628      	mov	r0, r5
 800710c:	f000 fd20 	bl	8007b50 <_fflush_r>
 8007110:	2800      	cmp	r0, #0
 8007112:	d0d9      	beq.n	80070c8 <__swbuf_r+0x2e>
 8007114:	e7d6      	b.n	80070c4 <__swbuf_r+0x2a>
	...

08007118 <__swsetup_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4b29      	ldr	r3, [pc, #164]	@ (80071c0 <__swsetup_r+0xa8>)
 800711c:	4605      	mov	r5, r0
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	460c      	mov	r4, r1
 8007122:	b118      	cbz	r0, 800712c <__swsetup_r+0x14>
 8007124:	6a03      	ldr	r3, [r0, #32]
 8007126:	b90b      	cbnz	r3, 800712c <__swsetup_r+0x14>
 8007128:	f7ff fece 	bl	8006ec8 <__sinit>
 800712c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007130:	0719      	lsls	r1, r3, #28
 8007132:	d422      	bmi.n	800717a <__swsetup_r+0x62>
 8007134:	06da      	lsls	r2, r3, #27
 8007136:	d407      	bmi.n	8007148 <__swsetup_r+0x30>
 8007138:	2209      	movs	r2, #9
 800713a:	602a      	str	r2, [r5, #0]
 800713c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	f04f 30ff 	mov.w	r0, #4294967295
 8007146:	e033      	b.n	80071b0 <__swsetup_r+0x98>
 8007148:	0758      	lsls	r0, r3, #29
 800714a:	d512      	bpl.n	8007172 <__swsetup_r+0x5a>
 800714c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800714e:	b141      	cbz	r1, 8007162 <__swsetup_r+0x4a>
 8007150:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007154:	4299      	cmp	r1, r3
 8007156:	d002      	beq.n	800715e <__swsetup_r+0x46>
 8007158:	4628      	mov	r0, r5
 800715a:	f000 f8af 	bl	80072bc <_free_r>
 800715e:	2300      	movs	r3, #0
 8007160:	6363      	str	r3, [r4, #52]	@ 0x34
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	2300      	movs	r3, #0
 800716c:	6063      	str	r3, [r4, #4]
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	f043 0308 	orr.w	r3, r3, #8
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	b94b      	cbnz	r3, 8007192 <__swsetup_r+0x7a>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007188:	d003      	beq.n	8007192 <__swsetup_r+0x7a>
 800718a:	4621      	mov	r1, r4
 800718c:	4628      	mov	r0, r5
 800718e:	f000 fd2d 	bl	8007bec <__smakebuf_r>
 8007192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007196:	f013 0201 	ands.w	r2, r3, #1
 800719a:	d00a      	beq.n	80071b2 <__swsetup_r+0x9a>
 800719c:	2200      	movs	r2, #0
 800719e:	60a2      	str	r2, [r4, #8]
 80071a0:	6962      	ldr	r2, [r4, #20]
 80071a2:	4252      	negs	r2, r2
 80071a4:	61a2      	str	r2, [r4, #24]
 80071a6:	6922      	ldr	r2, [r4, #16]
 80071a8:	b942      	cbnz	r2, 80071bc <__swsetup_r+0xa4>
 80071aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071ae:	d1c5      	bne.n	800713c <__swsetup_r+0x24>
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
 80071b2:	0799      	lsls	r1, r3, #30
 80071b4:	bf58      	it	pl
 80071b6:	6962      	ldrpl	r2, [r4, #20]
 80071b8:	60a2      	str	r2, [r4, #8]
 80071ba:	e7f4      	b.n	80071a6 <__swsetup_r+0x8e>
 80071bc:	2000      	movs	r0, #0
 80071be:	e7f7      	b.n	80071b0 <__swsetup_r+0x98>
 80071c0:	20000018 	.word	0x20000018

080071c4 <memset>:
 80071c4:	4402      	add	r2, r0
 80071c6:	4603      	mov	r3, r0
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d100      	bne.n	80071ce <memset+0xa>
 80071cc:	4770      	bx	lr
 80071ce:	f803 1b01 	strb.w	r1, [r3], #1
 80071d2:	e7f9      	b.n	80071c8 <memset+0x4>

080071d4 <_close_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4d06      	ldr	r5, [pc, #24]	@ (80071f0 <_close_r+0x1c>)
 80071d8:	2300      	movs	r3, #0
 80071da:	4604      	mov	r4, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	f7f9 ffad 	bl	800113e <_close>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_close_r+0x1a>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_close_r+0x1a>
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	200014b0 	.word	0x200014b0

080071f4 <_lseek_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d07      	ldr	r5, [pc, #28]	@ (8007214 <_lseek_r+0x20>)
 80071f8:	4604      	mov	r4, r0
 80071fa:	4608      	mov	r0, r1
 80071fc:	4611      	mov	r1, r2
 80071fe:	2200      	movs	r2, #0
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	f7f9 ffc2 	bl	800118c <_lseek>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d102      	bne.n	8007212 <_lseek_r+0x1e>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	b103      	cbz	r3, 8007212 <_lseek_r+0x1e>
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	200014b0 	.word	0x200014b0

08007218 <_read_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d07      	ldr	r5, [pc, #28]	@ (8007238 <_read_r+0x20>)
 800721c:	4604      	mov	r4, r0
 800721e:	4608      	mov	r0, r1
 8007220:	4611      	mov	r1, r2
 8007222:	2200      	movs	r2, #0
 8007224:	602a      	str	r2, [r5, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	f7f9 ff50 	bl	80010cc <_read>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_read_r+0x1e>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_read_r+0x1e>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	200014b0 	.word	0x200014b0

0800723c <_write_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d07      	ldr	r5, [pc, #28]	@ (800725c <_write_r+0x20>)
 8007240:	4604      	mov	r4, r0
 8007242:	4608      	mov	r0, r1
 8007244:	4611      	mov	r1, r2
 8007246:	2200      	movs	r2, #0
 8007248:	602a      	str	r2, [r5, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	f7f9 ff5b 	bl	8001106 <_write>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d102      	bne.n	800725a <_write_r+0x1e>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	b103      	cbz	r3, 800725a <_write_r+0x1e>
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	200014b0 	.word	0x200014b0

08007260 <__errno>:
 8007260:	4b01      	ldr	r3, [pc, #4]	@ (8007268 <__errno+0x8>)
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000018 	.word	0x20000018

0800726c <__libc_init_array>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4d0d      	ldr	r5, [pc, #52]	@ (80072a4 <__libc_init_array+0x38>)
 8007270:	4c0d      	ldr	r4, [pc, #52]	@ (80072a8 <__libc_init_array+0x3c>)
 8007272:	1b64      	subs	r4, r4, r5
 8007274:	10a4      	asrs	r4, r4, #2
 8007276:	2600      	movs	r6, #0
 8007278:	42a6      	cmp	r6, r4
 800727a:	d109      	bne.n	8007290 <__libc_init_array+0x24>
 800727c:	4d0b      	ldr	r5, [pc, #44]	@ (80072ac <__libc_init_array+0x40>)
 800727e:	4c0c      	ldr	r4, [pc, #48]	@ (80072b0 <__libc_init_array+0x44>)
 8007280:	f000 fd22 	bl	8007cc8 <_init>
 8007284:	1b64      	subs	r4, r4, r5
 8007286:	10a4      	asrs	r4, r4, #2
 8007288:	2600      	movs	r6, #0
 800728a:	42a6      	cmp	r6, r4
 800728c:	d105      	bne.n	800729a <__libc_init_array+0x2e>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f855 3b04 	ldr.w	r3, [r5], #4
 8007294:	4798      	blx	r3
 8007296:	3601      	adds	r6, #1
 8007298:	e7ee      	b.n	8007278 <__libc_init_array+0xc>
 800729a:	f855 3b04 	ldr.w	r3, [r5], #4
 800729e:	4798      	blx	r3
 80072a0:	3601      	adds	r6, #1
 80072a2:	e7f2      	b.n	800728a <__libc_init_array+0x1e>
 80072a4:	08007e14 	.word	0x08007e14
 80072a8:	08007e14 	.word	0x08007e14
 80072ac:	08007e14 	.word	0x08007e14
 80072b0:	08007e18 	.word	0x08007e18

080072b4 <__retarget_lock_init_recursive>:
 80072b4:	4770      	bx	lr

080072b6 <__retarget_lock_acquire_recursive>:
 80072b6:	4770      	bx	lr

080072b8 <__retarget_lock_release_recursive>:
 80072b8:	4770      	bx	lr
	...

080072bc <_free_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4605      	mov	r5, r0
 80072c0:	2900      	cmp	r1, #0
 80072c2:	d041      	beq.n	8007348 <_free_r+0x8c>
 80072c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c8:	1f0c      	subs	r4, r1, #4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	bfb8      	it	lt
 80072ce:	18e4      	addlt	r4, r4, r3
 80072d0:	f000 f8e0 	bl	8007494 <__malloc_lock>
 80072d4:	4a1d      	ldr	r2, [pc, #116]	@ (800734c <_free_r+0x90>)
 80072d6:	6813      	ldr	r3, [r2, #0]
 80072d8:	b933      	cbnz	r3, 80072e8 <_free_r+0x2c>
 80072da:	6063      	str	r3, [r4, #4]
 80072dc:	6014      	str	r4, [r2, #0]
 80072de:	4628      	mov	r0, r5
 80072e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e4:	f000 b8dc 	b.w	80074a0 <__malloc_unlock>
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d908      	bls.n	80072fe <_free_r+0x42>
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	1821      	adds	r1, r4, r0
 80072f0:	428b      	cmp	r3, r1
 80072f2:	bf01      	itttt	eq
 80072f4:	6819      	ldreq	r1, [r3, #0]
 80072f6:	685b      	ldreq	r3, [r3, #4]
 80072f8:	1809      	addeq	r1, r1, r0
 80072fa:	6021      	streq	r1, [r4, #0]
 80072fc:	e7ed      	b.n	80072da <_free_r+0x1e>
 80072fe:	461a      	mov	r2, r3
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	b10b      	cbz	r3, 8007308 <_free_r+0x4c>
 8007304:	42a3      	cmp	r3, r4
 8007306:	d9fa      	bls.n	80072fe <_free_r+0x42>
 8007308:	6811      	ldr	r1, [r2, #0]
 800730a:	1850      	adds	r0, r2, r1
 800730c:	42a0      	cmp	r0, r4
 800730e:	d10b      	bne.n	8007328 <_free_r+0x6c>
 8007310:	6820      	ldr	r0, [r4, #0]
 8007312:	4401      	add	r1, r0
 8007314:	1850      	adds	r0, r2, r1
 8007316:	4283      	cmp	r3, r0
 8007318:	6011      	str	r1, [r2, #0]
 800731a:	d1e0      	bne.n	80072de <_free_r+0x22>
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	6053      	str	r3, [r2, #4]
 8007322:	4408      	add	r0, r1
 8007324:	6010      	str	r0, [r2, #0]
 8007326:	e7da      	b.n	80072de <_free_r+0x22>
 8007328:	d902      	bls.n	8007330 <_free_r+0x74>
 800732a:	230c      	movs	r3, #12
 800732c:	602b      	str	r3, [r5, #0]
 800732e:	e7d6      	b.n	80072de <_free_r+0x22>
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	1821      	adds	r1, r4, r0
 8007334:	428b      	cmp	r3, r1
 8007336:	bf04      	itt	eq
 8007338:	6819      	ldreq	r1, [r3, #0]
 800733a:	685b      	ldreq	r3, [r3, #4]
 800733c:	6063      	str	r3, [r4, #4]
 800733e:	bf04      	itt	eq
 8007340:	1809      	addeq	r1, r1, r0
 8007342:	6021      	streq	r1, [r4, #0]
 8007344:	6054      	str	r4, [r2, #4]
 8007346:	e7ca      	b.n	80072de <_free_r+0x22>
 8007348:	bd38      	pop	{r3, r4, r5, pc}
 800734a:	bf00      	nop
 800734c:	200014bc 	.word	0x200014bc

08007350 <sbrk_aligned>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	4e0f      	ldr	r6, [pc, #60]	@ (8007390 <sbrk_aligned+0x40>)
 8007354:	460c      	mov	r4, r1
 8007356:	6831      	ldr	r1, [r6, #0]
 8007358:	4605      	mov	r5, r0
 800735a:	b911      	cbnz	r1, 8007362 <sbrk_aligned+0x12>
 800735c:	f000 fca4 	bl	8007ca8 <_sbrk_r>
 8007360:	6030      	str	r0, [r6, #0]
 8007362:	4621      	mov	r1, r4
 8007364:	4628      	mov	r0, r5
 8007366:	f000 fc9f 	bl	8007ca8 <_sbrk_r>
 800736a:	1c43      	adds	r3, r0, #1
 800736c:	d103      	bne.n	8007376 <sbrk_aligned+0x26>
 800736e:	f04f 34ff 	mov.w	r4, #4294967295
 8007372:	4620      	mov	r0, r4
 8007374:	bd70      	pop	{r4, r5, r6, pc}
 8007376:	1cc4      	adds	r4, r0, #3
 8007378:	f024 0403 	bic.w	r4, r4, #3
 800737c:	42a0      	cmp	r0, r4
 800737e:	d0f8      	beq.n	8007372 <sbrk_aligned+0x22>
 8007380:	1a21      	subs	r1, r4, r0
 8007382:	4628      	mov	r0, r5
 8007384:	f000 fc90 	bl	8007ca8 <_sbrk_r>
 8007388:	3001      	adds	r0, #1
 800738a:	d1f2      	bne.n	8007372 <sbrk_aligned+0x22>
 800738c:	e7ef      	b.n	800736e <sbrk_aligned+0x1e>
 800738e:	bf00      	nop
 8007390:	200014b8 	.word	0x200014b8

08007394 <_malloc_r>:
 8007394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007398:	1ccd      	adds	r5, r1, #3
 800739a:	f025 0503 	bic.w	r5, r5, #3
 800739e:	3508      	adds	r5, #8
 80073a0:	2d0c      	cmp	r5, #12
 80073a2:	bf38      	it	cc
 80073a4:	250c      	movcc	r5, #12
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	4606      	mov	r6, r0
 80073aa:	db01      	blt.n	80073b0 <_malloc_r+0x1c>
 80073ac:	42a9      	cmp	r1, r5
 80073ae:	d904      	bls.n	80073ba <_malloc_r+0x26>
 80073b0:	230c      	movs	r3, #12
 80073b2:	6033      	str	r3, [r6, #0]
 80073b4:	2000      	movs	r0, #0
 80073b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007490 <_malloc_r+0xfc>
 80073be:	f000 f869 	bl	8007494 <__malloc_lock>
 80073c2:	f8d8 3000 	ldr.w	r3, [r8]
 80073c6:	461c      	mov	r4, r3
 80073c8:	bb44      	cbnz	r4, 800741c <_malloc_r+0x88>
 80073ca:	4629      	mov	r1, r5
 80073cc:	4630      	mov	r0, r6
 80073ce:	f7ff ffbf 	bl	8007350 <sbrk_aligned>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	4604      	mov	r4, r0
 80073d6:	d158      	bne.n	800748a <_malloc_r+0xf6>
 80073d8:	f8d8 4000 	ldr.w	r4, [r8]
 80073dc:	4627      	mov	r7, r4
 80073de:	2f00      	cmp	r7, #0
 80073e0:	d143      	bne.n	800746a <_malloc_r+0xd6>
 80073e2:	2c00      	cmp	r4, #0
 80073e4:	d04b      	beq.n	800747e <_malloc_r+0xea>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	4639      	mov	r1, r7
 80073ea:	4630      	mov	r0, r6
 80073ec:	eb04 0903 	add.w	r9, r4, r3
 80073f0:	f000 fc5a 	bl	8007ca8 <_sbrk_r>
 80073f4:	4581      	cmp	r9, r0
 80073f6:	d142      	bne.n	800747e <_malloc_r+0xea>
 80073f8:	6821      	ldr	r1, [r4, #0]
 80073fa:	1a6d      	subs	r5, r5, r1
 80073fc:	4629      	mov	r1, r5
 80073fe:	4630      	mov	r0, r6
 8007400:	f7ff ffa6 	bl	8007350 <sbrk_aligned>
 8007404:	3001      	adds	r0, #1
 8007406:	d03a      	beq.n	800747e <_malloc_r+0xea>
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	442b      	add	r3, r5
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	f8d8 3000 	ldr.w	r3, [r8]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	bb62      	cbnz	r2, 8007470 <_malloc_r+0xdc>
 8007416:	f8c8 7000 	str.w	r7, [r8]
 800741a:	e00f      	b.n	800743c <_malloc_r+0xa8>
 800741c:	6822      	ldr	r2, [r4, #0]
 800741e:	1b52      	subs	r2, r2, r5
 8007420:	d420      	bmi.n	8007464 <_malloc_r+0xd0>
 8007422:	2a0b      	cmp	r2, #11
 8007424:	d917      	bls.n	8007456 <_malloc_r+0xc2>
 8007426:	1961      	adds	r1, r4, r5
 8007428:	42a3      	cmp	r3, r4
 800742a:	6025      	str	r5, [r4, #0]
 800742c:	bf18      	it	ne
 800742e:	6059      	strne	r1, [r3, #4]
 8007430:	6863      	ldr	r3, [r4, #4]
 8007432:	bf08      	it	eq
 8007434:	f8c8 1000 	streq.w	r1, [r8]
 8007438:	5162      	str	r2, [r4, r5]
 800743a:	604b      	str	r3, [r1, #4]
 800743c:	4630      	mov	r0, r6
 800743e:	f000 f82f 	bl	80074a0 <__malloc_unlock>
 8007442:	f104 000b 	add.w	r0, r4, #11
 8007446:	1d23      	adds	r3, r4, #4
 8007448:	f020 0007 	bic.w	r0, r0, #7
 800744c:	1ac2      	subs	r2, r0, r3
 800744e:	bf1c      	itt	ne
 8007450:	1a1b      	subne	r3, r3, r0
 8007452:	50a3      	strne	r3, [r4, r2]
 8007454:	e7af      	b.n	80073b6 <_malloc_r+0x22>
 8007456:	6862      	ldr	r2, [r4, #4]
 8007458:	42a3      	cmp	r3, r4
 800745a:	bf0c      	ite	eq
 800745c:	f8c8 2000 	streq.w	r2, [r8]
 8007460:	605a      	strne	r2, [r3, #4]
 8007462:	e7eb      	b.n	800743c <_malloc_r+0xa8>
 8007464:	4623      	mov	r3, r4
 8007466:	6864      	ldr	r4, [r4, #4]
 8007468:	e7ae      	b.n	80073c8 <_malloc_r+0x34>
 800746a:	463c      	mov	r4, r7
 800746c:	687f      	ldr	r7, [r7, #4]
 800746e:	e7b6      	b.n	80073de <_malloc_r+0x4a>
 8007470:	461a      	mov	r2, r3
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	42a3      	cmp	r3, r4
 8007476:	d1fb      	bne.n	8007470 <_malloc_r+0xdc>
 8007478:	2300      	movs	r3, #0
 800747a:	6053      	str	r3, [r2, #4]
 800747c:	e7de      	b.n	800743c <_malloc_r+0xa8>
 800747e:	230c      	movs	r3, #12
 8007480:	6033      	str	r3, [r6, #0]
 8007482:	4630      	mov	r0, r6
 8007484:	f000 f80c 	bl	80074a0 <__malloc_unlock>
 8007488:	e794      	b.n	80073b4 <_malloc_r+0x20>
 800748a:	6005      	str	r5, [r0, #0]
 800748c:	e7d6      	b.n	800743c <_malloc_r+0xa8>
 800748e:	bf00      	nop
 8007490:	200014bc 	.word	0x200014bc

08007494 <__malloc_lock>:
 8007494:	4801      	ldr	r0, [pc, #4]	@ (800749c <__malloc_lock+0x8>)
 8007496:	f7ff bf0e 	b.w	80072b6 <__retarget_lock_acquire_recursive>
 800749a:	bf00      	nop
 800749c:	200014b4 	.word	0x200014b4

080074a0 <__malloc_unlock>:
 80074a0:	4801      	ldr	r0, [pc, #4]	@ (80074a8 <__malloc_unlock+0x8>)
 80074a2:	f7ff bf09 	b.w	80072b8 <__retarget_lock_release_recursive>
 80074a6:	bf00      	nop
 80074a8:	200014b4 	.word	0x200014b4

080074ac <__sfputc_r>:
 80074ac:	6893      	ldr	r3, [r2, #8]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	b410      	push	{r4}
 80074b4:	6093      	str	r3, [r2, #8]
 80074b6:	da08      	bge.n	80074ca <__sfputc_r+0x1e>
 80074b8:	6994      	ldr	r4, [r2, #24]
 80074ba:	42a3      	cmp	r3, r4
 80074bc:	db01      	blt.n	80074c2 <__sfputc_r+0x16>
 80074be:	290a      	cmp	r1, #10
 80074c0:	d103      	bne.n	80074ca <__sfputc_r+0x1e>
 80074c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074c6:	f7ff bde8 	b.w	800709a <__swbuf_r>
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	1c58      	adds	r0, r3, #1
 80074ce:	6010      	str	r0, [r2, #0]
 80074d0:	7019      	strb	r1, [r3, #0]
 80074d2:	4608      	mov	r0, r1
 80074d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074d8:	4770      	bx	lr

080074da <__sfputs_r>:
 80074da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074dc:	4606      	mov	r6, r0
 80074de:	460f      	mov	r7, r1
 80074e0:	4614      	mov	r4, r2
 80074e2:	18d5      	adds	r5, r2, r3
 80074e4:	42ac      	cmp	r4, r5
 80074e6:	d101      	bne.n	80074ec <__sfputs_r+0x12>
 80074e8:	2000      	movs	r0, #0
 80074ea:	e007      	b.n	80074fc <__sfputs_r+0x22>
 80074ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f0:	463a      	mov	r2, r7
 80074f2:	4630      	mov	r0, r6
 80074f4:	f7ff ffda 	bl	80074ac <__sfputc_r>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d1f3      	bne.n	80074e4 <__sfputs_r+0xa>
 80074fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007500 <_vfiprintf_r>:
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	460d      	mov	r5, r1
 8007506:	b09d      	sub	sp, #116	@ 0x74
 8007508:	4614      	mov	r4, r2
 800750a:	4698      	mov	r8, r3
 800750c:	4606      	mov	r6, r0
 800750e:	b118      	cbz	r0, 8007518 <_vfiprintf_r+0x18>
 8007510:	6a03      	ldr	r3, [r0, #32]
 8007512:	b90b      	cbnz	r3, 8007518 <_vfiprintf_r+0x18>
 8007514:	f7ff fcd8 	bl	8006ec8 <__sinit>
 8007518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800751a:	07d9      	lsls	r1, r3, #31
 800751c:	d405      	bmi.n	800752a <_vfiprintf_r+0x2a>
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	059a      	lsls	r2, r3, #22
 8007522:	d402      	bmi.n	800752a <_vfiprintf_r+0x2a>
 8007524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007526:	f7ff fec6 	bl	80072b6 <__retarget_lock_acquire_recursive>
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	071b      	lsls	r3, r3, #28
 800752e:	d501      	bpl.n	8007534 <_vfiprintf_r+0x34>
 8007530:	692b      	ldr	r3, [r5, #16]
 8007532:	b99b      	cbnz	r3, 800755c <_vfiprintf_r+0x5c>
 8007534:	4629      	mov	r1, r5
 8007536:	4630      	mov	r0, r6
 8007538:	f7ff fdee 	bl	8007118 <__swsetup_r>
 800753c:	b170      	cbz	r0, 800755c <_vfiprintf_r+0x5c>
 800753e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007540:	07dc      	lsls	r4, r3, #31
 8007542:	d504      	bpl.n	800754e <_vfiprintf_r+0x4e>
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	b01d      	add	sp, #116	@ 0x74
 800754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754e:	89ab      	ldrh	r3, [r5, #12]
 8007550:	0598      	lsls	r0, r3, #22
 8007552:	d4f7      	bmi.n	8007544 <_vfiprintf_r+0x44>
 8007554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007556:	f7ff feaf 	bl	80072b8 <__retarget_lock_release_recursive>
 800755a:	e7f3      	b.n	8007544 <_vfiprintf_r+0x44>
 800755c:	2300      	movs	r3, #0
 800755e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007560:	2320      	movs	r3, #32
 8007562:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007566:	f8cd 800c 	str.w	r8, [sp, #12]
 800756a:	2330      	movs	r3, #48	@ 0x30
 800756c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800771c <_vfiprintf_r+0x21c>
 8007570:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007574:	f04f 0901 	mov.w	r9, #1
 8007578:	4623      	mov	r3, r4
 800757a:	469a      	mov	sl, r3
 800757c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007580:	b10a      	cbz	r2, 8007586 <_vfiprintf_r+0x86>
 8007582:	2a25      	cmp	r2, #37	@ 0x25
 8007584:	d1f9      	bne.n	800757a <_vfiprintf_r+0x7a>
 8007586:	ebba 0b04 	subs.w	fp, sl, r4
 800758a:	d00b      	beq.n	80075a4 <_vfiprintf_r+0xa4>
 800758c:	465b      	mov	r3, fp
 800758e:	4622      	mov	r2, r4
 8007590:	4629      	mov	r1, r5
 8007592:	4630      	mov	r0, r6
 8007594:	f7ff ffa1 	bl	80074da <__sfputs_r>
 8007598:	3001      	adds	r0, #1
 800759a:	f000 80a7 	beq.w	80076ec <_vfiprintf_r+0x1ec>
 800759e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a0:	445a      	add	r2, fp
 80075a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80075a4:	f89a 3000 	ldrb.w	r3, [sl]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 809f 	beq.w	80076ec <_vfiprintf_r+0x1ec>
 80075ae:	2300      	movs	r3, #0
 80075b0:	f04f 32ff 	mov.w	r2, #4294967295
 80075b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075b8:	f10a 0a01 	add.w	sl, sl, #1
 80075bc:	9304      	str	r3, [sp, #16]
 80075be:	9307      	str	r3, [sp, #28]
 80075c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80075c6:	4654      	mov	r4, sl
 80075c8:	2205      	movs	r2, #5
 80075ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ce:	4853      	ldr	r0, [pc, #332]	@ (800771c <_vfiprintf_r+0x21c>)
 80075d0:	f7f8 fdfe 	bl	80001d0 <memchr>
 80075d4:	9a04      	ldr	r2, [sp, #16]
 80075d6:	b9d8      	cbnz	r0, 8007610 <_vfiprintf_r+0x110>
 80075d8:	06d1      	lsls	r1, r2, #27
 80075da:	bf44      	itt	mi
 80075dc:	2320      	movmi	r3, #32
 80075de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e2:	0713      	lsls	r3, r2, #28
 80075e4:	bf44      	itt	mi
 80075e6:	232b      	movmi	r3, #43	@ 0x2b
 80075e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075ec:	f89a 3000 	ldrb.w	r3, [sl]
 80075f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f2:	d015      	beq.n	8007620 <_vfiprintf_r+0x120>
 80075f4:	9a07      	ldr	r2, [sp, #28]
 80075f6:	4654      	mov	r4, sl
 80075f8:	2000      	movs	r0, #0
 80075fa:	f04f 0c0a 	mov.w	ip, #10
 80075fe:	4621      	mov	r1, r4
 8007600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007604:	3b30      	subs	r3, #48	@ 0x30
 8007606:	2b09      	cmp	r3, #9
 8007608:	d94b      	bls.n	80076a2 <_vfiprintf_r+0x1a2>
 800760a:	b1b0      	cbz	r0, 800763a <_vfiprintf_r+0x13a>
 800760c:	9207      	str	r2, [sp, #28]
 800760e:	e014      	b.n	800763a <_vfiprintf_r+0x13a>
 8007610:	eba0 0308 	sub.w	r3, r0, r8
 8007614:	fa09 f303 	lsl.w	r3, r9, r3
 8007618:	4313      	orrs	r3, r2
 800761a:	9304      	str	r3, [sp, #16]
 800761c:	46a2      	mov	sl, r4
 800761e:	e7d2      	b.n	80075c6 <_vfiprintf_r+0xc6>
 8007620:	9b03      	ldr	r3, [sp, #12]
 8007622:	1d19      	adds	r1, r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	9103      	str	r1, [sp, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	bfbb      	ittet	lt
 800762c:	425b      	neglt	r3, r3
 800762e:	f042 0202 	orrlt.w	r2, r2, #2
 8007632:	9307      	strge	r3, [sp, #28]
 8007634:	9307      	strlt	r3, [sp, #28]
 8007636:	bfb8      	it	lt
 8007638:	9204      	strlt	r2, [sp, #16]
 800763a:	7823      	ldrb	r3, [r4, #0]
 800763c:	2b2e      	cmp	r3, #46	@ 0x2e
 800763e:	d10a      	bne.n	8007656 <_vfiprintf_r+0x156>
 8007640:	7863      	ldrb	r3, [r4, #1]
 8007642:	2b2a      	cmp	r3, #42	@ 0x2a
 8007644:	d132      	bne.n	80076ac <_vfiprintf_r+0x1ac>
 8007646:	9b03      	ldr	r3, [sp, #12]
 8007648:	1d1a      	adds	r2, r3, #4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	9203      	str	r2, [sp, #12]
 800764e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007652:	3402      	adds	r4, #2
 8007654:	9305      	str	r3, [sp, #20]
 8007656:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800772c <_vfiprintf_r+0x22c>
 800765a:	7821      	ldrb	r1, [r4, #0]
 800765c:	2203      	movs	r2, #3
 800765e:	4650      	mov	r0, sl
 8007660:	f7f8 fdb6 	bl	80001d0 <memchr>
 8007664:	b138      	cbz	r0, 8007676 <_vfiprintf_r+0x176>
 8007666:	9b04      	ldr	r3, [sp, #16]
 8007668:	eba0 000a 	sub.w	r0, r0, sl
 800766c:	2240      	movs	r2, #64	@ 0x40
 800766e:	4082      	lsls	r2, r0
 8007670:	4313      	orrs	r3, r2
 8007672:	3401      	adds	r4, #1
 8007674:	9304      	str	r3, [sp, #16]
 8007676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767a:	4829      	ldr	r0, [pc, #164]	@ (8007720 <_vfiprintf_r+0x220>)
 800767c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007680:	2206      	movs	r2, #6
 8007682:	f7f8 fda5 	bl	80001d0 <memchr>
 8007686:	2800      	cmp	r0, #0
 8007688:	d03f      	beq.n	800770a <_vfiprintf_r+0x20a>
 800768a:	4b26      	ldr	r3, [pc, #152]	@ (8007724 <_vfiprintf_r+0x224>)
 800768c:	bb1b      	cbnz	r3, 80076d6 <_vfiprintf_r+0x1d6>
 800768e:	9b03      	ldr	r3, [sp, #12]
 8007690:	3307      	adds	r3, #7
 8007692:	f023 0307 	bic.w	r3, r3, #7
 8007696:	3308      	adds	r3, #8
 8007698:	9303      	str	r3, [sp, #12]
 800769a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769c:	443b      	add	r3, r7
 800769e:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a0:	e76a      	b.n	8007578 <_vfiprintf_r+0x78>
 80076a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80076a6:	460c      	mov	r4, r1
 80076a8:	2001      	movs	r0, #1
 80076aa:	e7a8      	b.n	80075fe <_vfiprintf_r+0xfe>
 80076ac:	2300      	movs	r3, #0
 80076ae:	3401      	adds	r4, #1
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	4619      	mov	r1, r3
 80076b4:	f04f 0c0a 	mov.w	ip, #10
 80076b8:	4620      	mov	r0, r4
 80076ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076be:	3a30      	subs	r2, #48	@ 0x30
 80076c0:	2a09      	cmp	r2, #9
 80076c2:	d903      	bls.n	80076cc <_vfiprintf_r+0x1cc>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0c6      	beq.n	8007656 <_vfiprintf_r+0x156>
 80076c8:	9105      	str	r1, [sp, #20]
 80076ca:	e7c4      	b.n	8007656 <_vfiprintf_r+0x156>
 80076cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d0:	4604      	mov	r4, r0
 80076d2:	2301      	movs	r3, #1
 80076d4:	e7f0      	b.n	80076b8 <_vfiprintf_r+0x1b8>
 80076d6:	ab03      	add	r3, sp, #12
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	462a      	mov	r2, r5
 80076dc:	4b12      	ldr	r3, [pc, #72]	@ (8007728 <_vfiprintf_r+0x228>)
 80076de:	a904      	add	r1, sp, #16
 80076e0:	4630      	mov	r0, r6
 80076e2:	f3af 8000 	nop.w
 80076e6:	4607      	mov	r7, r0
 80076e8:	1c78      	adds	r0, r7, #1
 80076ea:	d1d6      	bne.n	800769a <_vfiprintf_r+0x19a>
 80076ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ee:	07d9      	lsls	r1, r3, #31
 80076f0:	d405      	bmi.n	80076fe <_vfiprintf_r+0x1fe>
 80076f2:	89ab      	ldrh	r3, [r5, #12]
 80076f4:	059a      	lsls	r2, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_vfiprintf_r+0x1fe>
 80076f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076fa:	f7ff fddd 	bl	80072b8 <__retarget_lock_release_recursive>
 80076fe:	89ab      	ldrh	r3, [r5, #12]
 8007700:	065b      	lsls	r3, r3, #25
 8007702:	f53f af1f 	bmi.w	8007544 <_vfiprintf_r+0x44>
 8007706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007708:	e71e      	b.n	8007548 <_vfiprintf_r+0x48>
 800770a:	ab03      	add	r3, sp, #12
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	462a      	mov	r2, r5
 8007710:	4b05      	ldr	r3, [pc, #20]	@ (8007728 <_vfiprintf_r+0x228>)
 8007712:	a904      	add	r1, sp, #16
 8007714:	4630      	mov	r0, r6
 8007716:	f000 f879 	bl	800780c <_printf_i>
 800771a:	e7e4      	b.n	80076e6 <_vfiprintf_r+0x1e6>
 800771c:	08007dd8 	.word	0x08007dd8
 8007720:	08007de2 	.word	0x08007de2
 8007724:	00000000 	.word	0x00000000
 8007728:	080074db 	.word	0x080074db
 800772c:	08007dde 	.word	0x08007dde

08007730 <_printf_common>:
 8007730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	4616      	mov	r6, r2
 8007736:	4698      	mov	r8, r3
 8007738:	688a      	ldr	r2, [r1, #8]
 800773a:	690b      	ldr	r3, [r1, #16]
 800773c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007740:	4293      	cmp	r3, r2
 8007742:	bfb8      	it	lt
 8007744:	4613      	movlt	r3, r2
 8007746:	6033      	str	r3, [r6, #0]
 8007748:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800774c:	4607      	mov	r7, r0
 800774e:	460c      	mov	r4, r1
 8007750:	b10a      	cbz	r2, 8007756 <_printf_common+0x26>
 8007752:	3301      	adds	r3, #1
 8007754:	6033      	str	r3, [r6, #0]
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	0699      	lsls	r1, r3, #26
 800775a:	bf42      	ittt	mi
 800775c:	6833      	ldrmi	r3, [r6, #0]
 800775e:	3302      	addmi	r3, #2
 8007760:	6033      	strmi	r3, [r6, #0]
 8007762:	6825      	ldr	r5, [r4, #0]
 8007764:	f015 0506 	ands.w	r5, r5, #6
 8007768:	d106      	bne.n	8007778 <_printf_common+0x48>
 800776a:	f104 0a19 	add.w	sl, r4, #25
 800776e:	68e3      	ldr	r3, [r4, #12]
 8007770:	6832      	ldr	r2, [r6, #0]
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	42ab      	cmp	r3, r5
 8007776:	dc26      	bgt.n	80077c6 <_printf_common+0x96>
 8007778:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	3b00      	subs	r3, #0
 8007780:	bf18      	it	ne
 8007782:	2301      	movne	r3, #1
 8007784:	0692      	lsls	r2, r2, #26
 8007786:	d42b      	bmi.n	80077e0 <_printf_common+0xb0>
 8007788:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800778c:	4641      	mov	r1, r8
 800778e:	4638      	mov	r0, r7
 8007790:	47c8      	blx	r9
 8007792:	3001      	adds	r0, #1
 8007794:	d01e      	beq.n	80077d4 <_printf_common+0xa4>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	6922      	ldr	r2, [r4, #16]
 800779a:	f003 0306 	and.w	r3, r3, #6
 800779e:	2b04      	cmp	r3, #4
 80077a0:	bf02      	ittt	eq
 80077a2:	68e5      	ldreq	r5, [r4, #12]
 80077a4:	6833      	ldreq	r3, [r6, #0]
 80077a6:	1aed      	subeq	r5, r5, r3
 80077a8:	68a3      	ldr	r3, [r4, #8]
 80077aa:	bf0c      	ite	eq
 80077ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b0:	2500      	movne	r5, #0
 80077b2:	4293      	cmp	r3, r2
 80077b4:	bfc4      	itt	gt
 80077b6:	1a9b      	subgt	r3, r3, r2
 80077b8:	18ed      	addgt	r5, r5, r3
 80077ba:	2600      	movs	r6, #0
 80077bc:	341a      	adds	r4, #26
 80077be:	42b5      	cmp	r5, r6
 80077c0:	d11a      	bne.n	80077f8 <_printf_common+0xc8>
 80077c2:	2000      	movs	r0, #0
 80077c4:	e008      	b.n	80077d8 <_printf_common+0xa8>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4652      	mov	r2, sl
 80077ca:	4641      	mov	r1, r8
 80077cc:	4638      	mov	r0, r7
 80077ce:	47c8      	blx	r9
 80077d0:	3001      	adds	r0, #1
 80077d2:	d103      	bne.n	80077dc <_printf_common+0xac>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077dc:	3501      	adds	r5, #1
 80077de:	e7c6      	b.n	800776e <_printf_common+0x3e>
 80077e0:	18e1      	adds	r1, r4, r3
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	2030      	movs	r0, #48	@ 0x30
 80077e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077ea:	4422      	add	r2, r4
 80077ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077f4:	3302      	adds	r3, #2
 80077f6:	e7c7      	b.n	8007788 <_printf_common+0x58>
 80077f8:	2301      	movs	r3, #1
 80077fa:	4622      	mov	r2, r4
 80077fc:	4641      	mov	r1, r8
 80077fe:	4638      	mov	r0, r7
 8007800:	47c8      	blx	r9
 8007802:	3001      	adds	r0, #1
 8007804:	d0e6      	beq.n	80077d4 <_printf_common+0xa4>
 8007806:	3601      	adds	r6, #1
 8007808:	e7d9      	b.n	80077be <_printf_common+0x8e>
	...

0800780c <_printf_i>:
 800780c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	7e0f      	ldrb	r7, [r1, #24]
 8007812:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007814:	2f78      	cmp	r7, #120	@ 0x78
 8007816:	4691      	mov	r9, r2
 8007818:	4680      	mov	r8, r0
 800781a:	460c      	mov	r4, r1
 800781c:	469a      	mov	sl, r3
 800781e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007822:	d807      	bhi.n	8007834 <_printf_i+0x28>
 8007824:	2f62      	cmp	r7, #98	@ 0x62
 8007826:	d80a      	bhi.n	800783e <_printf_i+0x32>
 8007828:	2f00      	cmp	r7, #0
 800782a:	f000 80d1 	beq.w	80079d0 <_printf_i+0x1c4>
 800782e:	2f58      	cmp	r7, #88	@ 0x58
 8007830:	f000 80b8 	beq.w	80079a4 <_printf_i+0x198>
 8007834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800783c:	e03a      	b.n	80078b4 <_printf_i+0xa8>
 800783e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007842:	2b15      	cmp	r3, #21
 8007844:	d8f6      	bhi.n	8007834 <_printf_i+0x28>
 8007846:	a101      	add	r1, pc, #4	@ (adr r1, 800784c <_printf_i+0x40>)
 8007848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800784c:	080078a5 	.word	0x080078a5
 8007850:	080078b9 	.word	0x080078b9
 8007854:	08007835 	.word	0x08007835
 8007858:	08007835 	.word	0x08007835
 800785c:	08007835 	.word	0x08007835
 8007860:	08007835 	.word	0x08007835
 8007864:	080078b9 	.word	0x080078b9
 8007868:	08007835 	.word	0x08007835
 800786c:	08007835 	.word	0x08007835
 8007870:	08007835 	.word	0x08007835
 8007874:	08007835 	.word	0x08007835
 8007878:	080079b7 	.word	0x080079b7
 800787c:	080078e3 	.word	0x080078e3
 8007880:	08007971 	.word	0x08007971
 8007884:	08007835 	.word	0x08007835
 8007888:	08007835 	.word	0x08007835
 800788c:	080079d9 	.word	0x080079d9
 8007890:	08007835 	.word	0x08007835
 8007894:	080078e3 	.word	0x080078e3
 8007898:	08007835 	.word	0x08007835
 800789c:	08007835 	.word	0x08007835
 80078a0:	08007979 	.word	0x08007979
 80078a4:	6833      	ldr	r3, [r6, #0]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6032      	str	r2, [r6, #0]
 80078ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078b4:	2301      	movs	r3, #1
 80078b6:	e09c      	b.n	80079f2 <_printf_i+0x1e6>
 80078b8:	6833      	ldr	r3, [r6, #0]
 80078ba:	6820      	ldr	r0, [r4, #0]
 80078bc:	1d19      	adds	r1, r3, #4
 80078be:	6031      	str	r1, [r6, #0]
 80078c0:	0606      	lsls	r6, r0, #24
 80078c2:	d501      	bpl.n	80078c8 <_printf_i+0xbc>
 80078c4:	681d      	ldr	r5, [r3, #0]
 80078c6:	e003      	b.n	80078d0 <_printf_i+0xc4>
 80078c8:	0645      	lsls	r5, r0, #25
 80078ca:	d5fb      	bpl.n	80078c4 <_printf_i+0xb8>
 80078cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	da03      	bge.n	80078dc <_printf_i+0xd0>
 80078d4:	232d      	movs	r3, #45	@ 0x2d
 80078d6:	426d      	negs	r5, r5
 80078d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078dc:	4858      	ldr	r0, [pc, #352]	@ (8007a40 <_printf_i+0x234>)
 80078de:	230a      	movs	r3, #10
 80078e0:	e011      	b.n	8007906 <_printf_i+0xfa>
 80078e2:	6821      	ldr	r1, [r4, #0]
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	0608      	lsls	r0, r1, #24
 80078e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80078ec:	d402      	bmi.n	80078f4 <_printf_i+0xe8>
 80078ee:	0649      	lsls	r1, r1, #25
 80078f0:	bf48      	it	mi
 80078f2:	b2ad      	uxthmi	r5, r5
 80078f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80078f6:	4852      	ldr	r0, [pc, #328]	@ (8007a40 <_printf_i+0x234>)
 80078f8:	6033      	str	r3, [r6, #0]
 80078fa:	bf14      	ite	ne
 80078fc:	230a      	movne	r3, #10
 80078fe:	2308      	moveq	r3, #8
 8007900:	2100      	movs	r1, #0
 8007902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007906:	6866      	ldr	r6, [r4, #4]
 8007908:	60a6      	str	r6, [r4, #8]
 800790a:	2e00      	cmp	r6, #0
 800790c:	db05      	blt.n	800791a <_printf_i+0x10e>
 800790e:	6821      	ldr	r1, [r4, #0]
 8007910:	432e      	orrs	r6, r5
 8007912:	f021 0104 	bic.w	r1, r1, #4
 8007916:	6021      	str	r1, [r4, #0]
 8007918:	d04b      	beq.n	80079b2 <_printf_i+0x1a6>
 800791a:	4616      	mov	r6, r2
 800791c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007920:	fb03 5711 	mls	r7, r3, r1, r5
 8007924:	5dc7      	ldrb	r7, [r0, r7]
 8007926:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800792a:	462f      	mov	r7, r5
 800792c:	42bb      	cmp	r3, r7
 800792e:	460d      	mov	r5, r1
 8007930:	d9f4      	bls.n	800791c <_printf_i+0x110>
 8007932:	2b08      	cmp	r3, #8
 8007934:	d10b      	bne.n	800794e <_printf_i+0x142>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	07df      	lsls	r7, r3, #31
 800793a:	d508      	bpl.n	800794e <_printf_i+0x142>
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	6861      	ldr	r1, [r4, #4]
 8007940:	4299      	cmp	r1, r3
 8007942:	bfde      	ittt	le
 8007944:	2330      	movle	r3, #48	@ 0x30
 8007946:	f806 3c01 	strble.w	r3, [r6, #-1]
 800794a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800794e:	1b92      	subs	r2, r2, r6
 8007950:	6122      	str	r2, [r4, #16]
 8007952:	f8cd a000 	str.w	sl, [sp]
 8007956:	464b      	mov	r3, r9
 8007958:	aa03      	add	r2, sp, #12
 800795a:	4621      	mov	r1, r4
 800795c:	4640      	mov	r0, r8
 800795e:	f7ff fee7 	bl	8007730 <_printf_common>
 8007962:	3001      	adds	r0, #1
 8007964:	d14a      	bne.n	80079fc <_printf_i+0x1f0>
 8007966:	f04f 30ff 	mov.w	r0, #4294967295
 800796a:	b004      	add	sp, #16
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	f043 0320 	orr.w	r3, r3, #32
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	4832      	ldr	r0, [pc, #200]	@ (8007a44 <_printf_i+0x238>)
 800797a:	2778      	movs	r7, #120	@ 0x78
 800797c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	6831      	ldr	r1, [r6, #0]
 8007984:	061f      	lsls	r7, r3, #24
 8007986:	f851 5b04 	ldr.w	r5, [r1], #4
 800798a:	d402      	bmi.n	8007992 <_printf_i+0x186>
 800798c:	065f      	lsls	r7, r3, #25
 800798e:	bf48      	it	mi
 8007990:	b2ad      	uxthmi	r5, r5
 8007992:	6031      	str	r1, [r6, #0]
 8007994:	07d9      	lsls	r1, r3, #31
 8007996:	bf44      	itt	mi
 8007998:	f043 0320 	orrmi.w	r3, r3, #32
 800799c:	6023      	strmi	r3, [r4, #0]
 800799e:	b11d      	cbz	r5, 80079a8 <_printf_i+0x19c>
 80079a0:	2310      	movs	r3, #16
 80079a2:	e7ad      	b.n	8007900 <_printf_i+0xf4>
 80079a4:	4826      	ldr	r0, [pc, #152]	@ (8007a40 <_printf_i+0x234>)
 80079a6:	e7e9      	b.n	800797c <_printf_i+0x170>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	f023 0320 	bic.w	r3, r3, #32
 80079ae:	6023      	str	r3, [r4, #0]
 80079b0:	e7f6      	b.n	80079a0 <_printf_i+0x194>
 80079b2:	4616      	mov	r6, r2
 80079b4:	e7bd      	b.n	8007932 <_printf_i+0x126>
 80079b6:	6833      	ldr	r3, [r6, #0]
 80079b8:	6825      	ldr	r5, [r4, #0]
 80079ba:	6961      	ldr	r1, [r4, #20]
 80079bc:	1d18      	adds	r0, r3, #4
 80079be:	6030      	str	r0, [r6, #0]
 80079c0:	062e      	lsls	r6, r5, #24
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	d501      	bpl.n	80079ca <_printf_i+0x1be>
 80079c6:	6019      	str	r1, [r3, #0]
 80079c8:	e002      	b.n	80079d0 <_printf_i+0x1c4>
 80079ca:	0668      	lsls	r0, r5, #25
 80079cc:	d5fb      	bpl.n	80079c6 <_printf_i+0x1ba>
 80079ce:	8019      	strh	r1, [r3, #0]
 80079d0:	2300      	movs	r3, #0
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	4616      	mov	r6, r2
 80079d6:	e7bc      	b.n	8007952 <_printf_i+0x146>
 80079d8:	6833      	ldr	r3, [r6, #0]
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	6032      	str	r2, [r6, #0]
 80079de:	681e      	ldr	r6, [r3, #0]
 80079e0:	6862      	ldr	r2, [r4, #4]
 80079e2:	2100      	movs	r1, #0
 80079e4:	4630      	mov	r0, r6
 80079e6:	f7f8 fbf3 	bl	80001d0 <memchr>
 80079ea:	b108      	cbz	r0, 80079f0 <_printf_i+0x1e4>
 80079ec:	1b80      	subs	r0, r0, r6
 80079ee:	6060      	str	r0, [r4, #4]
 80079f0:	6863      	ldr	r3, [r4, #4]
 80079f2:	6123      	str	r3, [r4, #16]
 80079f4:	2300      	movs	r3, #0
 80079f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079fa:	e7aa      	b.n	8007952 <_printf_i+0x146>
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	4632      	mov	r2, r6
 8007a00:	4649      	mov	r1, r9
 8007a02:	4640      	mov	r0, r8
 8007a04:	47d0      	blx	sl
 8007a06:	3001      	adds	r0, #1
 8007a08:	d0ad      	beq.n	8007966 <_printf_i+0x15a>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	079b      	lsls	r3, r3, #30
 8007a0e:	d413      	bmi.n	8007a38 <_printf_i+0x22c>
 8007a10:	68e0      	ldr	r0, [r4, #12]
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	4298      	cmp	r0, r3
 8007a16:	bfb8      	it	lt
 8007a18:	4618      	movlt	r0, r3
 8007a1a:	e7a6      	b.n	800796a <_printf_i+0x15e>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4632      	mov	r2, r6
 8007a20:	4649      	mov	r1, r9
 8007a22:	4640      	mov	r0, r8
 8007a24:	47d0      	blx	sl
 8007a26:	3001      	adds	r0, #1
 8007a28:	d09d      	beq.n	8007966 <_printf_i+0x15a>
 8007a2a:	3501      	adds	r5, #1
 8007a2c:	68e3      	ldr	r3, [r4, #12]
 8007a2e:	9903      	ldr	r1, [sp, #12]
 8007a30:	1a5b      	subs	r3, r3, r1
 8007a32:	42ab      	cmp	r3, r5
 8007a34:	dcf2      	bgt.n	8007a1c <_printf_i+0x210>
 8007a36:	e7eb      	b.n	8007a10 <_printf_i+0x204>
 8007a38:	2500      	movs	r5, #0
 8007a3a:	f104 0619 	add.w	r6, r4, #25
 8007a3e:	e7f5      	b.n	8007a2c <_printf_i+0x220>
 8007a40:	08007de9 	.word	0x08007de9
 8007a44:	08007dfa 	.word	0x08007dfa

08007a48 <__sflush_r>:
 8007a48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a50:	0716      	lsls	r6, r2, #28
 8007a52:	4605      	mov	r5, r0
 8007a54:	460c      	mov	r4, r1
 8007a56:	d454      	bmi.n	8007b02 <__sflush_r+0xba>
 8007a58:	684b      	ldr	r3, [r1, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	dc02      	bgt.n	8007a64 <__sflush_r+0x1c>
 8007a5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	dd48      	ble.n	8007af6 <__sflush_r+0xae>
 8007a64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	d045      	beq.n	8007af6 <__sflush_r+0xae>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a70:	682f      	ldr	r7, [r5, #0]
 8007a72:	6a21      	ldr	r1, [r4, #32]
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	d030      	beq.n	8007ada <__sflush_r+0x92>
 8007a78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	0759      	lsls	r1, r3, #29
 8007a7e:	d505      	bpl.n	8007a8c <__sflush_r+0x44>
 8007a80:	6863      	ldr	r3, [r4, #4]
 8007a82:	1ad2      	subs	r2, r2, r3
 8007a84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a86:	b10b      	cbz	r3, 8007a8c <__sflush_r+0x44>
 8007a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a90:	6a21      	ldr	r1, [r4, #32]
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b0      	blx	r6
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	d106      	bne.n	8007aaa <__sflush_r+0x62>
 8007a9c:	6829      	ldr	r1, [r5, #0]
 8007a9e:	291d      	cmp	r1, #29
 8007aa0:	d82b      	bhi.n	8007afa <__sflush_r+0xb2>
 8007aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8007b4c <__sflush_r+0x104>)
 8007aa4:	40ca      	lsrs	r2, r1
 8007aa6:	07d6      	lsls	r6, r2, #31
 8007aa8:	d527      	bpl.n	8007afa <__sflush_r+0xb2>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	6062      	str	r2, [r4, #4]
 8007aae:	04d9      	lsls	r1, r3, #19
 8007ab0:	6922      	ldr	r2, [r4, #16]
 8007ab2:	6022      	str	r2, [r4, #0]
 8007ab4:	d504      	bpl.n	8007ac0 <__sflush_r+0x78>
 8007ab6:	1c42      	adds	r2, r0, #1
 8007ab8:	d101      	bne.n	8007abe <__sflush_r+0x76>
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	b903      	cbnz	r3, 8007ac0 <__sflush_r+0x78>
 8007abe:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ac2:	602f      	str	r7, [r5, #0]
 8007ac4:	b1b9      	cbz	r1, 8007af6 <__sflush_r+0xae>
 8007ac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aca:	4299      	cmp	r1, r3
 8007acc:	d002      	beq.n	8007ad4 <__sflush_r+0x8c>
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f7ff fbf4 	bl	80072bc <_free_r>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ad8:	e00d      	b.n	8007af6 <__sflush_r+0xae>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b0      	blx	r6
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	1c50      	adds	r0, r2, #1
 8007ae4:	d1c9      	bne.n	8007a7a <__sflush_r+0x32>
 8007ae6:	682b      	ldr	r3, [r5, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0c6      	beq.n	8007a7a <__sflush_r+0x32>
 8007aec:	2b1d      	cmp	r3, #29
 8007aee:	d001      	beq.n	8007af4 <__sflush_r+0xac>
 8007af0:	2b16      	cmp	r3, #22
 8007af2:	d11e      	bne.n	8007b32 <__sflush_r+0xea>
 8007af4:	602f      	str	r7, [r5, #0]
 8007af6:	2000      	movs	r0, #0
 8007af8:	e022      	b.n	8007b40 <__sflush_r+0xf8>
 8007afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007afe:	b21b      	sxth	r3, r3
 8007b00:	e01b      	b.n	8007b3a <__sflush_r+0xf2>
 8007b02:	690f      	ldr	r7, [r1, #16]
 8007b04:	2f00      	cmp	r7, #0
 8007b06:	d0f6      	beq.n	8007af6 <__sflush_r+0xae>
 8007b08:	0793      	lsls	r3, r2, #30
 8007b0a:	680e      	ldr	r6, [r1, #0]
 8007b0c:	bf08      	it	eq
 8007b0e:	694b      	ldreq	r3, [r1, #20]
 8007b10:	600f      	str	r7, [r1, #0]
 8007b12:	bf18      	it	ne
 8007b14:	2300      	movne	r3, #0
 8007b16:	eba6 0807 	sub.w	r8, r6, r7
 8007b1a:	608b      	str	r3, [r1, #8]
 8007b1c:	f1b8 0f00 	cmp.w	r8, #0
 8007b20:	dde9      	ble.n	8007af6 <__sflush_r+0xae>
 8007b22:	6a21      	ldr	r1, [r4, #32]
 8007b24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b26:	4643      	mov	r3, r8
 8007b28:	463a      	mov	r2, r7
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b0      	blx	r6
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	dc08      	bgt.n	8007b44 <__sflush_r+0xfc>
 8007b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b3a:	81a3      	strh	r3, [r4, #12]
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b44:	4407      	add	r7, r0
 8007b46:	eba8 0800 	sub.w	r8, r8, r0
 8007b4a:	e7e7      	b.n	8007b1c <__sflush_r+0xd4>
 8007b4c:	20400001 	.word	0x20400001

08007b50 <_fflush_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	690b      	ldr	r3, [r1, #16]
 8007b54:	4605      	mov	r5, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	b913      	cbnz	r3, 8007b60 <_fflush_r+0x10>
 8007b5a:	2500      	movs	r5, #0
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	b118      	cbz	r0, 8007b6a <_fflush_r+0x1a>
 8007b62:	6a03      	ldr	r3, [r0, #32]
 8007b64:	b90b      	cbnz	r3, 8007b6a <_fflush_r+0x1a>
 8007b66:	f7ff f9af 	bl	8006ec8 <__sinit>
 8007b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0f3      	beq.n	8007b5a <_fflush_r+0xa>
 8007b72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b74:	07d0      	lsls	r0, r2, #31
 8007b76:	d404      	bmi.n	8007b82 <_fflush_r+0x32>
 8007b78:	0599      	lsls	r1, r3, #22
 8007b7a:	d402      	bmi.n	8007b82 <_fflush_r+0x32>
 8007b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b7e:	f7ff fb9a 	bl	80072b6 <__retarget_lock_acquire_recursive>
 8007b82:	4628      	mov	r0, r5
 8007b84:	4621      	mov	r1, r4
 8007b86:	f7ff ff5f 	bl	8007a48 <__sflush_r>
 8007b8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b8c:	07da      	lsls	r2, r3, #31
 8007b8e:	4605      	mov	r5, r0
 8007b90:	d4e4      	bmi.n	8007b5c <_fflush_r+0xc>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	059b      	lsls	r3, r3, #22
 8007b96:	d4e1      	bmi.n	8007b5c <_fflush_r+0xc>
 8007b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b9a:	f7ff fb8d 	bl	80072b8 <__retarget_lock_release_recursive>
 8007b9e:	e7dd      	b.n	8007b5c <_fflush_r+0xc>

08007ba0 <__swhatbuf_r>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	b096      	sub	sp, #88	@ 0x58
 8007bac:	4615      	mov	r5, r2
 8007bae:	461e      	mov	r6, r3
 8007bb0:	da0d      	bge.n	8007bce <__swhatbuf_r+0x2e>
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bb8:	f04f 0100 	mov.w	r1, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2340      	movne	r3, #64	@ 0x40
 8007bc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	6031      	str	r1, [r6, #0]
 8007bc8:	602b      	str	r3, [r5, #0]
 8007bca:	b016      	add	sp, #88	@ 0x58
 8007bcc:	bd70      	pop	{r4, r5, r6, pc}
 8007bce:	466a      	mov	r2, sp
 8007bd0:	f000 f848 	bl	8007c64 <_fstat_r>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	dbec      	blt.n	8007bb2 <__swhatbuf_r+0x12>
 8007bd8:	9901      	ldr	r1, [sp, #4]
 8007bda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007be2:	4259      	negs	r1, r3
 8007be4:	4159      	adcs	r1, r3
 8007be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bea:	e7eb      	b.n	8007bc4 <__swhatbuf_r+0x24>

08007bec <__smakebuf_r>:
 8007bec:	898b      	ldrh	r3, [r1, #12]
 8007bee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bf0:	079d      	lsls	r5, r3, #30
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	d507      	bpl.n	8007c08 <__smakebuf_r+0x1c>
 8007bf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	6123      	str	r3, [r4, #16]
 8007c00:	2301      	movs	r3, #1
 8007c02:	6163      	str	r3, [r4, #20]
 8007c04:	b003      	add	sp, #12
 8007c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c08:	ab01      	add	r3, sp, #4
 8007c0a:	466a      	mov	r2, sp
 8007c0c:	f7ff ffc8 	bl	8007ba0 <__swhatbuf_r>
 8007c10:	9f00      	ldr	r7, [sp, #0]
 8007c12:	4605      	mov	r5, r0
 8007c14:	4639      	mov	r1, r7
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7ff fbbc 	bl	8007394 <_malloc_r>
 8007c1c:	b948      	cbnz	r0, 8007c32 <__smakebuf_r+0x46>
 8007c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c22:	059a      	lsls	r2, r3, #22
 8007c24:	d4ee      	bmi.n	8007c04 <__smakebuf_r+0x18>
 8007c26:	f023 0303 	bic.w	r3, r3, #3
 8007c2a:	f043 0302 	orr.w	r3, r3, #2
 8007c2e:	81a3      	strh	r3, [r4, #12]
 8007c30:	e7e2      	b.n	8007bf8 <__smakebuf_r+0xc>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	6020      	str	r0, [r4, #0]
 8007c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	9b01      	ldr	r3, [sp, #4]
 8007c3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c42:	b15b      	cbz	r3, 8007c5c <__smakebuf_r+0x70>
 8007c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f000 f81d 	bl	8007c88 <_isatty_r>
 8007c4e:	b128      	cbz	r0, 8007c5c <__smakebuf_r+0x70>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	431d      	orrs	r5, r3
 8007c60:	81a5      	strh	r5, [r4, #12]
 8007c62:	e7cf      	b.n	8007c04 <__smakebuf_r+0x18>

08007c64 <_fstat_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d07      	ldr	r5, [pc, #28]	@ (8007c84 <_fstat_r+0x20>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	4611      	mov	r1, r2
 8007c70:	602b      	str	r3, [r5, #0]
 8007c72:	f7f9 fa70 	bl	8001156 <_fstat>
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	d102      	bne.n	8007c80 <_fstat_r+0x1c>
 8007c7a:	682b      	ldr	r3, [r5, #0]
 8007c7c:	b103      	cbz	r3, 8007c80 <_fstat_r+0x1c>
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	bd38      	pop	{r3, r4, r5, pc}
 8007c82:	bf00      	nop
 8007c84:	200014b0 	.word	0x200014b0

08007c88 <_isatty_r>:
 8007c88:	b538      	push	{r3, r4, r5, lr}
 8007c8a:	4d06      	ldr	r5, [pc, #24]	@ (8007ca4 <_isatty_r+0x1c>)
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4604      	mov	r4, r0
 8007c90:	4608      	mov	r0, r1
 8007c92:	602b      	str	r3, [r5, #0]
 8007c94:	f7f9 fa6f 	bl	8001176 <_isatty>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d102      	bne.n	8007ca2 <_isatty_r+0x1a>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	b103      	cbz	r3, 8007ca2 <_isatty_r+0x1a>
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	200014b0 	.word	0x200014b0

08007ca8 <_sbrk_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d06      	ldr	r5, [pc, #24]	@ (8007cc4 <_sbrk_r+0x1c>)
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	602b      	str	r3, [r5, #0]
 8007cb4:	f7f9 fa78 	bl	80011a8 <_sbrk>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_sbrk_r+0x1a>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_sbrk_r+0x1a>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	200014b0 	.word	0x200014b0

08007cc8 <_init>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	bf00      	nop
 8007ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cce:	bc08      	pop	{r3}
 8007cd0:	469e      	mov	lr, r3
 8007cd2:	4770      	bx	lr

08007cd4 <_fini>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	bf00      	nop
 8007cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cda:	bc08      	pop	{r3}
 8007cdc:	469e      	mov	lr, r3
 8007cde:	4770      	bx	lr
