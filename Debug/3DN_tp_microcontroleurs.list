
3DN_tp_microcontroleurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004360  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080044e8  080044e8  000054e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004540  08004540  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004540  08004540  00005540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004548  08004548  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00005548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004550  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  080045b8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080045b8  000062c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfc7  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205a  00000000  00000000  0001305f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000150c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f1  00000000  00000000  00015c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271fe  00000000  00000000  00016571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef08  00000000  00000000  0003d76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb861  00000000  00000000  0004c677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003518  00000000  00000000  00137f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0013b434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044d0 	.word	0x080044d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	080044d0 	.word	0x080044d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	4b38      	ldr	r3, [pc, #224]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d2:	4a37      	ldr	r2, [pc, #220]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004da:	4b35      	ldr	r3, [pc, #212]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004de:	f003 0304 	and.w	r3, r3, #4
 80004e2:	613b      	str	r3, [r7, #16]
 80004e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e6:	4b32      	ldr	r3, [pc, #200]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	4a31      	ldr	r2, [pc, #196]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 80004ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004f2:	4b2f      	ldr	r3, [pc, #188]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b2c      	ldr	r3, [pc, #176]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a2b      	ldr	r2, [pc, #172]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050a:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b26      	ldr	r3, [pc, #152]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	4a25      	ldr	r2, [pc, #148]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000522:	4b23      	ldr	r3, [pc, #140]	@ (80005b0 <MX_GPIO_Init+0xf8>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_nRESET_GPIO_Port, SPI3_nRESET_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2101      	movs	r1, #1
 8000532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000536:	f000 fea3 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2120      	movs	r1, #32
 800053e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000542:	f000 fe9d 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_nCS_GPIO_Port, SPI3_nCS_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	481a      	ldr	r0, [pc, #104]	@ (80005b4 <MX_GPIO_Init+0xfc>)
 800054c:	f000 fe98 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000556:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	4814      	ldr	r0, [pc, #80]	@ (80005b8 <MX_GPIO_Init+0x100>)
 8000568:	f000 fce0 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SPI3_nRESET_Pin|LD2_Pin;
 800056c:	2321      	movs	r3, #33	@ 0x21
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2300      	movs	r3, #0
 800057a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 fcd1 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_nCS_Pin */
  GPIO_InitStruct.Pin = SPI3_nCS_Pin;
 800058a:	2380      	movs	r3, #128	@ 0x80
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_nCS_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <MX_GPIO_Init+0xfc>)
 80005a2:	f000 fcc3 	bl	8000f2c <HAL_GPIO_Init>

}
 80005a6:	bf00      	nop
 80005a8:	3728      	adds	r7, #40	@ 0x28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400
 80005b8:	48000800 	.word	0x48000800

080005bc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	2201      	movs	r2, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <__io_putchar+0x20>)
 80005ce:	f002 fd75 	bl	80030bc <HAL_UART_Transmit>
	return chr;
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000ec 	.word	0x200000ec

080005e0 <MCP23S17_WriteRegister>:

void MCP23S17_WriteRegister(uint8_t reg, uint8_t value) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71bb      	strb	r3, [r7, #6]
    uint8_t data[3] = {MCP23S17_OPCODE_WRITE, reg, value};
 80005f0:	2340      	movs	r3, #64	@ 0x40
 80005f2:	733b      	strb	r3, [r7, #12]
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	737b      	strb	r3, [r7, #13]
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(SPI3_nCS_GPIO_Port, SPI3_nCS_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2180      	movs	r1, #128	@ 0x80
 8000600:	4809      	ldr	r0, [pc, #36]	@ (8000628 <MCP23S17_WriteRegister+0x48>)
 8000602:	f000 fe3d 	bl	8001280 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, data, 3, HAL_MAX_DELAY);
 8000606:	f107 010c 	add.w	r1, r7, #12
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2203      	movs	r2, #3
 8000610:	4806      	ldr	r0, [pc, #24]	@ (800062c <MCP23S17_WriteRegister+0x4c>)
 8000612:	f002 fa2a 	bl	8002a6a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI3_nCS_GPIO_Port, SPI3_nCS_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	4803      	ldr	r0, [pc, #12]	@ (8000628 <MCP23S17_WriteRegister+0x48>)
 800061c:	f000 fe30 	bl	8001280 <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	48000400 	.word	0x48000400
 800062c:	20000084 	.word	0x20000084

08000630 <MCP23S17_Init>:

void MCP23S17_Init() {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    // Configurer tous les pins de GPA et GPB en sortie
    MCP23S17_WriteRegister(MCP23S17_IODIRA, 0x00);
 8000634:	2100      	movs	r1, #0
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff ffd2 	bl	80005e0 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_IODIRB, 0x00);
 800063c:	2100      	movs	r1, #0
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff ffce 	bl	80005e0 <MCP23S17_WriteRegister>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fae8 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f830 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f7ff ff30 	bl	80004b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000658:	f000 fa2c 	bl	8000ab4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800065c:	f000 f882 	bl	8000764 <MX_SPI3_Init>
  MCP23S17_Init();
 8000660:	f7ff ffe6 	bl	8000630 <MCP23S17_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000664:	2120      	movs	r1, #32
 8000666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066a:	f000 fe21 	bl	80012b0 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800066e:	2064      	movs	r0, #100	@ 0x64
 8000670:	f000 fb52 	bl	8000d18 <HAL_Delay>
	  printf("Test printf\r\n");
 8000674:	480e      	ldr	r0, [pc, #56]	@ (80006b0 <main+0x68>)
 8000676:	f003 fb97 	bl	8003da8 <puts>

	  MCP23S17_WriteRegister(MCP23S17_GPIOA, 0xFF);  // Allumer toutes les LEDs sur GPA
 800067a:	21ff      	movs	r1, #255	@ 0xff
 800067c:	2012      	movs	r0, #18
 800067e:	f7ff ffaf 	bl	80005e0 <MCP23S17_WriteRegister>
	  MCP23S17_WriteRegister(MCP23S17_GPIOB, 0xFF);  // Allumer toutes les LEDs sur GPB
 8000682:	21ff      	movs	r1, #255	@ 0xff
 8000684:	2013      	movs	r0, #19
 8000686:	f7ff ffab 	bl	80005e0 <MCP23S17_WriteRegister>
	  HAL_Delay(500);
 800068a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800068e:	f000 fb43 	bl	8000d18 <HAL_Delay>
	  MCP23S17_WriteRegister(MCP23S17_GPIOA, 0x00);  // Éteindre toutes les LEDs sur GPA
 8000692:	2100      	movs	r1, #0
 8000694:	2012      	movs	r0, #18
 8000696:	f7ff ffa3 	bl	80005e0 <MCP23S17_WriteRegister>
	  MCP23S17_WriteRegister(MCP23S17_GPIOB, 0x00);  // Éteindre toutes les LEDs sur GPB
 800069a:	2100      	movs	r1, #0
 800069c:	2013      	movs	r0, #19
 800069e:	f7ff ff9f 	bl	80005e0 <MCP23S17_WriteRegister>
	  HAL_Delay(500);
 80006a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006a6:	f000 fb37 	bl	8000d18 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006aa:	bf00      	nop
 80006ac:	e7da      	b.n	8000664 <main+0x1c>
 80006ae:	bf00      	nop
 80006b0:	080044e8 	.word	0x080044e8

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b096      	sub	sp, #88	@ 0x58
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2244      	movs	r2, #68	@ 0x44
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fc50 	bl	8003f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006da:	f000 fe11 	bl	8001300 <HAL_PWREx_ControlVoltageScaling>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e4:	f000 f837 	bl	8000756 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2310      	movs	r3, #16
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	2302      	movs	r3, #2
 80006fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000702:	230a      	movs	r3, #10
 8000704:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000706:	2307      	movs	r3, #7
 8000708:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fe48 	bl	80013ac <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000722:	f000 f818 	bl	8000756 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2303      	movs	r3, #3
 800072c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2104      	movs	r1, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fa10 	bl	8001b64 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800074a:	f000 f804 	bl	8000756 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3758      	adds	r7, #88	@ 0x58
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075a:	b672      	cpsid	i
}
 800075c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075e:	bf00      	nop
 8000760:	e7fd      	b.n	800075e <Error_Handler+0x8>
	...

08000764 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_SPI3_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	@ (80007dc <MX_SPI3_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_SPI3_Init+0x74>)
 8000770:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000774:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_SPI3_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_SPI3_Init+0x74>)
 800077e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000782:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_SPI3_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_SPI3_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_SPI3_Init+0x74>)
 8000792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000796:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_SPI3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_SPI3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_SPI3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_SPI3_Init+0x74>)
 80007b2:	2207      	movs	r2, #7
 80007b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_SPI3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_SPI3_Init+0x74>)
 80007be:	2208      	movs	r2, #8
 80007c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_SPI3_Init+0x74>)
 80007c4:	f002 f8ae 	bl	8002924 <HAL_SPI_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f7ff ffc2 	bl	8000756 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000084 	.word	0x20000084
 80007dc:	40003c00 	.word	0x40003c00

080007e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a25      	ldr	r2, [pc, #148]	@ (8000894 <HAL_SPI_MspInit+0xb4>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d144      	bne.n	800088c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000802:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <HAL_SPI_MspInit+0xb8>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000806:	4a24      	ldr	r2, [pc, #144]	@ (8000898 <HAL_SPI_MspInit+0xb8>)
 8000808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800080c:	6593      	str	r3, [r2, #88]	@ 0x58
 800080e:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <HAL_SPI_MspInit+0xb8>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000812:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <HAL_SPI_MspInit+0xb8>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	4a1e      	ldr	r2, [pc, #120]	@ (8000898 <HAL_SPI_MspInit+0xb8>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <HAL_SPI_MspInit+0xb8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <HAL_SPI_MspInit+0xb8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	4a18      	ldr	r2, [pc, #96]	@ (8000898 <HAL_SPI_MspInit+0xb8>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <HAL_SPI_MspInit+0xb8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800084a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800085c:	2306      	movs	r3, #6
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	480d      	ldr	r0, [pc, #52]	@ (800089c <HAL_SPI_MspInit+0xbc>)
 8000868:	f000 fb60 	bl	8000f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800086c:	2320      	movs	r3, #32
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800087c:	2306      	movs	r3, #6
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <HAL_SPI_MspInit+0xc0>)
 8000888:	f000 fb50 	bl	8000f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40003c00 	.word	0x40003c00
 8000898:	40021000 	.word	0x40021000
 800089c:	48000800 	.word	0x48000800
 80008a0:	48000400 	.word	0x48000400

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ae:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 f9c9 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}

0800094a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	e00a      	b.n	8000972 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800095c:	f3af 8000 	nop.w
 8000960:	4601      	mov	r1, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	60ba      	str	r2, [r7, #8]
 8000968:	b2ca      	uxtb	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	429a      	cmp	r2, r3
 8000978:	dbf0      	blt.n	800095c <_read+0x12>
  }

  return len;
 800097a:	687b      	ldr	r3, [r7, #4]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	e009      	b.n	80009aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	60ba      	str	r2, [r7, #8]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe0c 	bl	80005bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dbf1      	blt.n	8000996 <_write+0x12>
  }
  return len;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_close>:

int _close(int file)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009e4:	605a      	str	r2, [r3, #4]
  return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_isatty>:

int _isatty(int file)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009fc:	2301      	movs	r3, #1
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b085      	sub	sp, #20
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	@ (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f003 fad6 	bl	8004004 <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20018000 	.word	0x20018000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	200000e8 	.word	0x200000e8
 8000a8c:	200002c8 	.word	0x200002c8

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	@ (8000b10 <MX_USART2_UART_Init+0x5c>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000af8:	f002 fa92 	bl	8003020 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b02:	f7ff fe28 	bl	8000756 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000ec 	.word	0x200000ec
 8000b10:	40004400 	.word	0x40004400

08000b14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0ac      	sub	sp, #176	@ 0xb0
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2288      	movs	r2, #136	@ 0x88
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f003 fa17 	bl	8003f68 <memset>
  if(uartHandle->Instance==USART2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a21      	ldr	r2, [pc, #132]	@ (8000bc4 <HAL_UART_MspInit+0xb0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d13b      	bne.n	8000bbc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fa2b 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b5c:	f7ff fdfb 	bl	8000756 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b60:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b64:	4a18      	ldr	r2, [pc, #96]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b84:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b90:	230c      	movs	r3, #12
 8000b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb8:	f000 f9b8 	bl	8000f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	37b0      	adds	r7, #176	@ 0xb0
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40021000 	.word	0x40021000

08000bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd0:	f7ff ff5e 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f003 fa09 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfe:	f7ff fd23 	bl	8000648 <main>

08000c02 <LoopForever>:

LoopForever:
    b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c10:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 8000c14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c18:	200002c4 	.word	0x200002c4

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <HAL_Init+0x3c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <HAL_Init+0x3c>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 f944 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 f80f 	bl	8000c60 <HAL_InitTick>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	e001      	b.n	8000c52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4e:	f7ff fe29 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40022000 	.word	0x40022000

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_InitTick+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d023      	beq.n	8000cbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_InitTick+0x70>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_InitTick+0x6c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f941 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10f      	bne.n	8000cb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d809      	bhi.n	8000cb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f919 	bl	8000eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <HAL_InitTick+0x74>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e007      	b.n	8000cc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e004      	b.n	8000cc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e001      	b.n	8000cc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000174 	.word	0x20000174

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000174 	.word	0x20000174

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff ffee 	bl	8000d00 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffde 	bl	8000d00 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	@ (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	@ (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	@ 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff47 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eec:	f7ff ff5c 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff ff8e 	bl	8000e18 <NVIC_EncodePriority>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff5d 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffb0 	bl	8000e80 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	e17f      	b.n	800123c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8171 	beq.w	8001236 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d005      	beq.n	8000f6c <HAL_GPIO_Init+0x40>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	f003 0201 	and.w	r2, r3, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d118      	bne.n	800100c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d017      	beq.n	8001048 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	6939      	ldr	r1, [r7, #16]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80ac 	beq.w	8001236 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b5f      	ldr	r3, [pc, #380]	@ (800125c <HAL_GPIO_Init+0x330>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e2:	4a5e      	ldr	r2, [pc, #376]	@ (800125c <HAL_GPIO_Init+0x330>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ea:	4b5c      	ldr	r3, [pc, #368]	@ (800125c <HAL_GPIO_Init+0x330>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001260 <HAL_GPIO_Init+0x334>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001120:	d025      	beq.n	800116e <HAL_GPIO_Init+0x242>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4f      	ldr	r2, [pc, #316]	@ (8001264 <HAL_GPIO_Init+0x338>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d01f      	beq.n	800116a <HAL_GPIO_Init+0x23e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4e      	ldr	r2, [pc, #312]	@ (8001268 <HAL_GPIO_Init+0x33c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x23a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4d      	ldr	r2, [pc, #308]	@ (800126c <HAL_GPIO_Init+0x340>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x236>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4c      	ldr	r2, [pc, #304]	@ (8001270 <HAL_GPIO_Init+0x344>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x232>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4b      	ldr	r2, [pc, #300]	@ (8001274 <HAL_GPIO_Init+0x348>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x22e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4a      	ldr	r2, [pc, #296]	@ (8001278 <HAL_GPIO_Init+0x34c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x22a>
 8001152:	2306      	movs	r3, #6
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001156:	2307      	movs	r3, #7
 8001158:	e00a      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800115a:	2305      	movs	r3, #5
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800115e:	2304      	movs	r3, #4
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800116e:	2300      	movs	r3, #0
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001180:	4937      	ldr	r1, [pc, #220]	@ (8001260 <HAL_GPIO_Init+0x334>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800118e:	4b3b      	ldr	r3, [pc, #236]	@ (800127c <HAL_GPIO_Init+0x350>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b2:	4a32      	ldr	r2, [pc, #200]	@ (800127c <HAL_GPIO_Init+0x350>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <HAL_GPIO_Init+0x350>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011dc:	4a27      	ldr	r2, [pc, #156]	@ (800127c <HAL_GPIO_Init+0x350>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011e2:	4b26      	ldr	r3, [pc, #152]	@ (800127c <HAL_GPIO_Init+0x350>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001206:	4a1d      	ldr	r2, [pc, #116]	@ (800127c <HAL_GPIO_Init+0x350>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_GPIO_Init+0x350>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001230:	4a12      	ldr	r2, [pc, #72]	@ (800127c <HAL_GPIO_Init+0x350>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	f47f ae78 	bne.w	8000f3c <HAL_GPIO_Init+0x10>
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000
 8001264:	48000400 	.word	0x48000400
 8001268:	48000800 	.word	0x48000800
 800126c:	48000c00 	.word	0x48000c00
 8001270:	48001000 	.word	0x48001000
 8001274:	48001400 	.word	0x48001400
 8001278:	48001800 	.word	0x48001800
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43d9      	mvns	r1, r3
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	400b      	ands	r3, r1
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <HAL_PWREx_GetVoltageRange+0x18>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800130e:	d130      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001310:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800131c:	d038      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001326:	4a1e      	ldr	r2, [pc, #120]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001328:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800132e:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2232      	movs	r2, #50	@ 0x32
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001344:	e002      	b.n	800134c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001358:	d102      	bne.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x60>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f2      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800136c:	d110      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e00f      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800137a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137e:	d007      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001388:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800138e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40007000 	.word	0x40007000
 80013a4:	20000000 	.word	0x20000000
 80013a8:	431bde83 	.word	0x431bde83

080013ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e3ca      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013be:	4b97      	ldr	r3, [pc, #604]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c8:	4b94      	ldr	r3, [pc, #592]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80e4 	beq.w	80015a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <HAL_RCC_OscConfig+0x4a>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	f040 808b 	bne.w	8001504 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f040 8087 	bne.w	8001504 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f6:	4b89      	ldr	r3, [pc, #548]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x62>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e3a2      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	4b82      	ldr	r3, [pc, #520]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <HAL_RCC_OscConfig+0x7c>
 800141e:	4b7f      	ldr	r3, [pc, #508]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001426:	e005      	b.n	8001434 <HAL_RCC_OscConfig+0x88>
 8001428:	4b7c      	ldr	r3, [pc, #496]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800142a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001434:	4293      	cmp	r3, r2
 8001436:	d223      	bcs.n	8001480 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fd55 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e383      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144c:	4b73      	ldr	r3, [pc, #460]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a72      	ldr	r2, [pc, #456]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b70      	ldr	r3, [pc, #448]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	496d      	ldr	r1, [pc, #436]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b6c      	ldr	r3, [pc, #432]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	4968      	ldr	r1, [pc, #416]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
 800147e:	e025      	b.n	80014cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001480:	4b66      	ldr	r3, [pc, #408]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a65      	ldr	r2, [pc, #404]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b63      	ldr	r3, [pc, #396]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4960      	ldr	r1, [pc, #384]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149e:	4b5f      	ldr	r3, [pc, #380]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	495b      	ldr	r1, [pc, #364]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fd15 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e343      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014cc:	f000 fc4a 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b52      	ldr	r3, [pc, #328]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	4950      	ldr	r1, [pc, #320]	@ (8001620 <HAL_RCC_OscConfig+0x274>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001624 <HAL_RCC_OscConfig+0x278>)
 80014ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001628 <HAL_RCC_OscConfig+0x27c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fbb5 	bl	8000c60 <HAL_InitTick>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d052      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	e327      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d032      	beq.n	8001572 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800150c:	4b43      	ldr	r3, [pc, #268]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a42      	ldr	r2, [pc, #264]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001518:	f7ff fbf2 	bl	8000d00 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fbee 	bl	8000d00 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e310      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001532:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153e:	4b37      	ldr	r3, [pc, #220]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a36      	ldr	r2, [pc, #216]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b34      	ldr	r3, [pc, #208]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4931      	ldr	r1, [pc, #196]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155c:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	492c      	ldr	r1, [pc, #176]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e01a      	b.n	80015a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001572:	4b2a      	ldr	r3, [pc, #168]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a29      	ldr	r2, [pc, #164]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800157e:	f7ff fbbf 	bl	8000d00 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001586:	f7ff fbbb 	bl	8000d00 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e2dd      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x1da>
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d074      	beq.n	800169e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x21a>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d10e      	bne.n	80015de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d10b      	bne.n	80015de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d064      	beq.n	800169c <HAL_RCC_OscConfig+0x2f0>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d160      	bne.n	800169c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e2ba      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x24a>
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e026      	b.n	8001644 <HAL_RCC_OscConfig+0x298>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015fe:	d115      	bne.n	800162c <HAL_RCC_OscConfig+0x280>
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001606:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a02      	ldr	r2, [pc, #8]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x298>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	080044f8 	.word	0x080044f8
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004
 800162c:	4ba0      	ldr	r3, [pc, #640]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a9f      	ldr	r2, [pc, #636]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b9d      	ldr	r3, [pc, #628]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a9c      	ldr	r2, [pc, #624]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fb58 	bl	8000d00 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fb54 	bl	8000d00 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	@ 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e276      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	4b92      	ldr	r3, [pc, #584]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x2a8>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fb44 	bl	8000d00 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fb40 	bl	8000d00 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	@ 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e262      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168e:	4b88      	ldr	r3, [pc, #544]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x2d0>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d060      	beq.n	800176c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x310>
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d119      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d116      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	4b7c      	ldr	r3, [pc, #496]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x328>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e23f      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b76      	ldr	r3, [pc, #472]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4973      	ldr	r1, [pc, #460]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e8:	e040      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d023      	beq.n	800173a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f2:	4b6f      	ldr	r3, [pc, #444]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6e      	ldr	r2, [pc, #440]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff faff 	bl	8000d00 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fafb 	bl	8000d00 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e21d      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001718:	4b65      	ldr	r3, [pc, #404]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b62      	ldr	r3, [pc, #392]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	495f      	ldr	r1, [pc, #380]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e018      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173a:	4b5d      	ldr	r3, [pc, #372]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a5c      	ldr	r2, [pc, #368]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fadb 	bl	8000d00 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fad7 	bl	8000d00 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1f9      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001760:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01c      	beq.n	80017ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001780:	4b4b      	ldr	r3, [pc, #300]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001786:	4a4a      	ldr	r2, [pc, #296]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fab6 	bl	8000d00 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fab2 	bl	8000d00 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1d4      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017aa:	4b41      	ldr	r3, [pc, #260]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ef      	beq.n	8001798 <HAL_RCC_OscConfig+0x3ec>
 80017b8:	e01b      	b.n	80017f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c0:	4a3b      	ldr	r2, [pc, #236]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa99 	bl	8000d00 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fa95 	bl	8000d00 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1b7      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e4:	4b32      	ldr	r3, [pc, #200]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80a6 	beq.w	800194c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001804:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	4a26      	ldr	r2, [pc, #152]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6593      	str	r3, [r2, #88]	@ 0x58
 800181c:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001828:	2301      	movs	r3, #1
 800182a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182c:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d118      	bne.n	800186a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001842:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001844:	f7ff fa5c 	bl	8000d00 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7ff fa58 	bl	8000d00 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e17a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <HAL_RCC_OscConfig+0x4d8>
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001878:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001882:	e029      	b.n	80018d8 <HAL_RCC_OscConfig+0x52c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d115      	bne.n	80018b8 <HAL_RCC_OscConfig+0x50c>
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001892:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a2:	4a03      	ldr	r2, [pc, #12]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x52c>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40007000 	.word	0x40007000
 80018b8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018be:	4a9b      	ldr	r2, [pc, #620]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018c8:	4b98      	ldr	r3, [pc, #608]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ce:	4a97      	ldr	r2, [pc, #604]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d016      	beq.n	800190e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff fa0e 	bl	8000d00 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff fa0a 	bl	8000d00 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e12a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fe:	4b8b      	ldr	r3, [pc, #556]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0ed      	beq.n	80018e8 <HAL_RCC_OscConfig+0x53c>
 800190c:	e015      	b.n	800193a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff f9f7 	bl	8000d00 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff f9f3 	bl	8000d00 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e113      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ed      	bne.n	8001916 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193a:	7ffb      	ldrb	r3, [r7, #31]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b7a      	ldr	r3, [pc, #488]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001944:	4a79      	ldr	r2, [pc, #484]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80fe 	beq.w	8001b52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	2b02      	cmp	r3, #2
 800195c:	f040 80d0 	bne.w	8001b00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001960:	4b72      	ldr	r3, [pc, #456]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001970:	429a      	cmp	r2, r3
 8001972:	d130      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	3b01      	subs	r3, #1
 8001980:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d127      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001990:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d11f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019a0:	2a07      	cmp	r2, #7
 80019a2:	bf14      	ite	ne
 80019a4:	2201      	movne	r2, #1
 80019a6:	2200      	moveq	r2, #0
 80019a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d113      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	3b01      	subs	r3, #1
 80019bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d06e      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d069      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019dc:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019e8:	4b50      	ldr	r3, [pc, #320]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0ad      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019f8:	4b4c      	ldr	r3, [pc, #304]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4b      	ldr	r2, [pc, #300]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a04:	f7ff f97c 	bl	8000d00 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f978 	bl	8000d00 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e09a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1e:	4b43      	ldr	r3, [pc, #268]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	4b40      	ldr	r3, [pc, #256]	@ (8001b30 <HAL_RCC_OscConfig+0x784>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a44:	0212      	lsls	r2, r2, #8
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a4c:	0852      	lsrs	r2, r2, #1
 8001a4e:	3a01      	subs	r2, #1
 8001a50:	0552      	lsls	r2, r2, #21
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a58:	0852      	lsrs	r2, r2, #1
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	0652      	lsls	r2, r2, #25
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a64:	0912      	lsrs	r2, r2, #4
 8001a66:	0452      	lsls	r2, r2, #17
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	4930      	ldr	r1, [pc, #192]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a70:	4b2e      	ldr	r3, [pc, #184]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2d      	ldr	r2, [pc, #180]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a2a      	ldr	r2, [pc, #168]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a88:	f7ff f93a 	bl	8000d00 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f936 	bl	8000d00 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aae:	e050      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e04f      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d148      	bne.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4a16      	ldr	r2, [pc, #88]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad8:	f7ff f912 	bl	8000d00 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f90e 	bl	8000d00 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e030      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x734>
 8001afe:	e028      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d023      	beq.n	8001b4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001b0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f8f5 	bl	8000d00 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	e00c      	b.n	8001b34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff f8f1 	bl	8000d00 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d905      	bls.n	8001b34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e013      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ec      	bne.n	8001b1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4905      	ldr	r1, [pc, #20]	@ (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_RCC_OscConfig+0x7b4>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e001      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	feeefffc 	.word	0xfeeefffc

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0e7      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b75      	ldr	r3, [pc, #468]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d910      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b72      	ldr	r3, [pc, #456]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4970      	ldr	r1, [pc, #448]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b6e      	ldr	r3, [pc, #440]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cf      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b66      	ldr	r3, [pc, #408]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d908      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b63      	ldr	r3, [pc, #396]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4960      	ldr	r1, [pc, #384]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d04c      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	4b5a      	ldr	r3, [pc, #360]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d121      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0a6      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	4b54      	ldr	r3, [pc, #336]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d115      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e09a      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e08e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e086      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b46      	ldr	r3, [pc, #280]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4943      	ldr	r1, [pc, #268]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f858 	bl	8000d00 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7ff f854 	bl	8000d00 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e06e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d010      	beq.n	8001caa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d208      	bcs.n	8001caa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	492b      	ldr	r1, [pc, #172]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001caa:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d210      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb8:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 0207 	bic.w	r2, r3, #7
 8001cc0:	4923      	ldr	r1, [pc, #140]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e036      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4918      	ldr	r1, [pc, #96]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4910      	ldr	r1, [pc, #64]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d18:	f000 f824 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	490b      	ldr	r1, [pc, #44]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f4>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	4a09      	ldr	r2, [pc, #36]	@ (8001d5c <HAL_RCC_ClockConfig+0x1f8>)
 8001d36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_RCC_ClockConfig+0x1fc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ff8f 	bl	8000c60 <HAL_InitTick>
 8001d42:	4603      	mov	r3, r0
 8001d44:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d46:	7afb      	ldrb	r3, [r7, #11]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	080044f8 	.word	0x080044f8
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d72:	4b3e      	ldr	r3, [pc, #248]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d121      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d11e      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d98:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001da4:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e005      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	e004      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001de8:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d134      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d003      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0xac>
 8001e08:	e005      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e0c:	617b      	str	r3, [r7, #20]
      break;
 8001e0e:	e005      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e12:	617b      	str	r3, [r7, #20]
      break;
 8001e14:	e002      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	617b      	str	r3, [r7, #20]
      break;
 8001e1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	3301      	adds	r3, #1
 8001e28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	fb03 f202 	mul.w	r2, r3, r2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	0e5b      	lsrs	r3, r3, #25
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08004510 	.word	0x08004510
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4904      	ldr	r1, [pc, #16]	@ (8001ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08004508 	.word	0x08004508

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ec4:	f7ff ffda 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4904      	ldr	r1, [pc, #16]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08004508 	.word	0x08004508

08001eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f04:	f7ff f9ee 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001f08:	6178      	str	r0, [r7, #20]
 8001f0a:	e014      	b.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f10:	4a24      	ldr	r2, [pc, #144]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f18:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f24:	f7ff f9de 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001f28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f3c:	d10b      	bne.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b80      	cmp	r3, #128	@ 0x80
 8001f42:	d919      	bls.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f48:	d902      	bls.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e013      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f50:	2301      	movs	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e010      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b80      	cmp	r3, #128	@ 0x80
 8001f5a:	d902      	bls.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e00a      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b80      	cmp	r3, #128	@ 0x80
 8001f66:	d102      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e004      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b70      	cmp	r3, #112	@ 0x70
 8001f72:	d101      	bne.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f74:	2301      	movs	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 0207 	bic.w	r2, r3, #7
 8001f80:	4909      	ldr	r1, [pc, #36]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f88:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d041      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fcc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fd0:	d02a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fd2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fd6:	d824      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fe2:	d81e      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fec:	d010      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fee:	e018      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff0:	4b86      	ldr	r3, [pc, #536]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a85      	ldr	r2, [pc, #532]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ffc:	e015      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fabb 	bl	8002580 <RCCEx_PLLSAI1_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800200e:	e00c      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3320      	adds	r3, #32
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fba6 	bl	8002768 <RCCEx_PLLSAI2_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	74fb      	strb	r3, [r7, #19]
      break;
 8002026:	e000      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002030:	4b76      	ldr	r3, [pc, #472]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800203e:	4973      	ldr	r1, [pc, #460]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002046:	e001      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d041      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800205c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002060:	d02a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002062:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002066:	d824      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800206c:	d008      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800206e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002072:	d81e      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800207c:	d010      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800207e:	e018      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002080:	4b62      	ldr	r3, [pc, #392]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a61      	ldr	r2, [pc, #388]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800208c:	e015      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3304      	adds	r3, #4
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fa73 	bl	8002580 <RCCEx_PLLSAI1_Config>
 800209a:	4603      	mov	r3, r0
 800209c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800209e:	e00c      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3320      	adds	r3, #32
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fb5e 	bl	8002768 <RCCEx_PLLSAI2_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b0:	e003      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	74fb      	strb	r3, [r7, #19]
      break;
 80020b6:	e000      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10b      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020c0:	4b52      	ldr	r3, [pc, #328]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020ce:	494f      	ldr	r1, [pc, #316]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020d6:	e001      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a0 	beq.w	800222a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ee:	4b47      	ldr	r3, [pc, #284]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b41      	ldr	r3, [pc, #260]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	4a40      	ldr	r2, [pc, #256]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002110:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211c:	2301      	movs	r3, #1
 800211e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002120:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3a      	ldr	r2, [pc, #232]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212c:	f7fe fde8 	bl	8000d00 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002132:	e009      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002134:	f7fe fde4 	bl	8000d00 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d902      	bls.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	74fb      	strb	r3, [r7, #19]
        break;
 8002146:	e005      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002148:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ef      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d15c      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800215a:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002160:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002164:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01f      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	d019      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002178:	4b24      	ldr	r3, [pc, #144]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002182:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002184:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	4a20      	ldr	r2, [pc, #128]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219a:	4a1c      	ldr	r2, [pc, #112]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a4:	4a19      	ldr	r2, [pc, #100]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7fe fda3 	bl	8000d00 <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021bc:	e00b      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe fd9f 	bl	8000d00 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	74fb      	strb	r3, [r7, #19]
            break;
 80021d4:	e006      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ec      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ea:	4b08      	ldr	r3, [pc, #32]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021fa:	4904      	ldr	r1, [pc, #16]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002202:	e009      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
 8002208:	e006      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002218:	7c7b      	ldrb	r3, [r7, #17]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4b9e      	ldr	r3, [pc, #632]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	4a9d      	ldr	r2, [pc, #628]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002228:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002236:	4b98      	ldr	r3, [pc, #608]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f023 0203 	bic.w	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	4994      	ldr	r1, [pc, #592]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002258:	4b8f      	ldr	r3, [pc, #572]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f023 020c 	bic.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002266:	498c      	ldr	r1, [pc, #560]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800227a:	4b87      	ldr	r3, [pc, #540]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	4983      	ldr	r1, [pc, #524]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800229c:	4b7e      	ldr	r3, [pc, #504]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	497b      	ldr	r1, [pc, #492]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022be:	4b76      	ldr	r3, [pc, #472]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022cc:	4972      	ldr	r1, [pc, #456]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	496a      	ldr	r1, [pc, #424]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002302:	4b65      	ldr	r3, [pc, #404]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002308:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002310:	4961      	ldr	r1, [pc, #388]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002324:	4b5c      	ldr	r3, [pc, #368]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002332:	4959      	ldr	r1, [pc, #356]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002346:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002354:	4950      	ldr	r1, [pc, #320]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002368:	4b4b      	ldr	r3, [pc, #300]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	4948      	ldr	r1, [pc, #288]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800238a:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002390:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002398:	493f      	ldr	r1, [pc, #252]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d028      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ba:	4937      	ldr	r1, [pc, #220]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ca:	d106      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023cc:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a31      	ldr	r2, [pc, #196]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d6:	60d3      	str	r3, [r2, #12]
 80023d8:	e011      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023e2:	d10c      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3304      	adds	r3, #4
 80023e8:	2101      	movs	r1, #1
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f8c8 	bl	8002580 <RCCEx_PLLSAI1_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d028      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800240a:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002410:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002418:	491f      	ldr	r1, [pc, #124]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002428:	d106      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a1a      	ldr	r2, [pc, #104]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002434:	60d3      	str	r3, [r2, #12]
 8002436:	e011      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002440:	d10c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f899 	bl	8002580 <RCCEx_PLLSAI1_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02b      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002486:	d109      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a02      	ldr	r2, [pc, #8]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002492:	60d3      	str	r3, [r2, #12]
 8002494:	e014      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f867 	bl	8002580 <RCCEx_PLLSAI1_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d02f      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024cc:	4b2b      	ldr	r3, [pc, #172]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024da:	4928      	ldr	r1, [pc, #160]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024ea:	d10d      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f844 	bl	8002580 <RCCEx_PLLSAI1_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d014      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	74bb      	strb	r3, [r7, #18]
 8002506:	e011      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800250c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002510:	d10c      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3320      	adds	r3, #32
 8002516:	2102      	movs	r1, #2
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f925 	bl	8002768 <RCCEx_PLLSAI2_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002538:	4b10      	ldr	r3, [pc, #64]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002546:	490d      	ldr	r1, [pc, #52]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002560:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800256a:	4904      	ldr	r1, [pc, #16]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002572:	7cbb      	ldrb	r3, [r7, #18]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000

08002580 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800258e:	4b75      	ldr	r3, [pc, #468]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d018      	beq.n	80025cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800259a:	4b72      	ldr	r3, [pc, #456]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0203 	and.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d10d      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
       ||
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
       ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d047      	beq.n	8002656 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e044      	b.n	8002656 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d018      	beq.n	8002606 <RCCEx_PLLSAI1_Config+0x86>
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d825      	bhi.n	8002624 <RCCEx_PLLSAI1_Config+0xa4>
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d002      	beq.n	80025e2 <RCCEx_PLLSAI1_Config+0x62>
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d009      	beq.n	80025f4 <RCCEx_PLLSAI1_Config+0x74>
 80025e0:	e020      	b.n	8002624 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025e2:	4b60      	ldr	r3, [pc, #384]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11d      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f2:	e01a      	b.n	800262a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d116      	bne.n	800262e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002604:	e013      	b.n	800262e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002606:	4b57      	ldr	r3, [pc, #348]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002612:	4b54      	ldr	r3, [pc, #336]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002622:	e006      	b.n	8002632 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e004      	b.n	8002634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800262a:	bf00      	nop
 800262c:	e002      	b.n	8002634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800262e:	bf00      	nop
 8002630:	e000      	b.n	8002634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002632:	bf00      	nop
    }

    if(status == HAL_OK)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10d      	bne.n	8002656 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800263a:	4b4a      	ldr	r3, [pc, #296]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	430b      	orrs	r3, r1
 8002650:	4944      	ldr	r1, [pc, #272]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d17d      	bne.n	8002758 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800265c:	4b41      	ldr	r3, [pc, #260]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a40      	ldr	r2, [pc, #256]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002668:	f7fe fb4a 	bl	8000d00 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800266e:	e009      	b.n	8002684 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002670:	f7fe fb46 	bl	8000d00 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d902      	bls.n	8002684 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	73fb      	strb	r3, [r7, #15]
        break;
 8002682:	e005      	b.n	8002690 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002684:	4b37      	ldr	r3, [pc, #220]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ef      	bne.n	8002670 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d160      	bne.n	8002758 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800269c:	4b31      	ldr	r3, [pc, #196]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6892      	ldr	r2, [r2, #8]
 80026ac:	0211      	lsls	r1, r2, #8
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	0912      	lsrs	r2, r2, #4
 80026b4:	0452      	lsls	r2, r2, #17
 80026b6:	430a      	orrs	r2, r1
 80026b8:	492a      	ldr	r1, [pc, #168]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	610b      	str	r3, [r1, #16]
 80026be:	e027      	b.n	8002710 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d112      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c6:	4b27      	ldr	r3, [pc, #156]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6892      	ldr	r2, [r2, #8]
 80026d6:	0211      	lsls	r1, r2, #8
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6912      	ldr	r2, [r2, #16]
 80026dc:	0852      	lsrs	r2, r2, #1
 80026de:	3a01      	subs	r2, #1
 80026e0:	0552      	lsls	r2, r2, #21
 80026e2:	430a      	orrs	r2, r1
 80026e4:	491f      	ldr	r1, [pc, #124]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	610b      	str	r3, [r1, #16]
 80026ea:	e011      	b.n	8002710 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6892      	ldr	r2, [r2, #8]
 80026fc:	0211      	lsls	r1, r2, #8
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6952      	ldr	r2, [r2, #20]
 8002702:	0852      	lsrs	r2, r2, #1
 8002704:	3a01      	subs	r2, #1
 8002706:	0652      	lsls	r2, r2, #25
 8002708:	430a      	orrs	r2, r1
 800270a:	4916      	ldr	r1, [pc, #88]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002710:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a13      	ldr	r2, [pc, #76]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002716:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800271a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7fe faf0 	bl	8000d00 <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002722:	e009      	b.n	8002738 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002724:	f7fe faec 	bl	8000d00 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d902      	bls.n	8002738 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	73fb      	strb	r3, [r7, #15]
          break;
 8002736:	e005      	b.n	8002744 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002738:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ef      	beq.n	8002724 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d106      	bne.n	8002758 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4904      	ldr	r1, [pc, #16]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000

08002768 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002776:	4b6a      	ldr	r3, [pc, #424]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d018      	beq.n	80027b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002782:	4b67      	ldr	r3, [pc, #412]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0203 	and.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d10d      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
       ||
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800279a:	4b61      	ldr	r3, [pc, #388]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
       ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d047      	beq.n	800283e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	e044      	b.n	800283e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d018      	beq.n	80027ee <RCCEx_PLLSAI2_Config+0x86>
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d825      	bhi.n	800280c <RCCEx_PLLSAI2_Config+0xa4>
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d002      	beq.n	80027ca <RCCEx_PLLSAI2_Config+0x62>
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d009      	beq.n	80027dc <RCCEx_PLLSAI2_Config+0x74>
 80027c8:	e020      	b.n	800280c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ca:	4b55      	ldr	r3, [pc, #340]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11d      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027da:	e01a      	b.n	8002812 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027dc:	4b50      	ldr	r3, [pc, #320]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d116      	bne.n	8002816 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ec:	e013      	b.n	8002816 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027fa:	4b49      	ldr	r3, [pc, #292]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800280a:	e006      	b.n	800281a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      break;
 8002810:	e004      	b.n	800281c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800281a:	bf00      	nop
    }

    if(status == HAL_OK)
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002822:	4b3f      	ldr	r3, [pc, #252]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	430b      	orrs	r3, r1
 8002838:	4939      	ldr	r1, [pc, #228]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d167      	bne.n	8002914 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a35      	ldr	r2, [pc, #212]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800284e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7fe fa56 	bl	8000d00 <HAL_GetTick>
 8002854:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002856:	e009      	b.n	800286c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002858:	f7fe fa52 	bl	8000d00 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d902      	bls.n	800286c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	73fb      	strb	r3, [r7, #15]
        break;
 800286a:	e005      	b.n	8002878 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800286c:	4b2c      	ldr	r3, [pc, #176]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ef      	bne.n	8002858 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d14a      	bne.n	8002914 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002884:	4b26      	ldr	r3, [pc, #152]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800288c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6892      	ldr	r2, [r2, #8]
 8002894:	0211      	lsls	r1, r2, #8
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68d2      	ldr	r2, [r2, #12]
 800289a:	0912      	lsrs	r2, r2, #4
 800289c:	0452      	lsls	r2, r2, #17
 800289e:	430a      	orrs	r2, r1
 80028a0:	491f      	ldr	r1, [pc, #124]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	614b      	str	r3, [r1, #20]
 80028a6:	e011      	b.n	80028cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6892      	ldr	r2, [r2, #8]
 80028b8:	0211      	lsls	r1, r2, #8
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6912      	ldr	r2, [r2, #16]
 80028be:	0852      	lsrs	r2, r2, #1
 80028c0:	3a01      	subs	r2, #1
 80028c2:	0652      	lsls	r2, r2, #25
 80028c4:	430a      	orrs	r2, r1
 80028c6:	4916      	ldr	r1, [pc, #88]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028cc:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a13      	ldr	r2, [pc, #76]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe fa12 	bl	8000d00 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028de:	e009      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028e0:	f7fe fa0e 	bl	8000d00 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d902      	bls.n	80028f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	73fb      	strb	r3, [r7, #15]
          break;
 80028f2:	e005      	b.n	8002900 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ef      	beq.n	80028e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	4904      	ldr	r1, [pc, #16]	@ (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e095      	b.n	8002a62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002946:	d009      	beq.n	800295c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
 800294e:	e005      	b.n	800295c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fd ff32 	bl	80007e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002992:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800299c:	d902      	bls.n	80029a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e002      	b.n	80029aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029b2:	d007      	beq.n	80029c4 <HAL_SPI_Init+0xa0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029bc:	d002      	beq.n	80029c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	ea42 0103 	orr.w	r1, r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	f003 0204 	and.w	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a40:	ea42 0103 	orr.w	r1, r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a7a:	f7fe f941 	bl	8000d00 <HAL_GetTick>
 8002a7e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d001      	beq.n	8002a94 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
 8002a92:	e15c      	b.n	8002d4e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_SPI_Transmit+0x36>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e154      	b.n	8002d4e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_SPI_Transmit+0x48>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e14d      	b.n	8002d4e <HAL_SPI_Transmit+0x2e4>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2203      	movs	r2, #3
 8002abe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	88fa      	ldrh	r2, [r7, #6]
 8002ad2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b04:	d10f      	bne.n	8002b26 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b30:	2b40      	cmp	r3, #64	@ 0x40
 8002b32:	d007      	beq.n	8002b44 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b4c:	d952      	bls.n	8002bf4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_SPI_Transmit+0xf2>
 8002b56:	8b7b      	ldrh	r3, [r7, #26]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d145      	bne.n	8002be8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b60:	881a      	ldrh	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	1c9a      	adds	r2, r3, #2
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b80:	e032      	b.n	8002be8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d112      	bne.n	8002bb6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	1c9a      	adds	r2, r3, #2
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bb4:	e018      	b.n	8002be8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bb6:	f7fe f8a3 	bl	8000d00 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d803      	bhi.n	8002bce <HAL_SPI_Transmit+0x164>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d102      	bne.n	8002bd4 <HAL_SPI_Transmit+0x16a>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0b2      	b.n	8002d4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1c7      	bne.n	8002b82 <HAL_SPI_Transmit+0x118>
 8002bf2:	e083      	b.n	8002cfc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_SPI_Transmit+0x198>
 8002bfc:	8b7b      	ldrh	r3, [r7, #26]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d177      	bne.n	8002cf2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d912      	bls.n	8002c32 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	1c9a      	adds	r2, r3, #2
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b02      	subs	r3, #2
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c30:	e05f      	b.n	8002cf2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	7812      	ldrb	r2, [r2, #0]
 8002c3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c58:	e04b      	b.n	8002cf2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d12b      	bne.n	8002cc0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d912      	bls.n	8002c98 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c76:	881a      	ldrh	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	1c9a      	adds	r2, r3, #2
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b02      	subs	r3, #2
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c96:	e02c      	b.n	8002cf2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cbe:	e018      	b.n	8002cf2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc0:	f7fe f81e 	bl	8000d00 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d803      	bhi.n	8002cd8 <HAL_SPI_Transmit+0x26e>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd6:	d102      	bne.n	8002cde <HAL_SPI_Transmit+0x274>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e02d      	b.n	8002d4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ae      	bne.n	8002c5a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	6839      	ldr	r1, [r7, #0]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f947 	bl	8002f94 <SPI_EndRxTxTransaction>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d68:	f7fd ffca 	bl	8000d00 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d78:	f7fd ffc2 	bl	8000d00 <HAL_GetTick>
 8002d7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d7e:	4b39      	ldr	r3, [pc, #228]	@ (8002e64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	015b      	lsls	r3, r3, #5
 8002d84:	0d1b      	lsrs	r3, r3, #20
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d8e:	e054      	b.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d050      	beq.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d98:	f7fd ffb2 	bl	8000d00 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d902      	bls.n	8002dae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d13d      	bne.n	8002e2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002dbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dc6:	d111      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dd0:	d004      	beq.n	8002ddc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dda:	d107      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df4:	d10f      	bne.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e017      	b.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d19b      	bne.n	8002d90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000

08002e68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	@ 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e7a:	f7fd ff41 	bl	8000d00 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002e8a:	f7fd ff39 	bl	8000d00 <HAL_GetTick>
 8002e8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e98:	4b3d      	ldr	r3, [pc, #244]	@ (8002f90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00da      	lsls	r2, r3, #3
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	0d1b      	lsrs	r3, r3, #20
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002eb0:	e060      	b.n	8002f74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002eb8:	d107      	bne.n	8002eca <SPI_WaitFifoStateUntilTimeout+0x62>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d050      	beq.n	8002f74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ed2:	f7fd ff15 	bl	8000d00 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d902      	bls.n	8002ee8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d13d      	bne.n	8002f64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ef6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f00:	d111      	bne.n	8002f26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f0a:	d004      	beq.n	8002f16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f14:	d107      	bne.n	8002f26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f2e:	d10f      	bne.n	8002f50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e010      	b.n	8002f86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d196      	bne.n	8002eb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3728      	adds	r7, #40	@ 0x28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff ff5b 	bl	8002e68 <SPI_WaitFifoStateUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e027      	b.n	8003018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2180      	movs	r1, #128	@ 0x80
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff fec0 	bl	8002d58 <SPI_WaitFlagStateUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe2:	f043 0220 	orr.w	r2, r3, #32
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e014      	b.n	8003018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff ff34 	bl	8002e68 <SPI_WaitFifoStateUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e000      	b.n	8003018 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e040      	b.n	80030b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fd66 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2224      	movs	r2, #36	@ 0x24
 800304c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fb6a 	bl	8003740 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f8af 	bl	80031d0 <UART_SetConfig>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e01b      	b.n	80030b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800308a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800309a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fbe9 	bl	8003884 <UART_CheckIdleState>
 80030b2:	4603      	mov	r3, r0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d177      	bne.n	80031c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_UART_Transmit+0x24>
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e070      	b.n	80031c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2221      	movs	r2, #33	@ 0x21
 80030f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030f2:	f7fd fe05 	bl	8000d00 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003110:	d108      	bne.n	8003124 <HAL_UART_Transmit+0x68>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d104      	bne.n	8003124 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	e003      	b.n	800312c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800312c:	e02f      	b.n	800318e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	2180      	movs	r1, #128	@ 0x80
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fc4b 	bl	80039d4 <UART_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e03b      	b.n	80031c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003160:	b292      	uxth	r2, r2
 8003162:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	3302      	adds	r3, #2
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e007      	b.n	800317c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3301      	adds	r3, #1
 800317a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1c9      	bne.n	800312e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	2140      	movs	r1, #64	@ 0x40
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fc15 	bl	80039d4 <UART_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d004      	beq.n	80031ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e005      	b.n	80031c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d4:	b08a      	sub	sp, #40	@ 0x28
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	431a      	orrs	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4ba4      	ldr	r3, [pc, #656]	@ (8003490 <UART_SetConfig+0x2c0>)
 8003200:	4013      	ands	r3, r2
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003208:	430b      	orrs	r3, r1
 800320a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a99      	ldr	r2, [pc, #612]	@ (8003494 <UART_SetConfig+0x2c4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003238:	4313      	orrs	r3, r2
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a90      	ldr	r2, [pc, #576]	@ (8003498 <UART_SetConfig+0x2c8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d126      	bne.n	80032a8 <UART_SetConfig+0xd8>
 800325a:	4b90      	ldr	r3, [pc, #576]	@ (800349c <UART_SetConfig+0x2cc>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b03      	cmp	r3, #3
 8003266:	d81b      	bhi.n	80032a0 <UART_SetConfig+0xd0>
 8003268:	a201      	add	r2, pc, #4	@ (adr r2, 8003270 <UART_SetConfig+0xa0>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	08003281 	.word	0x08003281
 8003274:	08003291 	.word	0x08003291
 8003278:	08003289 	.word	0x08003289
 800327c:	08003299 	.word	0x08003299
 8003280:	2301      	movs	r3, #1
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003286:	e116      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003288:	2302      	movs	r3, #2
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800328e:	e112      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003290:	2304      	movs	r3, #4
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003296:	e10e      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003298:	2308      	movs	r3, #8
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800329e:	e10a      	b.n	80034b6 <UART_SetConfig+0x2e6>
 80032a0:	2310      	movs	r3, #16
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a6:	e106      	b.n	80034b6 <UART_SetConfig+0x2e6>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a7c      	ldr	r2, [pc, #496]	@ (80034a0 <UART_SetConfig+0x2d0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d138      	bne.n	8003324 <UART_SetConfig+0x154>
 80032b2:	4b7a      	ldr	r3, [pc, #488]	@ (800349c <UART_SetConfig+0x2cc>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b0c      	cmp	r3, #12
 80032be:	d82d      	bhi.n	800331c <UART_SetConfig+0x14c>
 80032c0:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <UART_SetConfig+0xf8>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	0800331d 	.word	0x0800331d
 80032d0:	0800331d 	.word	0x0800331d
 80032d4:	0800331d 	.word	0x0800331d
 80032d8:	0800330d 	.word	0x0800330d
 80032dc:	0800331d 	.word	0x0800331d
 80032e0:	0800331d 	.word	0x0800331d
 80032e4:	0800331d 	.word	0x0800331d
 80032e8:	08003305 	.word	0x08003305
 80032ec:	0800331d 	.word	0x0800331d
 80032f0:	0800331d 	.word	0x0800331d
 80032f4:	0800331d 	.word	0x0800331d
 80032f8:	08003315 	.word	0x08003315
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003302:	e0d8      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003304:	2302      	movs	r3, #2
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800330a:	e0d4      	b.n	80034b6 <UART_SetConfig+0x2e6>
 800330c:	2304      	movs	r3, #4
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003312:	e0d0      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003314:	2308      	movs	r3, #8
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800331a:	e0cc      	b.n	80034b6 <UART_SetConfig+0x2e6>
 800331c:	2310      	movs	r3, #16
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003322:	e0c8      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a5e      	ldr	r2, [pc, #376]	@ (80034a4 <UART_SetConfig+0x2d4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d125      	bne.n	800337a <UART_SetConfig+0x1aa>
 800332e:	4b5b      	ldr	r3, [pc, #364]	@ (800349c <UART_SetConfig+0x2cc>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003334:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003338:	2b30      	cmp	r3, #48	@ 0x30
 800333a:	d016      	beq.n	800336a <UART_SetConfig+0x19a>
 800333c:	2b30      	cmp	r3, #48	@ 0x30
 800333e:	d818      	bhi.n	8003372 <UART_SetConfig+0x1a2>
 8003340:	2b20      	cmp	r3, #32
 8003342:	d00a      	beq.n	800335a <UART_SetConfig+0x18a>
 8003344:	2b20      	cmp	r3, #32
 8003346:	d814      	bhi.n	8003372 <UART_SetConfig+0x1a2>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <UART_SetConfig+0x182>
 800334c:	2b10      	cmp	r3, #16
 800334e:	d008      	beq.n	8003362 <UART_SetConfig+0x192>
 8003350:	e00f      	b.n	8003372 <UART_SetConfig+0x1a2>
 8003352:	2300      	movs	r3, #0
 8003354:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003358:	e0ad      	b.n	80034b6 <UART_SetConfig+0x2e6>
 800335a:	2302      	movs	r3, #2
 800335c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003360:	e0a9      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003362:	2304      	movs	r3, #4
 8003364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003368:	e0a5      	b.n	80034b6 <UART_SetConfig+0x2e6>
 800336a:	2308      	movs	r3, #8
 800336c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003370:	e0a1      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003372:	2310      	movs	r3, #16
 8003374:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003378:	e09d      	b.n	80034b6 <UART_SetConfig+0x2e6>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4a      	ldr	r2, [pc, #296]	@ (80034a8 <UART_SetConfig+0x2d8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d125      	bne.n	80033d0 <UART_SetConfig+0x200>
 8003384:	4b45      	ldr	r3, [pc, #276]	@ (800349c <UART_SetConfig+0x2cc>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800338e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003390:	d016      	beq.n	80033c0 <UART_SetConfig+0x1f0>
 8003392:	2bc0      	cmp	r3, #192	@ 0xc0
 8003394:	d818      	bhi.n	80033c8 <UART_SetConfig+0x1f8>
 8003396:	2b80      	cmp	r3, #128	@ 0x80
 8003398:	d00a      	beq.n	80033b0 <UART_SetConfig+0x1e0>
 800339a:	2b80      	cmp	r3, #128	@ 0x80
 800339c:	d814      	bhi.n	80033c8 <UART_SetConfig+0x1f8>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <UART_SetConfig+0x1d8>
 80033a2:	2b40      	cmp	r3, #64	@ 0x40
 80033a4:	d008      	beq.n	80033b8 <UART_SetConfig+0x1e8>
 80033a6:	e00f      	b.n	80033c8 <UART_SetConfig+0x1f8>
 80033a8:	2300      	movs	r3, #0
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ae:	e082      	b.n	80034b6 <UART_SetConfig+0x2e6>
 80033b0:	2302      	movs	r3, #2
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033b6:	e07e      	b.n	80034b6 <UART_SetConfig+0x2e6>
 80033b8:	2304      	movs	r3, #4
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033be:	e07a      	b.n	80034b6 <UART_SetConfig+0x2e6>
 80033c0:	2308      	movs	r3, #8
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033c6:	e076      	b.n	80034b6 <UART_SetConfig+0x2e6>
 80033c8:	2310      	movs	r3, #16
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ce:	e072      	b.n	80034b6 <UART_SetConfig+0x2e6>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a35      	ldr	r2, [pc, #212]	@ (80034ac <UART_SetConfig+0x2dc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d12a      	bne.n	8003430 <UART_SetConfig+0x260>
 80033da:	4b30      	ldr	r3, [pc, #192]	@ (800349c <UART_SetConfig+0x2cc>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033e8:	d01a      	beq.n	8003420 <UART_SetConfig+0x250>
 80033ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ee:	d81b      	bhi.n	8003428 <UART_SetConfig+0x258>
 80033f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f4:	d00c      	beq.n	8003410 <UART_SetConfig+0x240>
 80033f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033fa:	d815      	bhi.n	8003428 <UART_SetConfig+0x258>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <UART_SetConfig+0x238>
 8003400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003404:	d008      	beq.n	8003418 <UART_SetConfig+0x248>
 8003406:	e00f      	b.n	8003428 <UART_SetConfig+0x258>
 8003408:	2300      	movs	r3, #0
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340e:	e052      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003410:	2302      	movs	r3, #2
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003416:	e04e      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003418:	2304      	movs	r3, #4
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341e:	e04a      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003420:	2308      	movs	r3, #8
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003426:	e046      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003428:	2310      	movs	r3, #16
 800342a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800342e:	e042      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a17      	ldr	r2, [pc, #92]	@ (8003494 <UART_SetConfig+0x2c4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d13a      	bne.n	80034b0 <UART_SetConfig+0x2e0>
 800343a:	4b18      	ldr	r3, [pc, #96]	@ (800349c <UART_SetConfig+0x2cc>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003440:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003444:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003448:	d01a      	beq.n	8003480 <UART_SetConfig+0x2b0>
 800344a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800344e:	d81b      	bhi.n	8003488 <UART_SetConfig+0x2b8>
 8003450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003454:	d00c      	beq.n	8003470 <UART_SetConfig+0x2a0>
 8003456:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800345a:	d815      	bhi.n	8003488 <UART_SetConfig+0x2b8>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <UART_SetConfig+0x298>
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003464:	d008      	beq.n	8003478 <UART_SetConfig+0x2a8>
 8003466:	e00f      	b.n	8003488 <UART_SetConfig+0x2b8>
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346e:	e022      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003470:	2302      	movs	r3, #2
 8003472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003476:	e01e      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003478:	2304      	movs	r3, #4
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800347e:	e01a      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003480:	2308      	movs	r3, #8
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003486:	e016      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003488:	2310      	movs	r3, #16
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800348e:	e012      	b.n	80034b6 <UART_SetConfig+0x2e6>
 8003490:	efff69f3 	.word	0xefff69f3
 8003494:	40008000 	.word	0x40008000
 8003498:	40013800 	.word	0x40013800
 800349c:	40021000 	.word	0x40021000
 80034a0:	40004400 	.word	0x40004400
 80034a4:	40004800 	.word	0x40004800
 80034a8:	40004c00 	.word	0x40004c00
 80034ac:	40005000 	.word	0x40005000
 80034b0:	2310      	movs	r3, #16
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a9f      	ldr	r2, [pc, #636]	@ (8003738 <UART_SetConfig+0x568>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d17a      	bne.n	80035b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d824      	bhi.n	8003512 <UART_SetConfig+0x342>
 80034c8:	a201      	add	r2, pc, #4	@ (adr r2, 80034d0 <UART_SetConfig+0x300>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	08003513 	.word	0x08003513
 80034d8:	080034fd 	.word	0x080034fd
 80034dc:	08003513 	.word	0x08003513
 80034e0:	08003503 	.word	0x08003503
 80034e4:	08003513 	.word	0x08003513
 80034e8:	08003513 	.word	0x08003513
 80034ec:	08003513 	.word	0x08003513
 80034f0:	0800350b 	.word	0x0800350b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7fe fcce 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80034f8:	61f8      	str	r0, [r7, #28]
        break;
 80034fa:	e010      	b.n	800351e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034fc:	4b8f      	ldr	r3, [pc, #572]	@ (800373c <UART_SetConfig+0x56c>)
 80034fe:	61fb      	str	r3, [r7, #28]
        break;
 8003500:	e00d      	b.n	800351e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003502:	f7fe fc2f 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8003506:	61f8      	str	r0, [r7, #28]
        break;
 8003508:	e009      	b.n	800351e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800350e:	61fb      	str	r3, [r7, #28]
        break;
 8003510:	e005      	b.n	800351e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800351c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80fb 	beq.w	800371c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	429a      	cmp	r2, r3
 8003534:	d305      	bcc.n	8003542 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	429a      	cmp	r2, r3
 8003540:	d903      	bls.n	800354a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003548:	e0e8      	b.n	800371c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	2200      	movs	r2, #0
 800354e:	461c      	mov	r4, r3
 8003550:	4615      	mov	r5, r2
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	022b      	lsls	r3, r5, #8
 800355c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003560:	0222      	lsls	r2, r4, #8
 8003562:	68f9      	ldr	r1, [r7, #12]
 8003564:	6849      	ldr	r1, [r1, #4]
 8003566:	0849      	lsrs	r1, r1, #1
 8003568:	2000      	movs	r0, #0
 800356a:	4688      	mov	r8, r1
 800356c:	4681      	mov	r9, r0
 800356e:	eb12 0a08 	adds.w	sl, r2, r8
 8003572:	eb43 0b09 	adc.w	fp, r3, r9
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003584:	4650      	mov	r0, sl
 8003586:	4659      	mov	r1, fp
 8003588:	f7fc fe1e 	bl	80001c8 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800359a:	d308      	bcc.n	80035ae <UART_SetConfig+0x3de>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035a2:	d204      	bcs.n	80035ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	e0b6      	b.n	800371c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035b4:	e0b2      	b.n	800371c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035be:	d15e      	bne.n	800367e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80035c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d828      	bhi.n	800361a <UART_SetConfig+0x44a>
 80035c8:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <UART_SetConfig+0x400>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	080035fd 	.word	0x080035fd
 80035d8:	08003605 	.word	0x08003605
 80035dc:	0800361b 	.word	0x0800361b
 80035e0:	0800360b 	.word	0x0800360b
 80035e4:	0800361b 	.word	0x0800361b
 80035e8:	0800361b 	.word	0x0800361b
 80035ec:	0800361b 	.word	0x0800361b
 80035f0:	08003613 	.word	0x08003613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f4:	f7fe fc4e 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80035f8:	61f8      	str	r0, [r7, #28]
        break;
 80035fa:	e014      	b.n	8003626 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035fc:	f7fe fc60 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8003600:	61f8      	str	r0, [r7, #28]
        break;
 8003602:	e010      	b.n	8003626 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003604:	4b4d      	ldr	r3, [pc, #308]	@ (800373c <UART_SetConfig+0x56c>)
 8003606:	61fb      	str	r3, [r7, #28]
        break;
 8003608:	e00d      	b.n	8003626 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360a:	f7fe fbab 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 800360e:	61f8      	str	r0, [r7, #28]
        break;
 8003610:	e009      	b.n	8003626 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003616:	61fb      	str	r3, [r7, #28]
        break;
 8003618:	e005      	b.n	8003626 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d077      	beq.n	800371c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005a      	lsls	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	441a      	add	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b0f      	cmp	r3, #15
 8003646:	d916      	bls.n	8003676 <UART_SetConfig+0x4a6>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364e:	d212      	bcs.n	8003676 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f023 030f 	bic.w	r3, r3, #15
 8003658:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	b29b      	uxth	r3, r3
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	b29a      	uxth	r2, r3
 8003666:	8afb      	ldrh	r3, [r7, #22]
 8003668:	4313      	orrs	r3, r2
 800366a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	8afa      	ldrh	r2, [r7, #22]
 8003672:	60da      	str	r2, [r3, #12]
 8003674:	e052      	b.n	800371c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800367c:	e04e      	b.n	800371c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800367e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003682:	2b08      	cmp	r3, #8
 8003684:	d827      	bhi.n	80036d6 <UART_SetConfig+0x506>
 8003686:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <UART_SetConfig+0x4bc>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	080036b1 	.word	0x080036b1
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036c1 	.word	0x080036c1
 8003698:	080036d7 	.word	0x080036d7
 800369c:	080036c7 	.word	0x080036c7
 80036a0:	080036d7 	.word	0x080036d7
 80036a4:	080036d7 	.word	0x080036d7
 80036a8:	080036d7 	.word	0x080036d7
 80036ac:	080036cf 	.word	0x080036cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b0:	f7fe fbf0 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80036b4:	61f8      	str	r0, [r7, #28]
        break;
 80036b6:	e014      	b.n	80036e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b8:	f7fe fc02 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 80036bc:	61f8      	str	r0, [r7, #28]
        break;
 80036be:	e010      	b.n	80036e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c0:	4b1e      	ldr	r3, [pc, #120]	@ (800373c <UART_SetConfig+0x56c>)
 80036c2:	61fb      	str	r3, [r7, #28]
        break;
 80036c4:	e00d      	b.n	80036e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c6:	f7fe fb4d 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 80036ca:	61f8      	str	r0, [r7, #28]
        break;
 80036cc:	e009      	b.n	80036e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036d2:	61fb      	str	r3, [r7, #28]
        break;
 80036d4:	e005      	b.n	80036e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036e0:	bf00      	nop
    }

    if (pclk != 0U)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d019      	beq.n	800371c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	085a      	lsrs	r2, r3, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	441a      	add	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b0f      	cmp	r3, #15
 8003700:	d909      	bls.n	8003716 <UART_SetConfig+0x546>
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003708:	d205      	bcs.n	8003716 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e002      	b.n	800371c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003728:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800372c:	4618      	mov	r0, r3
 800372e:	3728      	adds	r7, #40	@ 0x28
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003736:	bf00      	nop
 8003738:	40008000 	.word	0x40008000
 800373c:	00f42400 	.word	0x00f42400

08003740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01a      	beq.n	8003856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800383e:	d10a      	bne.n	8003856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]
  }
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b098      	sub	sp, #96	@ 0x60
 8003888:	af02      	add	r7, sp, #8
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003894:	f7fd fa34 	bl	8000d00 <HAL_GetTick>
 8003898:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d12e      	bne.n	8003906 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b0:	2200      	movs	r2, #0
 80038b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f88c 	bl	80039d4 <UART_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d021      	beq.n	8003906 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e6      	bne.n	80038c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e062      	b.n	80039cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d149      	bne.n	80039a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800391c:	2200      	movs	r2, #0
 800391e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f856 	bl	80039d4 <UART_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d03c      	beq.n	80039a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	623b      	str	r3, [r7, #32]
   return(result);
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394c:	633b      	str	r3, [r7, #48]	@ 0x30
 800394e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800395a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e6      	bne.n	800392e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3308      	adds	r3, #8
 8003966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003980:	61fa      	str	r2, [r7, #28]
 8003982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	69b9      	ldr	r1, [r7, #24]
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	617b      	str	r3, [r7, #20]
   return(result);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e5      	bne.n	8003960 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e011      	b.n	80039cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3758      	adds	r7, #88	@ 0x58
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e4:	e04f      	b.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d04b      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ee:	f7fd f987 	bl	8000d00 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e04e      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d037      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b80      	cmp	r3, #128	@ 0x80
 8003a1a:	d034      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b40      	cmp	r3, #64	@ 0x40
 8003a20:	d031      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d110      	bne.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2208      	movs	r2, #8
 8003a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f838 	bl	8003aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2208      	movs	r2, #8
 8003a42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e029      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a60:	d111      	bne.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f81e 	bl	8003aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e00f      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	bf0c      	ite	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	2300      	movne	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d0a0      	beq.n	80039e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b095      	sub	sp, #84	@ 0x54
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ad6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e6      	bne.n	8003ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3308      	adds	r3, #8
 8003aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3308      	adds	r3, #8
 8003b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e5      	bne.n	8003ae8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d118      	bne.n	8003b56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f023 0310 	bic.w	r3, r3, #16
 8003b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6979      	ldr	r1, [r7, #20]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e6      	bne.n	8003b24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b6a:	bf00      	nop
 8003b6c:	3754      	adds	r7, #84	@ 0x54
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <std>:
 8003b78:	2300      	movs	r3, #0
 8003b7a:	b510      	push	{r4, lr}
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b86:	6083      	str	r3, [r0, #8]
 8003b88:	8181      	strh	r1, [r0, #12]
 8003b8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b8c:	81c2      	strh	r2, [r0, #14]
 8003b8e:	6183      	str	r3, [r0, #24]
 8003b90:	4619      	mov	r1, r3
 8003b92:	2208      	movs	r2, #8
 8003b94:	305c      	adds	r0, #92	@ 0x5c
 8003b96:	f000 f9e7 	bl	8003f68 <memset>
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <std+0x58>)
 8003b9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <std+0x5c>)
 8003ba0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <std+0x60>)
 8003ba4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <std+0x64>)
 8003ba8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <std+0x68>)
 8003bac:	6224      	str	r4, [r4, #32]
 8003bae:	429c      	cmp	r4, r3
 8003bb0:	d006      	beq.n	8003bc0 <std+0x48>
 8003bb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bb6:	4294      	cmp	r4, r2
 8003bb8:	d002      	beq.n	8003bc0 <std+0x48>
 8003bba:	33d0      	adds	r3, #208	@ 0xd0
 8003bbc:	429c      	cmp	r4, r3
 8003bbe:	d105      	bne.n	8003bcc <std+0x54>
 8003bc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bc8:	f000 ba46 	b.w	8004058 <__retarget_lock_init_recursive>
 8003bcc:	bd10      	pop	{r4, pc}
 8003bce:	bf00      	nop
 8003bd0:	08003db9 	.word	0x08003db9
 8003bd4:	08003ddb 	.word	0x08003ddb
 8003bd8:	08003e13 	.word	0x08003e13
 8003bdc:	08003e37 	.word	0x08003e37
 8003be0:	20000178 	.word	0x20000178

08003be4 <stdio_exit_handler>:
 8003be4:	4a02      	ldr	r2, [pc, #8]	@ (8003bf0 <stdio_exit_handler+0xc>)
 8003be6:	4903      	ldr	r1, [pc, #12]	@ (8003bf4 <stdio_exit_handler+0x10>)
 8003be8:	4803      	ldr	r0, [pc, #12]	@ (8003bf8 <stdio_exit_handler+0x14>)
 8003bea:	f000 b869 	b.w	8003cc0 <_fwalk_sglue>
 8003bee:	bf00      	nop
 8003bf0:	2000000c 	.word	0x2000000c
 8003bf4:	08004359 	.word	0x08004359
 8003bf8:	2000001c 	.word	0x2000001c

08003bfc <cleanup_stdio>:
 8003bfc:	6841      	ldr	r1, [r0, #4]
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003c30 <cleanup_stdio+0x34>)
 8003c00:	4299      	cmp	r1, r3
 8003c02:	b510      	push	{r4, lr}
 8003c04:	4604      	mov	r4, r0
 8003c06:	d001      	beq.n	8003c0c <cleanup_stdio+0x10>
 8003c08:	f000 fba6 	bl	8004358 <_fflush_r>
 8003c0c:	68a1      	ldr	r1, [r4, #8]
 8003c0e:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <cleanup_stdio+0x38>)
 8003c10:	4299      	cmp	r1, r3
 8003c12:	d002      	beq.n	8003c1a <cleanup_stdio+0x1e>
 8003c14:	4620      	mov	r0, r4
 8003c16:	f000 fb9f 	bl	8004358 <_fflush_r>
 8003c1a:	68e1      	ldr	r1, [r4, #12]
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <cleanup_stdio+0x3c>)
 8003c1e:	4299      	cmp	r1, r3
 8003c20:	d004      	beq.n	8003c2c <cleanup_stdio+0x30>
 8003c22:	4620      	mov	r0, r4
 8003c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c28:	f000 bb96 	b.w	8004358 <_fflush_r>
 8003c2c:	bd10      	pop	{r4, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000178 	.word	0x20000178
 8003c34:	200001e0 	.word	0x200001e0
 8003c38:	20000248 	.word	0x20000248

08003c3c <global_stdio_init.part.0>:
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <global_stdio_init.part.0+0x30>)
 8003c40:	4c0b      	ldr	r4, [pc, #44]	@ (8003c70 <global_stdio_init.part.0+0x34>)
 8003c42:	4a0c      	ldr	r2, [pc, #48]	@ (8003c74 <global_stdio_init.part.0+0x38>)
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	4620      	mov	r0, r4
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2104      	movs	r1, #4
 8003c4c:	f7ff ff94 	bl	8003b78 <std>
 8003c50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c54:	2201      	movs	r2, #1
 8003c56:	2109      	movs	r1, #9
 8003c58:	f7ff ff8e 	bl	8003b78 <std>
 8003c5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c60:	2202      	movs	r2, #2
 8003c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c66:	2112      	movs	r1, #18
 8003c68:	f7ff bf86 	b.w	8003b78 <std>
 8003c6c:	200002b0 	.word	0x200002b0
 8003c70:	20000178 	.word	0x20000178
 8003c74:	08003be5 	.word	0x08003be5

08003c78 <__sfp_lock_acquire>:
 8003c78:	4801      	ldr	r0, [pc, #4]	@ (8003c80 <__sfp_lock_acquire+0x8>)
 8003c7a:	f000 b9ee 	b.w	800405a <__retarget_lock_acquire_recursive>
 8003c7e:	bf00      	nop
 8003c80:	200002b9 	.word	0x200002b9

08003c84 <__sfp_lock_release>:
 8003c84:	4801      	ldr	r0, [pc, #4]	@ (8003c8c <__sfp_lock_release+0x8>)
 8003c86:	f000 b9e9 	b.w	800405c <__retarget_lock_release_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	200002b9 	.word	0x200002b9

08003c90 <__sinit>:
 8003c90:	b510      	push	{r4, lr}
 8003c92:	4604      	mov	r4, r0
 8003c94:	f7ff fff0 	bl	8003c78 <__sfp_lock_acquire>
 8003c98:	6a23      	ldr	r3, [r4, #32]
 8003c9a:	b11b      	cbz	r3, 8003ca4 <__sinit+0x14>
 8003c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca0:	f7ff bff0 	b.w	8003c84 <__sfp_lock_release>
 8003ca4:	4b04      	ldr	r3, [pc, #16]	@ (8003cb8 <__sinit+0x28>)
 8003ca6:	6223      	str	r3, [r4, #32]
 8003ca8:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <__sinit+0x2c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f5      	bne.n	8003c9c <__sinit+0xc>
 8003cb0:	f7ff ffc4 	bl	8003c3c <global_stdio_init.part.0>
 8003cb4:	e7f2      	b.n	8003c9c <__sinit+0xc>
 8003cb6:	bf00      	nop
 8003cb8:	08003bfd 	.word	0x08003bfd
 8003cbc:	200002b0 	.word	0x200002b0

08003cc0 <_fwalk_sglue>:
 8003cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc4:	4607      	mov	r7, r0
 8003cc6:	4688      	mov	r8, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	2600      	movs	r6, #0
 8003ccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003cd4:	d505      	bpl.n	8003ce2 <_fwalk_sglue+0x22>
 8003cd6:	6824      	ldr	r4, [r4, #0]
 8003cd8:	2c00      	cmp	r4, #0
 8003cda:	d1f7      	bne.n	8003ccc <_fwalk_sglue+0xc>
 8003cdc:	4630      	mov	r0, r6
 8003cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce2:	89ab      	ldrh	r3, [r5, #12]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d907      	bls.n	8003cf8 <_fwalk_sglue+0x38>
 8003ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cec:	3301      	adds	r3, #1
 8003cee:	d003      	beq.n	8003cf8 <_fwalk_sglue+0x38>
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	47c0      	blx	r8
 8003cf6:	4306      	orrs	r6, r0
 8003cf8:	3568      	adds	r5, #104	@ 0x68
 8003cfa:	e7e9      	b.n	8003cd0 <_fwalk_sglue+0x10>

08003cfc <_puts_r>:
 8003cfc:	6a03      	ldr	r3, [r0, #32]
 8003cfe:	b570      	push	{r4, r5, r6, lr}
 8003d00:	6884      	ldr	r4, [r0, #8]
 8003d02:	4605      	mov	r5, r0
 8003d04:	460e      	mov	r6, r1
 8003d06:	b90b      	cbnz	r3, 8003d0c <_puts_r+0x10>
 8003d08:	f7ff ffc2 	bl	8003c90 <__sinit>
 8003d0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d0e:	07db      	lsls	r3, r3, #31
 8003d10:	d405      	bmi.n	8003d1e <_puts_r+0x22>
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	0598      	lsls	r0, r3, #22
 8003d16:	d402      	bmi.n	8003d1e <_puts_r+0x22>
 8003d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d1a:	f000 f99e 	bl	800405a <__retarget_lock_acquire_recursive>
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	0719      	lsls	r1, r3, #28
 8003d22:	d502      	bpl.n	8003d2a <_puts_r+0x2e>
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d135      	bne.n	8003d96 <_puts_r+0x9a>
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	f000 f8c5 	bl	8003ebc <__swsetup_r>
 8003d32:	b380      	cbz	r0, 8003d96 <_puts_r+0x9a>
 8003d34:	f04f 35ff 	mov.w	r5, #4294967295
 8003d38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d3a:	07da      	lsls	r2, r3, #31
 8003d3c:	d405      	bmi.n	8003d4a <_puts_r+0x4e>
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	059b      	lsls	r3, r3, #22
 8003d42:	d402      	bmi.n	8003d4a <_puts_r+0x4e>
 8003d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d46:	f000 f989 	bl	800405c <__retarget_lock_release_recursive>
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da04      	bge.n	8003d5c <_puts_r+0x60>
 8003d52:	69a2      	ldr	r2, [r4, #24]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	dc17      	bgt.n	8003d88 <_puts_r+0x8c>
 8003d58:	290a      	cmp	r1, #10
 8003d5a:	d015      	beq.n	8003d88 <_puts_r+0x8c>
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	6022      	str	r2, [r4, #0]
 8003d62:	7019      	strb	r1, [r3, #0]
 8003d64:	68a3      	ldr	r3, [r4, #8]
 8003d66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	60a3      	str	r3, [r4, #8]
 8003d6e:	2900      	cmp	r1, #0
 8003d70:	d1ed      	bne.n	8003d4e <_puts_r+0x52>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da11      	bge.n	8003d9a <_puts_r+0x9e>
 8003d76:	4622      	mov	r2, r4
 8003d78:	210a      	movs	r1, #10
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	f000 f85f 	bl	8003e3e <__swbuf_r>
 8003d80:	3001      	adds	r0, #1
 8003d82:	d0d7      	beq.n	8003d34 <_puts_r+0x38>
 8003d84:	250a      	movs	r5, #10
 8003d86:	e7d7      	b.n	8003d38 <_puts_r+0x3c>
 8003d88:	4622      	mov	r2, r4
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f000 f857 	bl	8003e3e <__swbuf_r>
 8003d90:	3001      	adds	r0, #1
 8003d92:	d1e7      	bne.n	8003d64 <_puts_r+0x68>
 8003d94:	e7ce      	b.n	8003d34 <_puts_r+0x38>
 8003d96:	3e01      	subs	r6, #1
 8003d98:	e7e4      	b.n	8003d64 <_puts_r+0x68>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	6022      	str	r2, [r4, #0]
 8003da0:	220a      	movs	r2, #10
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	e7ee      	b.n	8003d84 <_puts_r+0x88>
	...

08003da8 <puts>:
 8003da8:	4b02      	ldr	r3, [pc, #8]	@ (8003db4 <puts+0xc>)
 8003daa:	4601      	mov	r1, r0
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	f7ff bfa5 	b.w	8003cfc <_puts_r>
 8003db2:	bf00      	nop
 8003db4:	20000018 	.word	0x20000018

08003db8 <__sread>:
 8003db8:	b510      	push	{r4, lr}
 8003dba:	460c      	mov	r4, r1
 8003dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc0:	f000 f8fc 	bl	8003fbc <_read_r>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	bfab      	itete	ge
 8003dc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dca:	89a3      	ldrhlt	r3, [r4, #12]
 8003dcc:	181b      	addge	r3, r3, r0
 8003dce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dd2:	bfac      	ite	ge
 8003dd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003dd6:	81a3      	strhlt	r3, [r4, #12]
 8003dd8:	bd10      	pop	{r4, pc}

08003dda <__swrite>:
 8003dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dde:	461f      	mov	r7, r3
 8003de0:	898b      	ldrh	r3, [r1, #12]
 8003de2:	05db      	lsls	r3, r3, #23
 8003de4:	4605      	mov	r5, r0
 8003de6:	460c      	mov	r4, r1
 8003de8:	4616      	mov	r6, r2
 8003dea:	d505      	bpl.n	8003df8 <__swrite+0x1e>
 8003dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df0:	2302      	movs	r3, #2
 8003df2:	2200      	movs	r2, #0
 8003df4:	f000 f8d0 	bl	8003f98 <_lseek_r>
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e02:	81a3      	strh	r3, [r4, #12]
 8003e04:	4632      	mov	r2, r6
 8003e06:	463b      	mov	r3, r7
 8003e08:	4628      	mov	r0, r5
 8003e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0e:	f000 b8e7 	b.w	8003fe0 <_write_r>

08003e12 <__sseek>:
 8003e12:	b510      	push	{r4, lr}
 8003e14:	460c      	mov	r4, r1
 8003e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1a:	f000 f8bd 	bl	8003f98 <_lseek_r>
 8003e1e:	1c43      	adds	r3, r0, #1
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	bf15      	itete	ne
 8003e24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e2e:	81a3      	strheq	r3, [r4, #12]
 8003e30:	bf18      	it	ne
 8003e32:	81a3      	strhne	r3, [r4, #12]
 8003e34:	bd10      	pop	{r4, pc}

08003e36 <__sclose>:
 8003e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e3a:	f000 b89d 	b.w	8003f78 <_close_r>

08003e3e <__swbuf_r>:
 8003e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e40:	460e      	mov	r6, r1
 8003e42:	4614      	mov	r4, r2
 8003e44:	4605      	mov	r5, r0
 8003e46:	b118      	cbz	r0, 8003e50 <__swbuf_r+0x12>
 8003e48:	6a03      	ldr	r3, [r0, #32]
 8003e4a:	b90b      	cbnz	r3, 8003e50 <__swbuf_r+0x12>
 8003e4c:	f7ff ff20 	bl	8003c90 <__sinit>
 8003e50:	69a3      	ldr	r3, [r4, #24]
 8003e52:	60a3      	str	r3, [r4, #8]
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	071a      	lsls	r2, r3, #28
 8003e58:	d501      	bpl.n	8003e5e <__swbuf_r+0x20>
 8003e5a:	6923      	ldr	r3, [r4, #16]
 8003e5c:	b943      	cbnz	r3, 8003e70 <__swbuf_r+0x32>
 8003e5e:	4621      	mov	r1, r4
 8003e60:	4628      	mov	r0, r5
 8003e62:	f000 f82b 	bl	8003ebc <__swsetup_r>
 8003e66:	b118      	cbz	r0, 8003e70 <__swbuf_r+0x32>
 8003e68:	f04f 37ff 	mov.w	r7, #4294967295
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	6922      	ldr	r2, [r4, #16]
 8003e74:	1a98      	subs	r0, r3, r2
 8003e76:	6963      	ldr	r3, [r4, #20]
 8003e78:	b2f6      	uxtb	r6, r6
 8003e7a:	4283      	cmp	r3, r0
 8003e7c:	4637      	mov	r7, r6
 8003e7e:	dc05      	bgt.n	8003e8c <__swbuf_r+0x4e>
 8003e80:	4621      	mov	r1, r4
 8003e82:	4628      	mov	r0, r5
 8003e84:	f000 fa68 	bl	8004358 <_fflush_r>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d1ed      	bne.n	8003e68 <__swbuf_r+0x2a>
 8003e8c:	68a3      	ldr	r3, [r4, #8]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	60a3      	str	r3, [r4, #8]
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	6022      	str	r2, [r4, #0]
 8003e98:	701e      	strb	r6, [r3, #0]
 8003e9a:	6962      	ldr	r2, [r4, #20]
 8003e9c:	1c43      	adds	r3, r0, #1
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d004      	beq.n	8003eac <__swbuf_r+0x6e>
 8003ea2:	89a3      	ldrh	r3, [r4, #12]
 8003ea4:	07db      	lsls	r3, r3, #31
 8003ea6:	d5e1      	bpl.n	8003e6c <__swbuf_r+0x2e>
 8003ea8:	2e0a      	cmp	r6, #10
 8003eaa:	d1df      	bne.n	8003e6c <__swbuf_r+0x2e>
 8003eac:	4621      	mov	r1, r4
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f000 fa52 	bl	8004358 <_fflush_r>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d0d9      	beq.n	8003e6c <__swbuf_r+0x2e>
 8003eb8:	e7d6      	b.n	8003e68 <__swbuf_r+0x2a>
	...

08003ebc <__swsetup_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4b29      	ldr	r3, [pc, #164]	@ (8003f64 <__swsetup_r+0xa8>)
 8003ec0:	4605      	mov	r5, r0
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	b118      	cbz	r0, 8003ed0 <__swsetup_r+0x14>
 8003ec8:	6a03      	ldr	r3, [r0, #32]
 8003eca:	b90b      	cbnz	r3, 8003ed0 <__swsetup_r+0x14>
 8003ecc:	f7ff fee0 	bl	8003c90 <__sinit>
 8003ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ed4:	0719      	lsls	r1, r3, #28
 8003ed6:	d422      	bmi.n	8003f1e <__swsetup_r+0x62>
 8003ed8:	06da      	lsls	r2, r3, #27
 8003eda:	d407      	bmi.n	8003eec <__swsetup_r+0x30>
 8003edc:	2209      	movs	r2, #9
 8003ede:	602a      	str	r2, [r5, #0]
 8003ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ee4:	81a3      	strh	r3, [r4, #12]
 8003ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eea:	e033      	b.n	8003f54 <__swsetup_r+0x98>
 8003eec:	0758      	lsls	r0, r3, #29
 8003eee:	d512      	bpl.n	8003f16 <__swsetup_r+0x5a>
 8003ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ef2:	b141      	cbz	r1, 8003f06 <__swsetup_r+0x4a>
 8003ef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ef8:	4299      	cmp	r1, r3
 8003efa:	d002      	beq.n	8003f02 <__swsetup_r+0x46>
 8003efc:	4628      	mov	r0, r5
 8003efe:	f000 f8af 	bl	8004060 <_free_r>
 8003f02:	2300      	movs	r3, #0
 8003f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f0c:	81a3      	strh	r3, [r4, #12]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6063      	str	r3, [r4, #4]
 8003f12:	6923      	ldr	r3, [r4, #16]
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	89a3      	ldrh	r3, [r4, #12]
 8003f18:	f043 0308 	orr.w	r3, r3, #8
 8003f1c:	81a3      	strh	r3, [r4, #12]
 8003f1e:	6923      	ldr	r3, [r4, #16]
 8003f20:	b94b      	cbnz	r3, 8003f36 <__swsetup_r+0x7a>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f2c:	d003      	beq.n	8003f36 <__swsetup_r+0x7a>
 8003f2e:	4621      	mov	r1, r4
 8003f30:	4628      	mov	r0, r5
 8003f32:	f000 fa5f 	bl	80043f4 <__smakebuf_r>
 8003f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f3a:	f013 0201 	ands.w	r2, r3, #1
 8003f3e:	d00a      	beq.n	8003f56 <__swsetup_r+0x9a>
 8003f40:	2200      	movs	r2, #0
 8003f42:	60a2      	str	r2, [r4, #8]
 8003f44:	6962      	ldr	r2, [r4, #20]
 8003f46:	4252      	negs	r2, r2
 8003f48:	61a2      	str	r2, [r4, #24]
 8003f4a:	6922      	ldr	r2, [r4, #16]
 8003f4c:	b942      	cbnz	r2, 8003f60 <__swsetup_r+0xa4>
 8003f4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f52:	d1c5      	bne.n	8003ee0 <__swsetup_r+0x24>
 8003f54:	bd38      	pop	{r3, r4, r5, pc}
 8003f56:	0799      	lsls	r1, r3, #30
 8003f58:	bf58      	it	pl
 8003f5a:	6962      	ldrpl	r2, [r4, #20]
 8003f5c:	60a2      	str	r2, [r4, #8]
 8003f5e:	e7f4      	b.n	8003f4a <__swsetup_r+0x8e>
 8003f60:	2000      	movs	r0, #0
 8003f62:	e7f7      	b.n	8003f54 <__swsetup_r+0x98>
 8003f64:	20000018 	.word	0x20000018

08003f68 <memset>:
 8003f68:	4402      	add	r2, r0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d100      	bne.n	8003f72 <memset+0xa>
 8003f70:	4770      	bx	lr
 8003f72:	f803 1b01 	strb.w	r1, [r3], #1
 8003f76:	e7f9      	b.n	8003f6c <memset+0x4>

08003f78 <_close_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	4d06      	ldr	r5, [pc, #24]	@ (8003f94 <_close_r+0x1c>)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4604      	mov	r4, r0
 8003f80:	4608      	mov	r0, r1
 8003f82:	602b      	str	r3, [r5, #0]
 8003f84:	f7fc fd1a 	bl	80009bc <_close>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_close_r+0x1a>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_close_r+0x1a>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	200002b4 	.word	0x200002b4

08003f98 <_lseek_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	4d07      	ldr	r5, [pc, #28]	@ (8003fb8 <_lseek_r+0x20>)
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	4608      	mov	r0, r1
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	602a      	str	r2, [r5, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f7fc fd2f 	bl	8000a0a <_lseek>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d102      	bne.n	8003fb6 <_lseek_r+0x1e>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	b103      	cbz	r3, 8003fb6 <_lseek_r+0x1e>
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	200002b4 	.word	0x200002b4

08003fbc <_read_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4d07      	ldr	r5, [pc, #28]	@ (8003fdc <_read_r+0x20>)
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	4608      	mov	r0, r1
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	602a      	str	r2, [r5, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f7fc fcbd 	bl	800094a <_read>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_read_r+0x1e>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_read_r+0x1e>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	200002b4 	.word	0x200002b4

08003fe0 <_write_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4d07      	ldr	r5, [pc, #28]	@ (8004000 <_write_r+0x20>)
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	4608      	mov	r0, r1
 8003fe8:	4611      	mov	r1, r2
 8003fea:	2200      	movs	r2, #0
 8003fec:	602a      	str	r2, [r5, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f7fc fcc8 	bl	8000984 <_write>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_write_r+0x1e>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_write_r+0x1e>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	200002b4 	.word	0x200002b4

08004004 <__errno>:
 8004004:	4b01      	ldr	r3, [pc, #4]	@ (800400c <__errno+0x8>)
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000018 	.word	0x20000018

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4d0d      	ldr	r5, [pc, #52]	@ (8004048 <__libc_init_array+0x38>)
 8004014:	4c0d      	ldr	r4, [pc, #52]	@ (800404c <__libc_init_array+0x3c>)
 8004016:	1b64      	subs	r4, r4, r5
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	2600      	movs	r6, #0
 800401c:	42a6      	cmp	r6, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4d0b      	ldr	r5, [pc, #44]	@ (8004050 <__libc_init_array+0x40>)
 8004022:	4c0c      	ldr	r4, [pc, #48]	@ (8004054 <__libc_init_array+0x44>)
 8004024:	f000 fa54 	bl	80044d0 <_init>
 8004028:	1b64      	subs	r4, r4, r5
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	2600      	movs	r6, #0
 800402e:	42a6      	cmp	r6, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f855 3b04 	ldr.w	r3, [r5], #4
 8004038:	4798      	blx	r3
 800403a:	3601      	adds	r6, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004042:	4798      	blx	r3
 8004044:	3601      	adds	r6, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	08004548 	.word	0x08004548
 800404c:	08004548 	.word	0x08004548
 8004050:	08004548 	.word	0x08004548
 8004054:	0800454c 	.word	0x0800454c

08004058 <__retarget_lock_init_recursive>:
 8004058:	4770      	bx	lr

0800405a <__retarget_lock_acquire_recursive>:
 800405a:	4770      	bx	lr

0800405c <__retarget_lock_release_recursive>:
 800405c:	4770      	bx	lr
	...

08004060 <_free_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	4605      	mov	r5, r0
 8004064:	2900      	cmp	r1, #0
 8004066:	d041      	beq.n	80040ec <_free_r+0x8c>
 8004068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800406c:	1f0c      	subs	r4, r1, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	bfb8      	it	lt
 8004072:	18e4      	addlt	r4, r4, r3
 8004074:	f000 f8e0 	bl	8004238 <__malloc_lock>
 8004078:	4a1d      	ldr	r2, [pc, #116]	@ (80040f0 <_free_r+0x90>)
 800407a:	6813      	ldr	r3, [r2, #0]
 800407c:	b933      	cbnz	r3, 800408c <_free_r+0x2c>
 800407e:	6063      	str	r3, [r4, #4]
 8004080:	6014      	str	r4, [r2, #0]
 8004082:	4628      	mov	r0, r5
 8004084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004088:	f000 b8dc 	b.w	8004244 <__malloc_unlock>
 800408c:	42a3      	cmp	r3, r4
 800408e:	d908      	bls.n	80040a2 <_free_r+0x42>
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	1821      	adds	r1, r4, r0
 8004094:	428b      	cmp	r3, r1
 8004096:	bf01      	itttt	eq
 8004098:	6819      	ldreq	r1, [r3, #0]
 800409a:	685b      	ldreq	r3, [r3, #4]
 800409c:	1809      	addeq	r1, r1, r0
 800409e:	6021      	streq	r1, [r4, #0]
 80040a0:	e7ed      	b.n	800407e <_free_r+0x1e>
 80040a2:	461a      	mov	r2, r3
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	b10b      	cbz	r3, 80040ac <_free_r+0x4c>
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	d9fa      	bls.n	80040a2 <_free_r+0x42>
 80040ac:	6811      	ldr	r1, [r2, #0]
 80040ae:	1850      	adds	r0, r2, r1
 80040b0:	42a0      	cmp	r0, r4
 80040b2:	d10b      	bne.n	80040cc <_free_r+0x6c>
 80040b4:	6820      	ldr	r0, [r4, #0]
 80040b6:	4401      	add	r1, r0
 80040b8:	1850      	adds	r0, r2, r1
 80040ba:	4283      	cmp	r3, r0
 80040bc:	6011      	str	r1, [r2, #0]
 80040be:	d1e0      	bne.n	8004082 <_free_r+0x22>
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	6053      	str	r3, [r2, #4]
 80040c6:	4408      	add	r0, r1
 80040c8:	6010      	str	r0, [r2, #0]
 80040ca:	e7da      	b.n	8004082 <_free_r+0x22>
 80040cc:	d902      	bls.n	80040d4 <_free_r+0x74>
 80040ce:	230c      	movs	r3, #12
 80040d0:	602b      	str	r3, [r5, #0]
 80040d2:	e7d6      	b.n	8004082 <_free_r+0x22>
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	1821      	adds	r1, r4, r0
 80040d8:	428b      	cmp	r3, r1
 80040da:	bf04      	itt	eq
 80040dc:	6819      	ldreq	r1, [r3, #0]
 80040de:	685b      	ldreq	r3, [r3, #4]
 80040e0:	6063      	str	r3, [r4, #4]
 80040e2:	bf04      	itt	eq
 80040e4:	1809      	addeq	r1, r1, r0
 80040e6:	6021      	streq	r1, [r4, #0]
 80040e8:	6054      	str	r4, [r2, #4]
 80040ea:	e7ca      	b.n	8004082 <_free_r+0x22>
 80040ec:	bd38      	pop	{r3, r4, r5, pc}
 80040ee:	bf00      	nop
 80040f0:	200002c0 	.word	0x200002c0

080040f4 <sbrk_aligned>:
 80040f4:	b570      	push	{r4, r5, r6, lr}
 80040f6:	4e0f      	ldr	r6, [pc, #60]	@ (8004134 <sbrk_aligned+0x40>)
 80040f8:	460c      	mov	r4, r1
 80040fa:	6831      	ldr	r1, [r6, #0]
 80040fc:	4605      	mov	r5, r0
 80040fe:	b911      	cbnz	r1, 8004106 <sbrk_aligned+0x12>
 8004100:	f000 f9d6 	bl	80044b0 <_sbrk_r>
 8004104:	6030      	str	r0, [r6, #0]
 8004106:	4621      	mov	r1, r4
 8004108:	4628      	mov	r0, r5
 800410a:	f000 f9d1 	bl	80044b0 <_sbrk_r>
 800410e:	1c43      	adds	r3, r0, #1
 8004110:	d103      	bne.n	800411a <sbrk_aligned+0x26>
 8004112:	f04f 34ff 	mov.w	r4, #4294967295
 8004116:	4620      	mov	r0, r4
 8004118:	bd70      	pop	{r4, r5, r6, pc}
 800411a:	1cc4      	adds	r4, r0, #3
 800411c:	f024 0403 	bic.w	r4, r4, #3
 8004120:	42a0      	cmp	r0, r4
 8004122:	d0f8      	beq.n	8004116 <sbrk_aligned+0x22>
 8004124:	1a21      	subs	r1, r4, r0
 8004126:	4628      	mov	r0, r5
 8004128:	f000 f9c2 	bl	80044b0 <_sbrk_r>
 800412c:	3001      	adds	r0, #1
 800412e:	d1f2      	bne.n	8004116 <sbrk_aligned+0x22>
 8004130:	e7ef      	b.n	8004112 <sbrk_aligned+0x1e>
 8004132:	bf00      	nop
 8004134:	200002bc 	.word	0x200002bc

08004138 <_malloc_r>:
 8004138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800413c:	1ccd      	adds	r5, r1, #3
 800413e:	f025 0503 	bic.w	r5, r5, #3
 8004142:	3508      	adds	r5, #8
 8004144:	2d0c      	cmp	r5, #12
 8004146:	bf38      	it	cc
 8004148:	250c      	movcc	r5, #12
 800414a:	2d00      	cmp	r5, #0
 800414c:	4606      	mov	r6, r0
 800414e:	db01      	blt.n	8004154 <_malloc_r+0x1c>
 8004150:	42a9      	cmp	r1, r5
 8004152:	d904      	bls.n	800415e <_malloc_r+0x26>
 8004154:	230c      	movs	r3, #12
 8004156:	6033      	str	r3, [r6, #0]
 8004158:	2000      	movs	r0, #0
 800415a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800415e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004234 <_malloc_r+0xfc>
 8004162:	f000 f869 	bl	8004238 <__malloc_lock>
 8004166:	f8d8 3000 	ldr.w	r3, [r8]
 800416a:	461c      	mov	r4, r3
 800416c:	bb44      	cbnz	r4, 80041c0 <_malloc_r+0x88>
 800416e:	4629      	mov	r1, r5
 8004170:	4630      	mov	r0, r6
 8004172:	f7ff ffbf 	bl	80040f4 <sbrk_aligned>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	4604      	mov	r4, r0
 800417a:	d158      	bne.n	800422e <_malloc_r+0xf6>
 800417c:	f8d8 4000 	ldr.w	r4, [r8]
 8004180:	4627      	mov	r7, r4
 8004182:	2f00      	cmp	r7, #0
 8004184:	d143      	bne.n	800420e <_malloc_r+0xd6>
 8004186:	2c00      	cmp	r4, #0
 8004188:	d04b      	beq.n	8004222 <_malloc_r+0xea>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	4639      	mov	r1, r7
 800418e:	4630      	mov	r0, r6
 8004190:	eb04 0903 	add.w	r9, r4, r3
 8004194:	f000 f98c 	bl	80044b0 <_sbrk_r>
 8004198:	4581      	cmp	r9, r0
 800419a:	d142      	bne.n	8004222 <_malloc_r+0xea>
 800419c:	6821      	ldr	r1, [r4, #0]
 800419e:	1a6d      	subs	r5, r5, r1
 80041a0:	4629      	mov	r1, r5
 80041a2:	4630      	mov	r0, r6
 80041a4:	f7ff ffa6 	bl	80040f4 <sbrk_aligned>
 80041a8:	3001      	adds	r0, #1
 80041aa:	d03a      	beq.n	8004222 <_malloc_r+0xea>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	442b      	add	r3, r5
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	f8d8 3000 	ldr.w	r3, [r8]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	bb62      	cbnz	r2, 8004214 <_malloc_r+0xdc>
 80041ba:	f8c8 7000 	str.w	r7, [r8]
 80041be:	e00f      	b.n	80041e0 <_malloc_r+0xa8>
 80041c0:	6822      	ldr	r2, [r4, #0]
 80041c2:	1b52      	subs	r2, r2, r5
 80041c4:	d420      	bmi.n	8004208 <_malloc_r+0xd0>
 80041c6:	2a0b      	cmp	r2, #11
 80041c8:	d917      	bls.n	80041fa <_malloc_r+0xc2>
 80041ca:	1961      	adds	r1, r4, r5
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	6025      	str	r5, [r4, #0]
 80041d0:	bf18      	it	ne
 80041d2:	6059      	strne	r1, [r3, #4]
 80041d4:	6863      	ldr	r3, [r4, #4]
 80041d6:	bf08      	it	eq
 80041d8:	f8c8 1000 	streq.w	r1, [r8]
 80041dc:	5162      	str	r2, [r4, r5]
 80041de:	604b      	str	r3, [r1, #4]
 80041e0:	4630      	mov	r0, r6
 80041e2:	f000 f82f 	bl	8004244 <__malloc_unlock>
 80041e6:	f104 000b 	add.w	r0, r4, #11
 80041ea:	1d23      	adds	r3, r4, #4
 80041ec:	f020 0007 	bic.w	r0, r0, #7
 80041f0:	1ac2      	subs	r2, r0, r3
 80041f2:	bf1c      	itt	ne
 80041f4:	1a1b      	subne	r3, r3, r0
 80041f6:	50a3      	strne	r3, [r4, r2]
 80041f8:	e7af      	b.n	800415a <_malloc_r+0x22>
 80041fa:	6862      	ldr	r2, [r4, #4]
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	bf0c      	ite	eq
 8004200:	f8c8 2000 	streq.w	r2, [r8]
 8004204:	605a      	strne	r2, [r3, #4]
 8004206:	e7eb      	b.n	80041e0 <_malloc_r+0xa8>
 8004208:	4623      	mov	r3, r4
 800420a:	6864      	ldr	r4, [r4, #4]
 800420c:	e7ae      	b.n	800416c <_malloc_r+0x34>
 800420e:	463c      	mov	r4, r7
 8004210:	687f      	ldr	r7, [r7, #4]
 8004212:	e7b6      	b.n	8004182 <_malloc_r+0x4a>
 8004214:	461a      	mov	r2, r3
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	42a3      	cmp	r3, r4
 800421a:	d1fb      	bne.n	8004214 <_malloc_r+0xdc>
 800421c:	2300      	movs	r3, #0
 800421e:	6053      	str	r3, [r2, #4]
 8004220:	e7de      	b.n	80041e0 <_malloc_r+0xa8>
 8004222:	230c      	movs	r3, #12
 8004224:	6033      	str	r3, [r6, #0]
 8004226:	4630      	mov	r0, r6
 8004228:	f000 f80c 	bl	8004244 <__malloc_unlock>
 800422c:	e794      	b.n	8004158 <_malloc_r+0x20>
 800422e:	6005      	str	r5, [r0, #0]
 8004230:	e7d6      	b.n	80041e0 <_malloc_r+0xa8>
 8004232:	bf00      	nop
 8004234:	200002c0 	.word	0x200002c0

08004238 <__malloc_lock>:
 8004238:	4801      	ldr	r0, [pc, #4]	@ (8004240 <__malloc_lock+0x8>)
 800423a:	f7ff bf0e 	b.w	800405a <__retarget_lock_acquire_recursive>
 800423e:	bf00      	nop
 8004240:	200002b8 	.word	0x200002b8

08004244 <__malloc_unlock>:
 8004244:	4801      	ldr	r0, [pc, #4]	@ (800424c <__malloc_unlock+0x8>)
 8004246:	f7ff bf09 	b.w	800405c <__retarget_lock_release_recursive>
 800424a:	bf00      	nop
 800424c:	200002b8 	.word	0x200002b8

08004250 <__sflush_r>:
 8004250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004258:	0716      	lsls	r6, r2, #28
 800425a:	4605      	mov	r5, r0
 800425c:	460c      	mov	r4, r1
 800425e:	d454      	bmi.n	800430a <__sflush_r+0xba>
 8004260:	684b      	ldr	r3, [r1, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	dc02      	bgt.n	800426c <__sflush_r+0x1c>
 8004266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	dd48      	ble.n	80042fe <__sflush_r+0xae>
 800426c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800426e:	2e00      	cmp	r6, #0
 8004270:	d045      	beq.n	80042fe <__sflush_r+0xae>
 8004272:	2300      	movs	r3, #0
 8004274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004278:	682f      	ldr	r7, [r5, #0]
 800427a:	6a21      	ldr	r1, [r4, #32]
 800427c:	602b      	str	r3, [r5, #0]
 800427e:	d030      	beq.n	80042e2 <__sflush_r+0x92>
 8004280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004282:	89a3      	ldrh	r3, [r4, #12]
 8004284:	0759      	lsls	r1, r3, #29
 8004286:	d505      	bpl.n	8004294 <__sflush_r+0x44>
 8004288:	6863      	ldr	r3, [r4, #4]
 800428a:	1ad2      	subs	r2, r2, r3
 800428c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800428e:	b10b      	cbz	r3, 8004294 <__sflush_r+0x44>
 8004290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004292:	1ad2      	subs	r2, r2, r3
 8004294:	2300      	movs	r3, #0
 8004296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004298:	6a21      	ldr	r1, [r4, #32]
 800429a:	4628      	mov	r0, r5
 800429c:	47b0      	blx	r6
 800429e:	1c43      	adds	r3, r0, #1
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	d106      	bne.n	80042b2 <__sflush_r+0x62>
 80042a4:	6829      	ldr	r1, [r5, #0]
 80042a6:	291d      	cmp	r1, #29
 80042a8:	d82b      	bhi.n	8004302 <__sflush_r+0xb2>
 80042aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004354 <__sflush_r+0x104>)
 80042ac:	410a      	asrs	r2, r1
 80042ae:	07d6      	lsls	r6, r2, #31
 80042b0:	d427      	bmi.n	8004302 <__sflush_r+0xb2>
 80042b2:	2200      	movs	r2, #0
 80042b4:	6062      	str	r2, [r4, #4]
 80042b6:	04d9      	lsls	r1, r3, #19
 80042b8:	6922      	ldr	r2, [r4, #16]
 80042ba:	6022      	str	r2, [r4, #0]
 80042bc:	d504      	bpl.n	80042c8 <__sflush_r+0x78>
 80042be:	1c42      	adds	r2, r0, #1
 80042c0:	d101      	bne.n	80042c6 <__sflush_r+0x76>
 80042c2:	682b      	ldr	r3, [r5, #0]
 80042c4:	b903      	cbnz	r3, 80042c8 <__sflush_r+0x78>
 80042c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80042c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042ca:	602f      	str	r7, [r5, #0]
 80042cc:	b1b9      	cbz	r1, 80042fe <__sflush_r+0xae>
 80042ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042d2:	4299      	cmp	r1, r3
 80042d4:	d002      	beq.n	80042dc <__sflush_r+0x8c>
 80042d6:	4628      	mov	r0, r5
 80042d8:	f7ff fec2 	bl	8004060 <_free_r>
 80042dc:	2300      	movs	r3, #0
 80042de:	6363      	str	r3, [r4, #52]	@ 0x34
 80042e0:	e00d      	b.n	80042fe <__sflush_r+0xae>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4628      	mov	r0, r5
 80042e6:	47b0      	blx	r6
 80042e8:	4602      	mov	r2, r0
 80042ea:	1c50      	adds	r0, r2, #1
 80042ec:	d1c9      	bne.n	8004282 <__sflush_r+0x32>
 80042ee:	682b      	ldr	r3, [r5, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0c6      	beq.n	8004282 <__sflush_r+0x32>
 80042f4:	2b1d      	cmp	r3, #29
 80042f6:	d001      	beq.n	80042fc <__sflush_r+0xac>
 80042f8:	2b16      	cmp	r3, #22
 80042fa:	d11e      	bne.n	800433a <__sflush_r+0xea>
 80042fc:	602f      	str	r7, [r5, #0]
 80042fe:	2000      	movs	r0, #0
 8004300:	e022      	b.n	8004348 <__sflush_r+0xf8>
 8004302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004306:	b21b      	sxth	r3, r3
 8004308:	e01b      	b.n	8004342 <__sflush_r+0xf2>
 800430a:	690f      	ldr	r7, [r1, #16]
 800430c:	2f00      	cmp	r7, #0
 800430e:	d0f6      	beq.n	80042fe <__sflush_r+0xae>
 8004310:	0793      	lsls	r3, r2, #30
 8004312:	680e      	ldr	r6, [r1, #0]
 8004314:	bf08      	it	eq
 8004316:	694b      	ldreq	r3, [r1, #20]
 8004318:	600f      	str	r7, [r1, #0]
 800431a:	bf18      	it	ne
 800431c:	2300      	movne	r3, #0
 800431e:	eba6 0807 	sub.w	r8, r6, r7
 8004322:	608b      	str	r3, [r1, #8]
 8004324:	f1b8 0f00 	cmp.w	r8, #0
 8004328:	dde9      	ble.n	80042fe <__sflush_r+0xae>
 800432a:	6a21      	ldr	r1, [r4, #32]
 800432c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800432e:	4643      	mov	r3, r8
 8004330:	463a      	mov	r2, r7
 8004332:	4628      	mov	r0, r5
 8004334:	47b0      	blx	r6
 8004336:	2800      	cmp	r0, #0
 8004338:	dc08      	bgt.n	800434c <__sflush_r+0xfc>
 800433a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800433e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004342:	81a3      	strh	r3, [r4, #12]
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800434c:	4407      	add	r7, r0
 800434e:	eba8 0800 	sub.w	r8, r8, r0
 8004352:	e7e7      	b.n	8004324 <__sflush_r+0xd4>
 8004354:	dfbffffe 	.word	0xdfbffffe

08004358 <_fflush_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	690b      	ldr	r3, [r1, #16]
 800435c:	4605      	mov	r5, r0
 800435e:	460c      	mov	r4, r1
 8004360:	b913      	cbnz	r3, 8004368 <_fflush_r+0x10>
 8004362:	2500      	movs	r5, #0
 8004364:	4628      	mov	r0, r5
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	b118      	cbz	r0, 8004372 <_fflush_r+0x1a>
 800436a:	6a03      	ldr	r3, [r0, #32]
 800436c:	b90b      	cbnz	r3, 8004372 <_fflush_r+0x1a>
 800436e:	f7ff fc8f 	bl	8003c90 <__sinit>
 8004372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f3      	beq.n	8004362 <_fflush_r+0xa>
 800437a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800437c:	07d0      	lsls	r0, r2, #31
 800437e:	d404      	bmi.n	800438a <_fflush_r+0x32>
 8004380:	0599      	lsls	r1, r3, #22
 8004382:	d402      	bmi.n	800438a <_fflush_r+0x32>
 8004384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004386:	f7ff fe68 	bl	800405a <__retarget_lock_acquire_recursive>
 800438a:	4628      	mov	r0, r5
 800438c:	4621      	mov	r1, r4
 800438e:	f7ff ff5f 	bl	8004250 <__sflush_r>
 8004392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004394:	07da      	lsls	r2, r3, #31
 8004396:	4605      	mov	r5, r0
 8004398:	d4e4      	bmi.n	8004364 <_fflush_r+0xc>
 800439a:	89a3      	ldrh	r3, [r4, #12]
 800439c:	059b      	lsls	r3, r3, #22
 800439e:	d4e1      	bmi.n	8004364 <_fflush_r+0xc>
 80043a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043a2:	f7ff fe5b 	bl	800405c <__retarget_lock_release_recursive>
 80043a6:	e7dd      	b.n	8004364 <_fflush_r+0xc>

080043a8 <__swhatbuf_r>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	460c      	mov	r4, r1
 80043ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b0:	2900      	cmp	r1, #0
 80043b2:	b096      	sub	sp, #88	@ 0x58
 80043b4:	4615      	mov	r5, r2
 80043b6:	461e      	mov	r6, r3
 80043b8:	da0d      	bge.n	80043d6 <__swhatbuf_r+0x2e>
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80043c0:	f04f 0100 	mov.w	r1, #0
 80043c4:	bf14      	ite	ne
 80043c6:	2340      	movne	r3, #64	@ 0x40
 80043c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80043cc:	2000      	movs	r0, #0
 80043ce:	6031      	str	r1, [r6, #0]
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	b016      	add	sp, #88	@ 0x58
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
 80043d6:	466a      	mov	r2, sp
 80043d8:	f000 f848 	bl	800446c <_fstat_r>
 80043dc:	2800      	cmp	r0, #0
 80043de:	dbec      	blt.n	80043ba <__swhatbuf_r+0x12>
 80043e0:	9901      	ldr	r1, [sp, #4]
 80043e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80043e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80043ea:	4259      	negs	r1, r3
 80043ec:	4159      	adcs	r1, r3
 80043ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043f2:	e7eb      	b.n	80043cc <__swhatbuf_r+0x24>

080043f4 <__smakebuf_r>:
 80043f4:	898b      	ldrh	r3, [r1, #12]
 80043f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043f8:	079d      	lsls	r5, r3, #30
 80043fa:	4606      	mov	r6, r0
 80043fc:	460c      	mov	r4, r1
 80043fe:	d507      	bpl.n	8004410 <__smakebuf_r+0x1c>
 8004400:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	6123      	str	r3, [r4, #16]
 8004408:	2301      	movs	r3, #1
 800440a:	6163      	str	r3, [r4, #20]
 800440c:	b003      	add	sp, #12
 800440e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004410:	ab01      	add	r3, sp, #4
 8004412:	466a      	mov	r2, sp
 8004414:	f7ff ffc8 	bl	80043a8 <__swhatbuf_r>
 8004418:	9f00      	ldr	r7, [sp, #0]
 800441a:	4605      	mov	r5, r0
 800441c:	4639      	mov	r1, r7
 800441e:	4630      	mov	r0, r6
 8004420:	f7ff fe8a 	bl	8004138 <_malloc_r>
 8004424:	b948      	cbnz	r0, 800443a <__smakebuf_r+0x46>
 8004426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800442a:	059a      	lsls	r2, r3, #22
 800442c:	d4ee      	bmi.n	800440c <__smakebuf_r+0x18>
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	f043 0302 	orr.w	r3, r3, #2
 8004436:	81a3      	strh	r3, [r4, #12]
 8004438:	e7e2      	b.n	8004400 <__smakebuf_r+0xc>
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	6020      	str	r0, [r4, #0]
 800443e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004442:	81a3      	strh	r3, [r4, #12]
 8004444:	9b01      	ldr	r3, [sp, #4]
 8004446:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800444a:	b15b      	cbz	r3, 8004464 <__smakebuf_r+0x70>
 800444c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004450:	4630      	mov	r0, r6
 8004452:	f000 f81d 	bl	8004490 <_isatty_r>
 8004456:	b128      	cbz	r0, 8004464 <__smakebuf_r+0x70>
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	f023 0303 	bic.w	r3, r3, #3
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	89a3      	ldrh	r3, [r4, #12]
 8004466:	431d      	orrs	r5, r3
 8004468:	81a5      	strh	r5, [r4, #12]
 800446a:	e7cf      	b.n	800440c <__smakebuf_r+0x18>

0800446c <_fstat_r>:
 800446c:	b538      	push	{r3, r4, r5, lr}
 800446e:	4d07      	ldr	r5, [pc, #28]	@ (800448c <_fstat_r+0x20>)
 8004470:	2300      	movs	r3, #0
 8004472:	4604      	mov	r4, r0
 8004474:	4608      	mov	r0, r1
 8004476:	4611      	mov	r1, r2
 8004478:	602b      	str	r3, [r5, #0]
 800447a:	f7fc faab 	bl	80009d4 <_fstat>
 800447e:	1c43      	adds	r3, r0, #1
 8004480:	d102      	bne.n	8004488 <_fstat_r+0x1c>
 8004482:	682b      	ldr	r3, [r5, #0]
 8004484:	b103      	cbz	r3, 8004488 <_fstat_r+0x1c>
 8004486:	6023      	str	r3, [r4, #0]
 8004488:	bd38      	pop	{r3, r4, r5, pc}
 800448a:	bf00      	nop
 800448c:	200002b4 	.word	0x200002b4

08004490 <_isatty_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4d06      	ldr	r5, [pc, #24]	@ (80044ac <_isatty_r+0x1c>)
 8004494:	2300      	movs	r3, #0
 8004496:	4604      	mov	r4, r0
 8004498:	4608      	mov	r0, r1
 800449a:	602b      	str	r3, [r5, #0]
 800449c:	f7fc faaa 	bl	80009f4 <_isatty>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d102      	bne.n	80044aa <_isatty_r+0x1a>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	b103      	cbz	r3, 80044aa <_isatty_r+0x1a>
 80044a8:	6023      	str	r3, [r4, #0]
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	200002b4 	.word	0x200002b4

080044b0 <_sbrk_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4d06      	ldr	r5, [pc, #24]	@ (80044cc <_sbrk_r+0x1c>)
 80044b4:	2300      	movs	r3, #0
 80044b6:	4604      	mov	r4, r0
 80044b8:	4608      	mov	r0, r1
 80044ba:	602b      	str	r3, [r5, #0]
 80044bc:	f7fc fab2 	bl	8000a24 <_sbrk>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_sbrk_r+0x1a>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_sbrk_r+0x1a>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	200002b4 	.word	0x200002b4

080044d0 <_init>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	bf00      	nop
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr

080044dc <_fini>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	bf00      	nop
 80044e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	469e      	mov	lr, r3
 80044e6:	4770      	bx	lr
