
3DN_tp_microcontroleurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006718  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080068a0  080068a0  000078a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f8  080068f8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080068f8  080068f8  000078f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006900  08006900  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006900  08006900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006904  08006904  00007904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006908  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000068  08006970  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08006970  000084c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145b5  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c3  00000000  00000000  0001c64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001f710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d76  00000000  00000000  00020880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ddf  00000000  00000000  000215f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183a7  00000000  00000000  0004a3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1400  00000000  00000000  0006277c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153b7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d08  00000000  00000000  00153bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001588c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006888 	.word	0x08006888

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08006888 	.word	0x08006888

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <MX_DMA_Init+0x48>)
 80004c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000500 <MX_DMA_Init+0x48>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80004ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <MX_DMA_Init+0x48>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	2010      	movs	r0, #16
 80004dc:	f000 fff9 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004e0:	2010      	movs	r0, #16
 80004e2:	f001 f812 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2011      	movs	r0, #17
 80004ec:	f000 fff1 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80004f0:	2011      	movs	r0, #17
 80004f2:	f001 f80a 	bl	800150a <HAL_NVIC_EnableIRQ>

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b38      	ldr	r3, [pc, #224]	@ (80005fc <MX_GPIO_Init+0xf8>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	4a37      	ldr	r2, [pc, #220]	@ (80005fc <MX_GPIO_Init+0xf8>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000526:	4b35      	ldr	r3, [pc, #212]	@ (80005fc <MX_GPIO_Init+0xf8>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	4b32      	ldr	r3, [pc, #200]	@ (80005fc <MX_GPIO_Init+0xf8>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	4a31      	ldr	r2, [pc, #196]	@ (80005fc <MX_GPIO_Init+0xf8>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800053c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800053e:	4b2f      	ldr	r3, [pc, #188]	@ (80005fc <MX_GPIO_Init+0xf8>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b2c      	ldr	r3, [pc, #176]	@ (80005fc <MX_GPIO_Init+0xf8>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	4a2b      	ldr	r2, [pc, #172]	@ (80005fc <MX_GPIO_Init+0xf8>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000556:	4b29      	ldr	r3, [pc, #164]	@ (80005fc <MX_GPIO_Init+0xf8>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <MX_GPIO_Init+0xf8>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	4a25      	ldr	r2, [pc, #148]	@ (80005fc <MX_GPIO_Init+0xf8>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800056e:	4b23      	ldr	r3, [pc, #140]	@ (80005fc <MX_GPIO_Init+0xf8>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_nRESET_GPIO_Port, SPI3_nRESET_Pin, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2101      	movs	r1, #1
 800057e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000582:	f001 fb6d 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f001 fb67 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_nCS_GPIO_Port, SPI3_nCS_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2180      	movs	r1, #128	@ 0x80
 8000596:	481a      	ldr	r0, [pc, #104]	@ (8000600 <MX_GPIO_Init+0xfc>)
 8000598:	f001 fb62 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800059c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	4814      	ldr	r0, [pc, #80]	@ (8000604 <MX_GPIO_Init+0x100>)
 80005b4:	f001 f9aa 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SPI3_nRESET_Pin|LD2_Pin;
 80005b8:	2321      	movs	r3, #33	@ 0x21
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d2:	f001 f99b 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_nCS_Pin */
  GPIO_InitStruct.Pin = SPI3_nCS_Pin;
 80005d6:	2380      	movs	r3, #128	@ 0x80
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_nCS_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_GPIO_Init+0xfc>)
 80005ee:	f001 f98d 	bl	800190c <HAL_GPIO_Init>

}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	@ 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000400 	.word	0x48000400
 8000604:	48000800 	.word	0x48000800

08000608 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800060c:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <MX_I2C2_Init+0x74>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	@ (8000680 <MX_I2C2_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_I2C2_Init+0x74>)
 8000614:	4a1b      	ldr	r2, [pc, #108]	@ (8000684 <MX_I2C2_Init+0x7c>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <MX_I2C2_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <MX_I2C2_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	@ (800067c <MX_I2C2_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_I2C2_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_I2C2_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_I2C2_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_I2C2_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000642:	480e      	ldr	r0, [pc, #56]	@ (800067c <MX_I2C2_Init+0x74>)
 8000644:	f001 fb3e 	bl	8001cc4 <HAL_I2C_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800064e:	f000 f94a 	bl	80008e6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	4809      	ldr	r0, [pc, #36]	@ (800067c <MX_I2C2_Init+0x74>)
 8000656:	f001 fbd0 	bl	8001dfa <HAL_I2CEx_ConfigAnalogFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000660:	f000 f941 	bl	80008e6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000664:	2100      	movs	r1, #0
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_I2C2_Init+0x74>)
 8000668:	f001 fc12 	bl	8001e90 <HAL_I2CEx_ConfigDigitalFilter>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f938 	bl	80008e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000084 	.word	0x20000084
 8000680:	40005800 	.word	0x40005800
 8000684:	10d19ce4 	.word	0x10d19ce4

08000688 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0ac      	sub	sp, #176	@ 0xb0
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2288      	movs	r2, #136	@ 0x88
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 fe39 	bl	8006320 <memset>
  if(i2cHandle->Instance==I2C2)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a21      	ldr	r2, [pc, #132]	@ (8000738 <HAL_I2C_MspInit+0xb0>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d13b      	bne.n	8000730 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006bc:	2300      	movs	r3, #0
 80006be:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fa93 	bl	8002bf0 <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006d0:	f000 f909 	bl	80008e6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b19      	ldr	r3, [pc, #100]	@ (800073c <HAL_I2C_MspInit+0xb4>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d8:	4a18      	ldr	r2, [pc, #96]	@ (800073c <HAL_I2C_MspInit+0xb4>)
 80006da:	f043 0302 	orr.w	r3, r3, #2
 80006de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <HAL_I2C_MspInit+0xb4>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e4:	f003 0302 	and.w	r3, r3, #2
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f4:	2312      	movs	r3, #18
 80006f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000706:	2304      	movs	r3, #4
 8000708:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000710:	4619      	mov	r1, r3
 8000712:	480b      	ldr	r0, [pc, #44]	@ (8000740 <HAL_I2C_MspInit+0xb8>)
 8000714:	f001 f8fa 	bl	800190c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_I2C_MspInit+0xb4>)
 800071a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800071c:	4a07      	ldr	r2, [pc, #28]	@ (800073c <HAL_I2C_MspInit+0xb4>)
 800071e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000722:	6593      	str	r3, [r2, #88]	@ 0x58
 8000724:	4b05      	ldr	r3, [pc, #20]	@ (800073c <HAL_I2C_MspInit+0xb4>)
 8000726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000730:	bf00      	nop
 8000732:	37b0      	adds	r7, #176	@ 0xb0
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40005800 	.word	0x40005800
 800073c:	40021000 	.word	0x40021000
 8000740:	48000400 	.word	0x48000400

08000744 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 800074c:	1d39      	adds	r1, r7, #4
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	2201      	movs	r2, #1
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <__io_putchar+0x20>)
 8000756:	f004 fe8d 	bl	8005474 <HAL_UART_Transmit>
	return chr;
 800075a:	687b      	ldr	r3, [r7, #4]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200002e8 	.word	0x200002e8

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fd36 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f83e 	bl	80007f0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000774:	f000 f88d 	bl	8000892 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f7ff fec4 	bl	8000504 <MX_GPIO_Init>
  MX_DMA_Init();
 800077c:	f7ff fe9c 	bl	80004b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000780:	f000 fc76 	bl	8001070 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000784:	f000 faa8 	bl	8000cd8 <MX_SPI3_Init>
  MX_I2C2_Init();
 8000788:	f7ff ff3e 	bl	8000608 <MX_I2C2_Init>
  MX_SAI2_Init();
 800078c:	f000 f960 	bl	8000a50 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <main+0x74>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <main+0x74>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800079e:	601a      	str	r2, [r3, #0]
  mcp23s17.hspi = &hspi3;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <main+0x78>)
 80007a2:	4a10      	ldr	r2, [pc, #64]	@ (80007e4 <main+0x7c>)
 80007a4:	601a      	str	r2, [r3, #0]
  mcp23s17.CS_Port = SPI3_nCS_GPIO_Port;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <main+0x78>)
 80007a8:	4a0f      	ldr	r2, [pc, #60]	@ (80007e8 <main+0x80>)
 80007aa:	605a      	str	r2, [r3, #4]
  mcp23s17.CS_Pin = SPI3_nCS_Pin;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <main+0x78>)
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	811a      	strh	r2, [r3, #8]
  MCP23S17_Init(&mcp23s17);
 80007b2:	480b      	ldr	r0, [pc, #44]	@ (80007e0 <main+0x78>)
 80007b4:	f000 f8c8 	bl	8000948 <MCP23S17_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f001 fa67 	bl	8001c90 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80007c2:	2064      	movs	r0, #100	@ 0x64
 80007c4:	f000 fd86 	bl	80012d4 <HAL_Delay>
	  printf("Test printf\r\n");
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <main+0x84>)
 80007ca:	f005 fcc9 	bl	8006160 <puts>

	 MCP23S17_Chenillard(&mcp23s17, 200);
 80007ce:	21c8      	movs	r1, #200	@ 0xc8
 80007d0:	4803      	ldr	r0, [pc, #12]	@ (80007e0 <main+0x78>)
 80007d2:	f000 f90e 	bl	80009f2 <MCP23S17_Chenillard>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007d6:	bf00      	nop
 80007d8:	e7ee      	b.n	80007b8 <main+0x50>
 80007da:	bf00      	nop
 80007dc:	200000e4 	.word	0x200000e4
 80007e0:	200000d8 	.word	0x200000d8
 80007e4:	20000280 	.word	0x20000280
 80007e8:	48000400 	.word	0x48000400
 80007ec:	080068a0 	.word	0x080068a0

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b096      	sub	sp, #88	@ 0x58
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2244      	movs	r2, #68	@ 0x44
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 fd8e 	bl	8006320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000812:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000816:	f001 fb95 	bl	8001f44 <HAL_PWREx_ControlVoltageScaling>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000820:	f000 f861 	bl	80008e6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800082c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082e:	2310      	movs	r3, #16
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000836:	2302      	movs	r3, #2
 8000838:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800083e:	230a      	movs	r3, #10
 8000840:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000842:	2307      	movs	r3, #7
 8000844:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000846:	2302      	movs	r3, #2
 8000848:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4618      	mov	r0, r3
 8000854:	f001 fbcc 	bl	8001ff0 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800085e:	f000 f842 	bl	80008e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	230f      	movs	r3, #15
 8000864:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2303      	movs	r3, #3
 8000868:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	2104      	movs	r1, #4
 800087a:	4618      	mov	r0, r3
 800087c:	f001 ff94 	bl	80027a8 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000886:	f000 f82e 	bl	80008e6 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3758      	adds	r7, #88	@ 0x58
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b0a2      	sub	sp, #136	@ 0x88
 8000896:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2288      	movs	r2, #136	@ 0x88
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 fd3e 	bl	8006320 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008ae:	2302      	movs	r3, #2
 80008b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 80008b6:	230d      	movs	r3, #13
 80008b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80008ba:	2311      	movs	r3, #17
 80008bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80008c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ca:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f98e 	bl	8002bf0 <HAL_RCCEx_PeriphCLKConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 80008da:	f000 f804 	bl	80008e6 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3788      	adds	r7, #136	@ 0x88
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ea:	b672      	cpsid	i
}
 80008ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ee:	bf00      	nop
 80008f0:	e7fd      	b.n	80008ee <Error_Handler+0x8>

080008f2 <MCP23S17_WriteRegister>:
#include <string.h>
#include <stdlib.h>
#include "stdio.h"

// Écriture d'un registre du MCP23S17
static void MCP23S17_WriteRegister(MCP23S17_HandleTypeDef *dev, uint8_t reg, uint8_t value) {
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b084      	sub	sp, #16
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	460b      	mov	r3, r1
 80008fc:	70fb      	strb	r3, [r7, #3]
 80008fe:	4613      	mov	r3, r2
 8000900:	70bb      	strb	r3, [r7, #2]
    uint8_t data[3] = {MCP23S17_OPCODE_WRITE, reg, value};
 8000902:	2340      	movs	r3, #64	@ 0x40
 8000904:	733b      	strb	r3, [r7, #12]
 8000906:	78fb      	ldrb	r3, [r7, #3]
 8000908:	737b      	strb	r3, [r7, #13]
 800090a:	78bb      	ldrb	r3, [r7, #2]
 800090c:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_RESET);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6858      	ldr	r0, [r3, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	891b      	ldrh	r3, [r3, #8]
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	f001 f9a1 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(dev->hspi, data, 3, HAL_MAX_DELAY);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	f107 010c 	add.w	r1, r7, #12
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	2203      	movs	r2, #3
 800092c:	f004 fa7a 	bl	8004e24 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_SET);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6858      	ldr	r0, [r3, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	891b      	ldrh	r3, [r3, #8]
 8000938:	2201      	movs	r2, #1
 800093a:	4619      	mov	r1, r3
 800093c:	f001 f990 	bl	8001c60 <HAL_GPIO_WritePin>
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <MCP23S17_Init>:

// Initialisation du MCP23S17
void MCP23S17_Init(MCP23S17_HandleTypeDef *dev) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    MCP23S17_WriteRegister(dev, MCP23S17_IODIRA, 0x00);  // GPA en sortie
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ffcc 	bl	80008f2 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(dev, MCP23S17_IODIRB, 0x00);  // GPB en sortie
 800095a:	2200      	movs	r2, #0
 800095c:	2101      	movs	r1, #1
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffc7 	bl	80008f2 <MCP23S17_WriteRegister>
    MCP23S17_ClearAllLEDs(dev);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f832 	bl	80009ce <MCP23S17_ClearAllLEDs>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <MCP23S17_SetLED>:

void MCP23S17_SetLED(MCP23S17_HandleTypeDef *dev, uint8_t gpio, uint8_t led) {
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	460b      	mov	r3, r1
 800097c:	70fb      	strb	r3, [r7, #3]
 800097e:	4613      	mov	r3, r2
 8000980:	70bb      	strb	r3, [r7, #2]
    // Éteindre toutes les LEDs du port en cours
    if (gpio == 0) {
 8000982:	78fb      	ldrb	r3, [r7, #3]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10f      	bne.n	80009a8 <MCP23S17_SetLED+0x36>
        MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, (1 << led));  // Allume une seule LED sur GPA
 8000988:	78bb      	ldrb	r3, [r7, #2]
 800098a:	2201      	movs	r2, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	b2db      	uxtb	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	2112      	movs	r1, #18
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffab 	bl	80008f2 <MCP23S17_WriteRegister>
        MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, 0x00);        // Éteint toutes les LEDs sur GPB
 800099c:	2200      	movs	r2, #0
 800099e:	2113      	movs	r1, #19
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ffa6 	bl	80008f2 <MCP23S17_WriteRegister>
    } else {
        MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, (1 << led));  // Allume une seule LED sur GPB
        MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, 0x00);        // Éteint toutes les LEDs sur GPA
    }
}
 80009a6:	e00e      	b.n	80009c6 <MCP23S17_SetLED+0x54>
        MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, (1 << led));  // Allume une seule LED sur GPB
 80009a8:	78bb      	ldrb	r3, [r7, #2]
 80009aa:	2201      	movs	r2, #1
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	2113      	movs	r1, #19
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ff9b 	bl	80008f2 <MCP23S17_WriteRegister>
        MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, 0x00);        // Éteint toutes les LEDs sur GPA
 80009bc:	2200      	movs	r2, #0
 80009be:	2112      	movs	r1, #18
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff96 	bl	80008f2 <MCP23S17_WriteRegister>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <MCP23S17_ClearAllLEDs>:

// Éteindre toutes les LEDs
void MCP23S17_ClearAllLEDs(MCP23S17_HandleTypeDef *dev) {
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
    MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, 0x00);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2112      	movs	r1, #18
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ff89 	bl	80008f2 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, 0x00);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2113      	movs	r1, #19
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff84 	bl	80008f2 <MCP23S17_WriteRegister>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <MCP23S17_Chenillard>:

void MCP23S17_Chenillard(MCP23S17_HandleTypeDef *dev, uint8_t delay_ms) {
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	460b      	mov	r3, r1
 80009fc:	70fb      	strb	r3, [r7, #3]
    uint8_t step = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	73fb      	strb	r3, [r7, #15]
    uint8_t gpio = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	73bb      	strb	r3, [r7, #14]

    while (1) {
        MCP23S17_ClearAllLEDs(dev);  // Éteindre toutes les LEDs avant d'en allumer une
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffe1 	bl	80009ce <MCP23S17_ClearAllLEDs>

        MCP23S17_SetLED(dev, gpio, step);
 8000a0c:	7bfa      	ldrb	r2, [r7, #15]
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	4619      	mov	r1, r3
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffad 	bl	8000972 <MCP23S17_SetLED>
        HAL_Delay(delay_ms);
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fc5a 	bl	80012d4 <HAL_Delay>

        if (gpio == 0) {
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10a      	bne.n	8000a3c <MCP23S17_Chenillard+0x4a>
            step++;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	73fb      	strb	r3, [r7, #15]
            if (step > 7) {
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2b07      	cmp	r3, #7
 8000a30:	d9e9      	bls.n	8000a06 <MCP23S17_Chenillard+0x14>
                step = 7;
 8000a32:	2307      	movs	r3, #7
 8000a34:	73fb      	strb	r3, [r7, #15]
                gpio = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73bb      	strb	r3, [r7, #14]
 8000a3a:	e7e4      	b.n	8000a06 <MCP23S17_Chenillard+0x14>
            }
        } else {
            if (step == 0) {
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <MCP23S17_Chenillard+0x56>
                gpio = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73bb      	strb	r3, [r7, #14]
 8000a46:	e7de      	b.n	8000a06 <MCP23S17_Chenillard+0x14>
            } else {
                step--;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	73fb      	strb	r3, [r7, #15]
        MCP23S17_ClearAllLEDs(dev);  // Éteindre toutes les LEDs avant d'en allumer une
 8000a4e:	e7da      	b.n	8000a06 <MCP23S17_Chenillard+0x14>

08000a50 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a56:	4a2b      	ldr	r2, [pc, #172]	@ (8000b04 <MX_SAI2_Init+0xb4>)
 8000a58:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000a5a:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a72:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000a78:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a7a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a7e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a80:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a92:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000a98:	2302      	movs	r3, #2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4818      	ldr	r0, [pc, #96]	@ (8000b00 <MX_SAI2_Init+0xb0>)
 8000aa0:	f003 fbc0 	bl	8004224 <HAL_SAI_InitProtocol>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000aaa:	f7ff ff1c 	bl	80008e6 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000aae:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_SAI2_Init+0xb8>)
 8000ab0:	4a16      	ldr	r2, [pc, #88]	@ (8000b0c <MX_SAI2_Init+0xbc>)
 8000ab2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <MX_SAI2_Init+0xb8>)
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <MX_SAI2_Init+0xb8>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_SAI2_Init+0xb8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <MX_SAI2_Init+0xb8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_SAI2_Init+0xb8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <MX_SAI2_Init+0xb8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <MX_SAI2_Init+0xb8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ade:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <MX_SAI2_Init+0xb8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4807      	ldr	r0, [pc, #28]	@ (8000b08 <MX_SAI2_Init+0xb8>)
 8000aec:	f003 fb9a 	bl	8004224 <HAL_SAI_InitProtocol>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000af6:	f7ff fef6 	bl	80008e6 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000e4 	.word	0x200000e4
 8000b04:	40015804 	.word	0x40015804
 8000b08:	20000168 	.word	0x20000168
 8000b0c:	40015824 	.word	0x40015824

08000b10 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a64      	ldr	r2, [pc, #400]	@ (8000cb0 <HAL_SAI_MspInit+0x1a0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d15e      	bne.n	8000be0 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000b22:	4b64      	ldr	r3, [pc, #400]	@ (8000cb4 <HAL_SAI_MspInit+0x1a4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d113      	bne.n	8000b52 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000b2a:	4b63      	ldr	r3, [pc, #396]	@ (8000cb8 <HAL_SAI_MspInit+0x1a8>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2e:	4a62      	ldr	r2, [pc, #392]	@ (8000cb8 <HAL_SAI_MspInit+0x1a8>)
 8000b30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b36:	4b60      	ldr	r3, [pc, #384]	@ (8000cb8 <HAL_SAI_MspInit+0x1a8>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	204b      	movs	r0, #75	@ 0x4b
 8000b48:	f000 fcc3 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000b4c:	204b      	movs	r0, #75	@ 0x4b
 8000b4e:	f000 fcdc 	bl	800150a <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000b52:	4b58      	ldr	r3, [pc, #352]	@ (8000cb4 <HAL_SAI_MspInit+0x1a4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4a56      	ldr	r2, [pc, #344]	@ (8000cb4 <HAL_SAI_MspInit+0x1a4>)
 8000b5a:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b5c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b6e:	230d      	movs	r3, #13
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4850      	ldr	r0, [pc, #320]	@ (8000cbc <HAL_SAI_MspInit+0x1ac>)
 8000b7a:	f000 fec7 	bl	800190c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000b7e:	4b50      	ldr	r3, [pc, #320]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000b80:	4a50      	ldr	r2, [pc, #320]	@ (8000cc4 <HAL_SAI_MspInit+0x1b4>)
 8000b82:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000b84:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000b8c:	2210      	movs	r2, #16
 8000b8e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b90:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000b96:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000b98:	2280      	movs	r2, #128	@ 0x80
 8000b9a:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b9c:	4b48      	ldr	r3, [pc, #288]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ba2:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ba4:	4b46      	ldr	r3, [pc, #280]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000baa:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000bac:	4b44      	ldr	r3, [pc, #272]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000bae:	2220      	movs	r2, #32
 8000bb0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000bb2:	4b43      	ldr	r3, [pc, #268]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000bb8:	4841      	ldr	r0, [pc, #260]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000bba:	f000 fcc1 	bl	8001540 <HAL_DMA_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000bc4:	f7ff fe8f 	bl	80008e6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a3d      	ldr	r2, [pc, #244]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000bcc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000bce:	4a3c      	ldr	r2, [pc, #240]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a3a      	ldr	r2, [pc, #232]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000bd8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000bda:	4a39      	ldr	r2, [pc, #228]	@ (8000cc0 <HAL_SAI_MspInit+0x1b0>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a38      	ldr	r2, [pc, #224]	@ (8000cc8 <HAL_SAI_MspInit+0x1b8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d15e      	bne.n	8000ca8 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000bea:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <HAL_SAI_MspInit+0x1a4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d113      	bne.n	8000c1a <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000bf2:	4b31      	ldr	r3, [pc, #196]	@ (8000cb8 <HAL_SAI_MspInit+0x1a8>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf6:	4a30      	ldr	r2, [pc, #192]	@ (8000cb8 <HAL_SAI_MspInit+0x1a8>)
 8000bf8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb8 <HAL_SAI_MspInit+0x1a8>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	204b      	movs	r0, #75	@ 0x4b
 8000c10:	f000 fc5f 	bl	80014d2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000c14:	204b      	movs	r0, #75	@ 0x4b
 8000c16:	f000 fc78 	bl	800150a <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000c1a:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <HAL_SAI_MspInit+0x1a4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a24      	ldr	r2, [pc, #144]	@ (8000cb4 <HAL_SAI_MspInit+0x1a4>)
 8000c22:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000c36:	230d      	movs	r3, #13
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4822      	ldr	r0, [pc, #136]	@ (8000ccc <HAL_SAI_MspInit+0x1bc>)
 8000c42:	f000 fe63 	bl	800190c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000c46:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c48:	4a22      	ldr	r2, [pc, #136]	@ (8000cd4 <HAL_SAI_MspInit+0x1c4>)
 8000c4a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000c4c:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c6a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c72:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c76:	2220      	movs	r2, #32
 8000c78:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000c80:	4813      	ldr	r0, [pc, #76]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c82:	f000 fc5d 	bl	8001540 <HAL_DMA_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000c8c:	f7ff fe2b 	bl	80008e6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c94:	671a      	str	r2, [r3, #112]	@ 0x70
 8000c96:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000ca0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd0 <HAL_SAI_MspInit+0x1c0>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	@ 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40015804 	.word	0x40015804
 8000cb4:	2000027c 	.word	0x2000027c
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	200001ec 	.word	0x200001ec
 8000cc4:	4002006c 	.word	0x4002006c
 8000cc8:	40015824 	.word	0x40015824
 8000ccc:	48000800 	.word	0x48000800
 8000cd0:	20000234 	.word	0x20000234
 8000cd4:	40020080 	.word	0x40020080

08000cd8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000cde:	4a1c      	ldr	r2, [pc, #112]	@ (8000d50 <MX_SPI3_Init+0x78>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000ce4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ce8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cea:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000cf2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000cf6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000d26:	2207      	movs	r2, #7
 8000d28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000d32:	2208      	movs	r2, #8
 8000d34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_SPI3_Init+0x74>)
 8000d38:	f003 ffd1 	bl	8004cde <HAL_SPI_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f7ff fdd0 	bl	80008e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000280 	.word	0x20000280
 8000d50:	40003c00 	.word	0x40003c00

08000d54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a25      	ldr	r2, [pc, #148]	@ (8000e08 <HAL_SPI_MspInit+0xb4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d144      	bne.n	8000e00 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d76:	4b25      	ldr	r3, [pc, #148]	@ (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7a:	4a24      	ldr	r2, [pc, #144]	@ (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d82:	4b22      	ldr	r3, [pc, #136]	@ (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	4a1e      	ldr	r2, [pc, #120]	@ (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	4a18      	ldr	r2, [pc, #96]	@ (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dbe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd0:	2306      	movs	r3, #6
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <HAL_SPI_MspInit+0xbc>)
 8000ddc:	f000 fd96 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000de0:	2320      	movs	r3, #32
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000df0:	2306      	movs	r3, #6
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <HAL_SPI_MspInit+0xc0>)
 8000dfc:	f000 fd86 	bl	800190c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	@ 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40003c00 	.word	0x40003c00
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000800 	.word	0x48000800
 8000e14:	48000400 	.word	0x48000400

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e22:	4a0e      	ldr	r2, [pc, #56]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3a:	4a08      	ldr	r2, [pc, #32]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <NMI_Handler+0x4>

08000e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <MemManage_Handler+0x4>

08000e78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb6:	f000 f9ed 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <DMA1_Channel6_IRQHandler+0x10>)
 8000ec6:	f000 fc72 	bl	80017ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200001ec 	.word	0x200001ec

08000ed4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <DMA1_Channel7_IRQHandler+0x10>)
 8000eda:	f000 fc68 	bl	80017ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000234 	.word	0x20000234

08000ee8 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <SAI2_IRQHandler+0x14>)
 8000eee:	f003 fba3 	bl	8004638 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8000ef2:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <SAI2_IRQHandler+0x18>)
 8000ef4:	f003 fba0 	bl	8004638 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000e4 	.word	0x200000e4
 8000f00:	20000168 	.word	0x20000168

08000f04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e00a      	b.n	8000f2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f16:	f3af 8000 	nop.w
 8000f1a:	4601      	mov	r1, r0
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	60ba      	str	r2, [r7, #8]
 8000f22:	b2ca      	uxtb	r2, r1
 8000f24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbf0      	blt.n	8000f16 <_read+0x12>
  }

  return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	e009      	b.n	8000f64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60ba      	str	r2, [r7, #8]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbf3 	bl	8000744 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf1      	blt.n	8000f50 <_write+0x12>
  }
  return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_close>:

int _close(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_isatty>:

int _isatty(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	@ (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f005 f9d4 	bl	80063bc <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20018000 	.word	0x20018000
 8001040:	00000400 	.word	0x00000400
 8001044:	200002e4 	.word	0x200002e4
 8001048:	200004c0 	.word	0x200004c0

0800104c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 8001076:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <MX_USART2_UART_Init+0x5c>)
 8001078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_USART2_UART_Init+0x58>)
 80010b4:	f004 f990 	bl	80053d8 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010be:	f7ff fc12 	bl	80008e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002e8 	.word	0x200002e8
 80010cc:	40004400 	.word	0x40004400

080010d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ac      	sub	sp, #176	@ 0xb0
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2288      	movs	r2, #136	@ 0x88
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 f915 	bl	8006320 <memset>
  if(uartHandle->Instance==USART2)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a21      	ldr	r2, [pc, #132]	@ (8001180 <HAL_UART_MspInit+0xb0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d13b      	bne.n	8001178 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001100:	2302      	movs	r3, #2
 8001102:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fd6f 	bl	8002bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001118:	f7ff fbe5 	bl	80008e6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 8001122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001126:	6593      	str	r3, [r2, #88]	@ 0x58
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 800112a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001138:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800114c:	230c      	movs	r3, #12
 800114e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001164:	2307      	movs	r3, #7
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001174:	f000 fbca 	bl	800190c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001178:	bf00      	nop
 800117a:	37b0      	adds	r7, #176	@ 0xb0
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40004400 	.word	0x40004400
 8001184:	40021000 	.word	0x40021000

08001188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800118c:	f7ff ff5e 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopForever+0xe>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopForever+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f005 f907 	bl	80063c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ba:	f7ff fad5 	bl	8000768 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011cc:	08006908 	.word	0x08006908
  ldr r2, =_sbss
 80011d0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011d4:	200004c0 	.word	0x200004c0

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_Init+0x3c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001218 <HAL_Init+0x3c>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f2:	2003      	movs	r0, #3
 80011f4:	f000 f962 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 f80f 	bl	800121c <HAL_InitTick>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	e001      	b.n	800120e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800120a:	f7ff fe05 	bl	8000e18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800120e:	79fb      	ldrb	r3, [r7, #7]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001228:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <HAL_InitTick+0x6c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d023      	beq.n	8001278 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <HAL_InitTick+0x70>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_InitTick+0x6c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f96d 	bl	8001526 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10f      	bne.n	8001272 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d809      	bhi.n	800126c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f937 	bl	80014d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001264:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <HAL_InitTick+0x74>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e007      	b.n	800127c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e004      	b.n	800127c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e001      	b.n	800127c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008
 800128c:	20000000 	.word	0x20000000
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000370 	.word	0x20000370

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000370 	.word	0x20000370

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	@ (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	@ (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff3e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff31 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e098      	b.n	8001684 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	4b4d      	ldr	r3, [pc, #308]	@ (8001690 <HAL_DMA_Init+0x150>)
 800155a:	429a      	cmp	r2, r3
 800155c:	d80f      	bhi.n	800157e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4b4b      	ldr	r3, [pc, #300]	@ (8001694 <HAL_DMA_Init+0x154>)
 8001566:	4413      	add	r3, r2
 8001568:	4a4b      	ldr	r2, [pc, #300]	@ (8001698 <HAL_DMA_Init+0x158>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	091b      	lsrs	r3, r3, #4
 8001570:	009a      	lsls	r2, r3, #2
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a48      	ldr	r2, [pc, #288]	@ (800169c <HAL_DMA_Init+0x15c>)
 800157a:	641a      	str	r2, [r3, #64]	@ 0x40
 800157c:	e00e      	b.n	800159c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	4b46      	ldr	r3, [pc, #280]	@ (80016a0 <HAL_DMA_Init+0x160>)
 8001586:	4413      	add	r3, r2
 8001588:	4a43      	ldr	r2, [pc, #268]	@ (8001698 <HAL_DMA_Init+0x158>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	009a      	lsls	r2, r3, #2
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a42      	ldr	r2, [pc, #264]	@ (80016a4 <HAL_DMA_Init+0x164>)
 800159a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2202      	movs	r2, #2
 80015a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80015b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80015f6:	d039      	beq.n	800166c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fc:	4a27      	ldr	r2, [pc, #156]	@ (800169c <HAL_DMA_Init+0x15c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d11a      	bne.n	8001638 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001602:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <HAL_DMA_Init+0x168>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f003 031c 	and.w	r3, r3, #28
 800160e:	210f      	movs	r1, #15
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	4924      	ldr	r1, [pc, #144]	@ (80016a8 <HAL_DMA_Init+0x168>)
 8001618:	4013      	ands	r3, r2
 800161a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800161c:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <HAL_DMA_Init+0x168>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001628:	f003 031c 	and.w	r3, r3, #28
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	491d      	ldr	r1, [pc, #116]	@ (80016a8 <HAL_DMA_Init+0x168>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
 8001636:	e019      	b.n	800166c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001638:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <HAL_DMA_Init+0x16c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001640:	f003 031c 	and.w	r3, r3, #28
 8001644:	210f      	movs	r1, #15
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	4917      	ldr	r1, [pc, #92]	@ (80016ac <HAL_DMA_Init+0x16c>)
 800164e:	4013      	ands	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <HAL_DMA_Init+0x16c>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6859      	ldr	r1, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	f003 031c 	and.w	r3, r3, #28
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	4911      	ldr	r1, [pc, #68]	@ (80016ac <HAL_DMA_Init+0x16c>)
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40020407 	.word	0x40020407
 8001694:	bffdfff8 	.word	0xbffdfff8
 8001698:	cccccccd 	.word	0xcccccccd
 800169c:	40020000 	.word	0x40020000
 80016a0:	bffdfbf8 	.word	0xbffdfbf8
 80016a4:	40020400 	.word	0x40020400
 80016a8:	400200a8 	.word	0x400200a8
 80016ac:	400204a8 	.word	0x400204a8

080016b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d008      	beq.n	80016da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2204      	movs	r2, #4
 80016cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e022      	b.n	8001720 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 020e 	bic.w	r2, r2, #14
 80016e8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	f003 021c 	and.w	r2, r3, #28
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d005      	beq.n	8001750 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2204      	movs	r2, #4
 8001748:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	e029      	b.n	80017a4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 020e 	bic.w	r2, r2, #14
 800175e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001774:	f003 021c 	and.w	r2, r3, #28
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
    }
  }
  return status;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f003 031c 	and.w	r3, r3, #28
 80017ce:	2204      	movs	r2, #4
 80017d0:	409a      	lsls	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d026      	beq.n	8001828 <HAL_DMA_IRQHandler+0x7a>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d021      	beq.n	8001828 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d107      	bne.n	8001802 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0204 	bic.w	r2, r2, #4
 8001800:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	f003 021c 	and.w	r2, r3, #28
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	2104      	movs	r1, #4
 8001810:	fa01 f202 	lsl.w	r2, r1, r2
 8001814:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	2b00      	cmp	r3, #0
 800181c:	d071      	beq.n	8001902 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001826:	e06c      	b.n	8001902 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182c:	f003 031c 	and.w	r3, r3, #28
 8001830:	2202      	movs	r2, #2
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d02e      	beq.n	800189a <HAL_DMA_IRQHandler+0xec>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d029      	beq.n	800189a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10b      	bne.n	800186c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 020a 	bic.w	r2, r2, #10
 8001862:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001870:	f003 021c 	and.w	r2, r3, #28
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	2102      	movs	r1, #2
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188c:	2b00      	cmp	r3, #0
 800188e:	d038      	beq.n	8001902 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001898:	e033      	b.n	8001902 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f003 031c 	and.w	r3, r3, #28
 80018a2:	2208      	movs	r2, #8
 80018a4:	409a      	lsls	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d02a      	beq.n	8001904 <HAL_DMA_IRQHandler+0x156>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d025      	beq.n	8001904 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 020e 	bic.w	r2, r2, #14
 80018c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018cc:	f003 021c 	and.w	r2, r3, #28
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d004      	beq.n	8001904 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001902:	bf00      	nop
 8001904:	bf00      	nop
}
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191a:	e17f      	b.n	8001c1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8171 	beq.w	8001c16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d005      	beq.n	800194c <HAL_GPIO_Init+0x40>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d130      	bne.n	80019ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001982:	2201      	movs	r2, #1
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	f003 0201 	and.w	r2, r3, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d118      	bne.n	80019ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	6939      	ldr	r1, [r7, #16]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80ac 	beq.w	8001c16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	4b5f      	ldr	r3, [pc, #380]	@ (8001c3c <HAL_GPIO_Init+0x330>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c3c <HAL_GPIO_Init+0x330>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aca:	4b5c      	ldr	r3, [pc, #368]	@ (8001c3c <HAL_GPIO_Init+0x330>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad6:	4a5a      	ldr	r2, [pc, #360]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b00:	d025      	beq.n	8001b4e <HAL_GPIO_Init+0x242>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4f      	ldr	r2, [pc, #316]	@ (8001c44 <HAL_GPIO_Init+0x338>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d01f      	beq.n	8001b4a <HAL_GPIO_Init+0x23e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c48 <HAL_GPIO_Init+0x33c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d019      	beq.n	8001b46 <HAL_GPIO_Init+0x23a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4d      	ldr	r2, [pc, #308]	@ (8001c4c <HAL_GPIO_Init+0x340>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0x236>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c50 <HAL_GPIO_Init+0x344>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00d      	beq.n	8001b3e <HAL_GPIO_Init+0x232>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4b      	ldr	r2, [pc, #300]	@ (8001c54 <HAL_GPIO_Init+0x348>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d007      	beq.n	8001b3a <HAL_GPIO_Init+0x22e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c58 <HAL_GPIO_Init+0x34c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <HAL_GPIO_Init+0x22a>
 8001b32:	2306      	movs	r3, #6
 8001b34:	e00c      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b36:	2307      	movs	r3, #7
 8001b38:	e00a      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b60:	4937      	ldr	r1, [pc, #220]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b92:	4a32      	ldr	r2, [pc, #200]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b98:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bbc:	4a27      	ldr	r2, [pc, #156]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bc2:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c10:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f47f ae78 	bne.w	800191c <HAL_GPIO_Init+0x10>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	48000400 	.word	0x48000400
 8001c48:	48000800 	.word	0x48000800
 8001c4c:	48000c00 	.word	0x48000c00
 8001c50:	48001000 	.word	0x48001000
 8001c54:	48001400 	.word	0x48001400
 8001c58:	48001800 	.word	0x48001800
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	43d9      	mvns	r1, r3
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	400b      	ands	r3, r1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e08d      	b.n	8001df2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fccc 	bl	8000688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2224      	movs	r2, #36	@ 0x24
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	e006      	b.n	8001d4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d108      	bne.n	8001d66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	e007      	b.n	8001d76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69d9      	ldr	r1, [r3, #28]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1a      	ldr	r2, [r3, #32]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d138      	bne.n	8001e82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e032      	b.n	8001e84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2224      	movs	r2, #36	@ 0x24
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
  }
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d139      	bne.n	8001f1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e033      	b.n	8001f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	@ 0x24
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ee2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f1a:	2302      	movs	r3, #2
  }
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f2c:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40007000 	.word	0x40007000

08001f44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f52:	d130      	bne.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f54:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f60:	d038      	beq.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f62:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f72:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2232      	movs	r2, #50	@ 0x32
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9b      	lsrs	r3, r3, #18
 8001f84:	3301      	adds	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f88:	e002      	b.n	8001f90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f90:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f2      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb0:	d110      	bne.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e00f      	b.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc2:	d007      	beq.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fcc:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	431bde83 	.word	0x431bde83

08001ff0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e3ca      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002002:	4b97      	ldr	r3, [pc, #604]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800200c:	4b94      	ldr	r3, [pc, #592]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80e4 	beq.w	80021ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <HAL_RCC_OscConfig+0x4a>
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	f040 808b 	bne.w	8002148 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b01      	cmp	r3, #1
 8002036:	f040 8087 	bne.w	8002148 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800203a:	4b89      	ldr	r3, [pc, #548]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x62>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e3a2      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1a      	ldr	r2, [r3, #32]
 8002056:	4b82      	ldr	r3, [pc, #520]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HAL_RCC_OscConfig+0x7c>
 8002062:	4b7f      	ldr	r3, [pc, #508]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800206a:	e005      	b.n	8002078 <HAL_RCC_OscConfig+0x88>
 800206c:	4b7c      	ldr	r3, [pc, #496]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 800206e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002078:	4293      	cmp	r3, r2
 800207a:	d223      	bcs.n	80020c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fd55 	bl	8002b30 <RCC_SetFlashLatencyFromMSIRange>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e383      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002090:	4b73      	ldr	r3, [pc, #460]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a72      	ldr	r2, [pc, #456]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002096:	f043 0308 	orr.w	r3, r3, #8
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b70      	ldr	r3, [pc, #448]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	496d      	ldr	r1, [pc, #436]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	4968      	ldr	r1, [pc, #416]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
 80020c2:	e025      	b.n	8002110 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c4:	4b66      	ldr	r3, [pc, #408]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a65      	ldr	r2, [pc, #404]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b63      	ldr	r3, [pc, #396]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4960      	ldr	r1, [pc, #384]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	495b      	ldr	r1, [pc, #364]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fd15 	bl	8002b30 <RCC_SetFlashLatencyFromMSIRange>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e343      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002110:	f000 fc4a 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b52      	ldr	r3, [pc, #328]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	4950      	ldr	r1, [pc, #320]	@ (8002264 <HAL_RCC_OscConfig+0x274>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	4a4e      	ldr	r2, [pc, #312]	@ (8002268 <HAL_RCC_OscConfig+0x278>)
 800212e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002130:	4b4e      	ldr	r3, [pc, #312]	@ (800226c <HAL_RCC_OscConfig+0x27c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff f871 	bl	800121c <HAL_InitTick>
 800213a:	4603      	mov	r3, r0
 800213c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d052      	beq.n	80021ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	e327      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d032      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002150:	4b43      	ldr	r3, [pc, #268]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a42      	ldr	r2, [pc, #264]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800215c:	f7ff f8ae 	bl	80012bc <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002164:	f7ff f8aa 	bl	80012bc <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e310      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002176:	4b3a      	ldr	r3, [pc, #232]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002182:	4b37      	ldr	r3, [pc, #220]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a36      	ldr	r2, [pc, #216]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b34      	ldr	r3, [pc, #208]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4931      	ldr	r1, [pc, #196]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	492c      	ldr	r1, [pc, #176]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
 80021b4:	e01a      	b.n	80021ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a29      	ldr	r2, [pc, #164]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c2:	f7ff f87b 	bl	80012bc <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ca:	f7ff f877 	bl	80012bc <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e2dd      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021dc:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f0      	bne.n	80021ca <HAL_RCC_OscConfig+0x1da>
 80021e8:	e000      	b.n	80021ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d074      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x21a>
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	d10e      	bne.n	8002222 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d10b      	bne.n	8002222 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d064      	beq.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d160      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e2ba      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x24a>
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0b      	ldr	r2, [pc, #44]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e026      	b.n	8002288 <HAL_RCC_OscConfig+0x298>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002242:	d115      	bne.n	8002270 <HAL_RCC_OscConfig+0x280>
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a05      	ldr	r2, [pc, #20]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 800224a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a02      	ldr	r2, [pc, #8]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	e014      	b.n	8002288 <HAL_RCC_OscConfig+0x298>
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	080068b0 	.word	0x080068b0
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004
 8002270:	4ba0      	ldr	r3, [pc, #640]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a9f      	ldr	r2, [pc, #636]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b9d      	ldr	r3, [pc, #628]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a9c      	ldr	r2, [pc, #624]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff f814 	bl	80012bc <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff f810 	bl	80012bc <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	@ 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e276      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022aa:	4b92      	ldr	r3, [pc, #584]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x2a8>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff f800 	bl	80012bc <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe fffc 	bl	80012bc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e262      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d2:	4b88      	ldr	r3, [pc, #544]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2d0>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d060      	beq.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_OscConfig+0x310>
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d119      	bne.n	800232e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d116      	bne.n	800232e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002300:	4b7c      	ldr	r3, [pc, #496]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_OscConfig+0x328>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e23f      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b76      	ldr	r3, [pc, #472]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	061b      	lsls	r3, r3, #24
 8002326:	4973      	ldr	r1, [pc, #460]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232c:	e040      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d023      	beq.n	800237e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002336:	4b6f      	ldr	r3, [pc, #444]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6e      	ldr	r2, [pc, #440]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe ffbb 	bl	80012bc <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234a:	f7fe ffb7 	bl	80012bc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e21d      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235c:	4b65      	ldr	r3, [pc, #404]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b62      	ldr	r3, [pc, #392]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	495f      	ldr	r1, [pc, #380]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e018      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237e:	4b5d      	ldr	r3, [pc, #372]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a5c      	ldr	r2, [pc, #368]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7fe ff97 	bl	80012bc <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002392:	f7fe ff93 	bl	80012bc <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e1f9      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a4:	4b53      	ldr	r3, [pc, #332]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d03c      	beq.n	8002436 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01c      	beq.n	80023fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c4:	4b4b      	ldr	r3, [pc, #300]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ca:	4a4a      	ldr	r2, [pc, #296]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe ff72 	bl	80012bc <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe ff6e 	bl	80012bc <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1d4      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ee:	4b41      	ldr	r3, [pc, #260]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80023f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ef      	beq.n	80023dc <HAL_RCC_OscConfig+0x3ec>
 80023fc:	e01b      	b.n	8002436 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fe:	4b3d      	ldr	r3, [pc, #244]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002404:	4a3b      	ldr	r2, [pc, #236]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7fe ff55 	bl	80012bc <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002416:	f7fe ff51 	bl	80012bc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1b7      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002428:	4b32      	ldr	r3, [pc, #200]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ef      	bne.n	8002416 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80a6 	beq.w	8002590 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002448:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	4a26      	ldr	r2, [pc, #152]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002460:	4b24      	ldr	r3, [pc, #144]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246c:	2301      	movs	r3, #1
 800246e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002470:	4b21      	ldr	r3, [pc, #132]	@ (80024f8 <HAL_RCC_OscConfig+0x508>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d118      	bne.n	80024ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800247c:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <HAL_RCC_OscConfig+0x508>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1d      	ldr	r2, [pc, #116]	@ (80024f8 <HAL_RCC_OscConfig+0x508>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002486:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002488:	f7fe ff18 	bl	80012bc <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002490:	f7fe ff14 	bl	80012bc <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e17a      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_RCC_OscConfig+0x508>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4d8>
 80024b6:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024bc:	4a0d      	ldr	r2, [pc, #52]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024c6:	e029      	b.n	800251c <HAL_RCC_OscConfig+0x52c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d115      	bne.n	80024fc <HAL_RCC_OscConfig+0x50c>
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d6:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024e0:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e6:	4a03      	ldr	r2, [pc, #12]	@ (80024f4 <HAL_RCC_OscConfig+0x504>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024f0:	e014      	b.n	800251c <HAL_RCC_OscConfig+0x52c>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40007000 	.word	0x40007000
 80024fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002502:	4a9b      	ldr	r2, [pc, #620]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800250c:	4b98      	ldr	r3, [pc, #608]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	4a97      	ldr	r2, [pc, #604]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d016      	beq.n	8002552 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7fe feca 	bl	80012bc <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7fe fec6 	bl	80012bc <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e12a      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	4b8b      	ldr	r3, [pc, #556]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ed      	beq.n	800252c <HAL_RCC_OscConfig+0x53c>
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7fe feb3 	bl	80012bc <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7fe feaf 	bl	80012bc <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e113      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	4b7f      	ldr	r3, [pc, #508]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ed      	bne.n	800255a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b7a      	ldr	r3, [pc, #488]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	4a79      	ldr	r2, [pc, #484]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800258e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80fe 	beq.w	8002796 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259e:	2b02      	cmp	r3, #2
 80025a0:	f040 80d0 	bne.w	8002744 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025a4:	4b72      	ldr	r3, [pc, #456]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d130      	bne.n	800261a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	3b01      	subs	r3, #1
 80025c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d127      	bne.n	800261a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d11f      	bne.n	800261a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025e4:	2a07      	cmp	r2, #7
 80025e6:	bf14      	ite	ne
 80025e8:	2201      	movne	r2, #1
 80025ea:	2200      	moveq	r2, #0
 80025ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d113      	bne.n	800261a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	3b01      	subs	r3, #1
 8002600:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d109      	bne.n	800261a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d06e      	beq.n	80026f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d069      	beq.n	80026f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002620:	4b53      	ldr	r3, [pc, #332]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800262c:	4b50      	ldr	r3, [pc, #320]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0ad      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800263c:	4b4c      	ldr	r3, [pc, #304]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a4b      	ldr	r2, [pc, #300]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002648:	f7fe fe38 	bl	80012bc <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fe34 	bl	80012bc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e09a      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002662:	4b43      	ldr	r3, [pc, #268]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266e:	4b40      	ldr	r3, [pc, #256]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	4b40      	ldr	r3, [pc, #256]	@ (8002774 <HAL_RCC_OscConfig+0x784>)
 8002674:	4013      	ands	r3, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800267e:	3a01      	subs	r2, #1
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002688:	0212      	lsls	r2, r2, #8
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002690:	0852      	lsrs	r2, r2, #1
 8002692:	3a01      	subs	r2, #1
 8002694:	0552      	lsls	r2, r2, #21
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800269c:	0852      	lsrs	r2, r2, #1
 800269e:	3a01      	subs	r2, #1
 80026a0:	0652      	lsls	r2, r2, #25
 80026a2:	4311      	orrs	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026a8:	0912      	lsrs	r2, r2, #4
 80026aa:	0452      	lsls	r2, r2, #17
 80026ac:	430a      	orrs	r2, r1
 80026ae:	4930      	ldr	r1, [pc, #192]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 80026ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026cc:	f7fe fdf6 	bl	80012bc <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fdf2 	bl	80012bc <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e058      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f2:	e050      	b.n	8002796 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e04f      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d148      	bne.n	8002796 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002704:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a19      	ldr	r2, [pc, #100]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002710:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a16      	ldr	r2, [pc, #88]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800271c:	f7fe fdce 	bl	80012bc <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe fdca 	bl	80012bc <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e030      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002736:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x734>
 8002742:	e028      	b.n	8002796 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d023      	beq.n	8002792 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a08      	ldr	r2, [pc, #32]	@ (8002770 <HAL_RCC_OscConfig+0x780>)
 8002750:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fdb1 	bl	80012bc <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275c:	e00c      	b.n	8002778 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe fdad 	bl	80012bc <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d905      	bls.n	8002778 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e013      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
 8002770:	40021000 	.word	0x40021000
 8002774:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002778:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_RCC_OscConfig+0x7b0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ec      	bne.n	800275e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002784:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCC_OscConfig+0x7b0>)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	4905      	ldr	r1, [pc, #20]	@ (80027a0 <HAL_RCC_OscConfig+0x7b0>)
 800278a:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_RCC_OscConfig+0x7b4>)
 800278c:	4013      	ands	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
 8002790:	e001      	b.n	8002796 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	feeefffc 	.word	0xfeeefffc

080027a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0e7      	b.n	800298c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b75      	ldr	r3, [pc, #468]	@ (8002994 <HAL_RCC_ClockConfig+0x1ec>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d910      	bls.n	80027ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b72      	ldr	r3, [pc, #456]	@ (8002994 <HAL_RCC_ClockConfig+0x1ec>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	4970      	ldr	r1, [pc, #448]	@ (8002994 <HAL_RCC_ClockConfig+0x1ec>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b6e      	ldr	r3, [pc, #440]	@ (8002994 <HAL_RCC_ClockConfig+0x1ec>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0cf      	b.n	800298c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d010      	beq.n	800281a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	4b66      	ldr	r3, [pc, #408]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002804:	429a      	cmp	r2, r3
 8002806:	d908      	bls.n	800281a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b63      	ldr	r3, [pc, #396]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4960      	ldr	r1, [pc, #384]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d04c      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282e:	4b5a      	ldr	r3, [pc, #360]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d121      	bne.n	800287e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0a6      	b.n	800298c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002846:	4b54      	ldr	r3, [pc, #336]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d115      	bne.n	800287e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e09a      	b.n	800298c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800285e:	4b4e      	ldr	r3, [pc, #312]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e08e      	b.n	800298c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800286e:	4b4a      	ldr	r3, [pc, #296]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e086      	b.n	800298c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800287e:	4b46      	ldr	r3, [pc, #280]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f023 0203 	bic.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4943      	ldr	r1, [pc, #268]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	4313      	orrs	r3, r2
 800288e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002890:	f7fe fd14 	bl	80012bc <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	e00a      	b.n	80028ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002898:	f7fe fd10 	bl	80012bc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e06e      	b.n	800298c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 020c 	and.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1eb      	bne.n	8002898 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d010      	beq.n	80028ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028d8:	429a      	cmp	r2, r3
 80028da:	d208      	bcs.n	80028ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	492b      	ldr	r1, [pc, #172]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ee:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <HAL_RCC_ClockConfig+0x1ec>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d210      	bcs.n	800291e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fc:	4b25      	ldr	r3, [pc, #148]	@ (8002994 <HAL_RCC_ClockConfig+0x1ec>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 0207 	bic.w	r2, r3, #7
 8002904:	4923      	ldr	r1, [pc, #140]	@ (8002994 <HAL_RCC_ClockConfig+0x1ec>)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290c:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <HAL_RCC_ClockConfig+0x1ec>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d001      	beq.n	800291e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e036      	b.n	800298c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800292a:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4918      	ldr	r1, [pc, #96]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002948:	4b13      	ldr	r3, [pc, #76]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4910      	ldr	r1, [pc, #64]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800295c:	f000 f824 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	490b      	ldr	r1, [pc, #44]	@ (800299c <HAL_RCC_ClockConfig+0x1f4>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 800297a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800297c:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x1fc>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe fc4b 	bl	800121c <HAL_InitTick>
 8002986:	4603      	mov	r3, r0
 8002988:	72fb      	strb	r3, [r7, #11]

  return status;
 800298a:	7afb      	ldrb	r3, [r7, #11]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40022000 	.word	0x40022000
 8002998:	40021000 	.word	0x40021000
 800299c:	080068b0 	.word	0x080068b0
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	@ 0x24
 80029ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x34>
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d121      	bne.n	8002a1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d11e      	bne.n	8002a1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029dc:	4b34      	ldr	r3, [pc, #208]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029e8:	4b31      	ldr	r3, [pc, #196]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	e005      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029f8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a04:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10d      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d102      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a20:	4b25      	ldr	r3, [pc, #148]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	e004      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a2c:	4b23      	ldr	r3, [pc, #140]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x114>)
 8002a2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d134      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a36:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_GetSysClockFreq+0xa6>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d003      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0xac>
 8002a4c:	e005      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a50:	617b      	str	r3, [r7, #20]
      break;
 8002a52:	e005      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x114>)
 8002a56:	617b      	str	r3, [r7, #20]
      break;
 8002a58:	e002      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	617b      	str	r3, [r7, #20]
      break;
 8002a5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a60:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a6e:	4b10      	ldr	r3, [pc, #64]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	fb03 f202 	mul.w	r2, r3, r2
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	0e5b      	lsrs	r3, r3, #25
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	3301      	adds	r3, #1
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	@ 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	080068c8 	.word	0x080068c8
 8002ab8:	00f42400 	.word	0x00f42400
 8002abc:	007a1200 	.word	0x007a1200

08002ac0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac4:	4b03      	ldr	r3, [pc, #12]	@ (8002ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000000 	.word	0x20000000

08002ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002adc:	f7ff fff0 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4904      	ldr	r1, [pc, #16]	@ (8002b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aee:	5ccb      	ldrb	r3, [r1, r3]
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	080068c0 	.word	0x080068c0

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b08:	f7ff ffda 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0adb      	lsrs	r3, r3, #11
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4904      	ldr	r1, [pc, #16]	@ (8002b2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	080068c0 	.word	0x080068c0

08002b30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b48:	f7ff f9ee 	bl	8001f28 <HAL_PWREx_GetVoltageRange>
 8002b4c:	6178      	str	r0, [r7, #20]
 8002b4e:	e014      	b.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b50:	4b25      	ldr	r3, [pc, #148]	@ (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b54:	4a24      	ldr	r2, [pc, #144]	@ (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b5c:	4b22      	ldr	r3, [pc, #136]	@ (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b68:	f7ff f9de 	bl	8001f28 <HAL_PWREx_GetVoltageRange>
 8002b6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b72:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b80:	d10b      	bne.n	8002b9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b80      	cmp	r3, #128	@ 0x80
 8002b86:	d919      	bls.n	8002bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b8c:	d902      	bls.n	8002b94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b8e:	2302      	movs	r3, #2
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	e013      	b.n	8002bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b94:	2301      	movs	r3, #1
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	e010      	b.n	8002bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b80      	cmp	r3, #128	@ 0x80
 8002b9e:	d902      	bls.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e00a      	b.n	8002bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b80      	cmp	r3, #128	@ 0x80
 8002baa:	d102      	bne.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bac:	2302      	movs	r3, #2
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	e004      	b.n	8002bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b70      	cmp	r3, #112	@ 0x70
 8002bb6:	d101      	bne.n	8002bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bb8:	2301      	movs	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f023 0207 	bic.w	r2, r3, #7
 8002bc4:	4909      	ldr	r1, [pc, #36]	@ (8002bec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bcc:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d001      	beq.n	8002bde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40022000 	.word	0x40022000

08002bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d041      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c14:	d02a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c1a:	d824      	bhi.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c20:	d008      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c26:	d81e      	bhi.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c30:	d010      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c32:	e018      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c34:	4b86      	ldr	r3, [pc, #536]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a85      	ldr	r2, [pc, #532]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c40:	e015      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 f829 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c52:	e00c      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3320      	adds	r3, #32
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 f914 	bl	8003e88 <RCCEx_PLLSAI2_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c64:	e003      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	74fb      	strb	r3, [r7, #19]
      break;
 8002c6a:	e000      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10b      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c74:	4b76      	ldr	r3, [pc, #472]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c82:	4973      	ldr	r1, [pc, #460]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c8a:	e001      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d041      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ca0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ca4:	d02a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ca6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002caa:	d824      	bhi.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cb0:	d008      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cb6:	d81e      	bhi.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cc2:	e018      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cc4:	4b62      	ldr	r3, [pc, #392]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a61      	ldr	r2, [pc, #388]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cd0:	e015      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 ffe1 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ce2:	e00c      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3320      	adds	r3, #32
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 f8cc 	bl	8003e88 <RCCEx_PLLSAI2_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cf4:	e003      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	74fb      	strb	r3, [r7, #19]
      break;
 8002cfa:	e000      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d04:	4b52      	ldr	r3, [pc, #328]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d12:	494f      	ldr	r1, [pc, #316]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d1a:	e001      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80a0 	beq.w	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d32:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d48:	4b41      	ldr	r3, [pc, #260]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4c:	4a40      	ldr	r2, [pc, #256]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d54:	4b3e      	ldr	r3, [pc, #248]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d60:	2301      	movs	r3, #1
 8002d62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d64:	4b3b      	ldr	r3, [pc, #236]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3a      	ldr	r2, [pc, #232]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d70:	f7fe faa4 	bl	80012bc <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d76:	e009      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d78:	f7fe faa0 	bl	80012bc <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	74fb      	strb	r3, [r7, #19]
        break;
 8002d8a:	e005      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d8c:	4b31      	ldr	r3, [pc, #196]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ef      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d15c      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01f      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d019      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dbc:	4b24      	ldr	r3, [pc, #144]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dc8:	4b21      	ldr	r3, [pc, #132]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dce:	4a20      	ldr	r2, [pc, #128]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dde:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002de8:	4a19      	ldr	r2, [pc, #100]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d016      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fa5f 	bl	80012bc <HAL_GetTick>
 8002dfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e00:	e00b      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7fe fa5b 	bl	80012bc <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d902      	bls.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	74fb      	strb	r3, [r7, #19]
            break;
 8002e18:	e006      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ec      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e2e:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e3e:	4904      	ldr	r1, [pc, #16]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e46:	e009      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	74bb      	strb	r3, [r7, #18]
 8002e4c:	e006      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5c:	7c7b      	ldrb	r3, [r7, #17]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e62:	4b9e      	ldr	r3, [pc, #632]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	4a9d      	ldr	r2, [pc, #628]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e7a:	4b98      	ldr	r3, [pc, #608]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e80:	f023 0203 	bic.w	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e88:	4994      	ldr	r1, [pc, #592]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea2:	f023 020c 	bic.w	r2, r3, #12
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eaa:	498c      	ldr	r1, [pc, #560]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ebe:	4b87      	ldr	r3, [pc, #540]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	4983      	ldr	r1, [pc, #524]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	497b      	ldr	r1, [pc, #492]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f02:	4b76      	ldr	r3, [pc, #472]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f10:	4972      	ldr	r1, [pc, #456]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f24:	4b6d      	ldr	r3, [pc, #436]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f32:	496a      	ldr	r1, [pc, #424]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f46:	4b65      	ldr	r3, [pc, #404]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	4961      	ldr	r1, [pc, #388]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f68:	4b5c      	ldr	r3, [pc, #368]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f76:	4959      	ldr	r1, [pc, #356]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f8a:	4b54      	ldr	r3, [pc, #336]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f98:	4950      	ldr	r1, [pc, #320]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fac:	4b4b      	ldr	r3, [pc, #300]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fba:	4948      	ldr	r1, [pc, #288]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fce:	4b43      	ldr	r3, [pc, #268]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fdc:	493f      	ldr	r1, [pc, #252]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d028      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ffe:	4937      	ldr	r1, [pc, #220]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800300a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800300e:	d106      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003010:	4b32      	ldr	r3, [pc, #200]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a31      	ldr	r2, [pc, #196]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800301a:	60d3      	str	r3, [r2, #12]
 800301c:	e011      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003022:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003026:	d10c      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fe36 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d028      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800304e:	4b23      	ldr	r3, [pc, #140]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003054:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305c:	491f      	ldr	r1, [pc, #124]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800306c:	d106      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800306e:	4b1b      	ldr	r3, [pc, #108]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4a1a      	ldr	r2, [pc, #104]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003074:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003078:	60d3      	str	r3, [r2, #12]
 800307a:	e011      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3304      	adds	r3, #4
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fe07 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d02b      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ba:	4908      	ldr	r1, [pc, #32]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030ca:	d109      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a02      	ldr	r2, [pc, #8]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030d6:	60d3      	str	r3, [r2, #12]
 80030d8:	e014      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fdd5 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d02f      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003110:	4b2b      	ldr	r3, [pc, #172]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800311e:	4928      	ldr	r1, [pc, #160]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800312a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800312e:	d10d      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	2102      	movs	r1, #2
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fdb2 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d014      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	74bb      	strb	r3, [r7, #18]
 800314a:	e011      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003154:	d10c      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3320      	adds	r3, #32
 800315a:	2102      	movs	r1, #2
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fe93 	bl	8003e88 <RCCEx_PLLSAI2_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800317c:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800318a:	490d      	ldr	r1, [pc, #52]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800319e:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ae:	4904      	ldr	r1, [pc, #16]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000

080031c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031d6:	d13e      	bne.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80031d8:	4bb2      	ldr	r3, [pc, #712]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ea:	d028      	beq.n	800323e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031f2:	f200 8542 	bhi.w	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031fc:	d005      	beq.n	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003204:	d00e      	beq.n	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003206:	f000 bd38 	b.w	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800320a:	4ba6      	ldr	r3, [pc, #664]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b02      	cmp	r3, #2
 8003216:	f040 8532 	bne.w	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800321a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800321e:	61fb      	str	r3, [r7, #28]
      break;
 8003220:	f000 bd2d 	b.w	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003224:	4b9f      	ldr	r3, [pc, #636]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	f040 8527 	bne.w	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003234:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003238:	61fb      	str	r3, [r7, #28]
      break;
 800323a:	f000 bd22 	b.w	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800323e:	4b99      	ldr	r3, [pc, #612]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800324a:	f040 851c 	bne.w	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800324e:	4b96      	ldr	r3, [pc, #600]	@ (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003250:	61fb      	str	r3, [r7, #28]
      break;
 8003252:	f000 bd18 	b.w	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003256:	4b93      	ldr	r3, [pc, #588]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d036      	beq.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d840      	bhi.n	80032ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d003      	beq.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d020      	beq.n	80032ba <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003278:	e039      	b.n	80032ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800327a:	4b8a      	ldr	r3, [pc, #552]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b02      	cmp	r3, #2
 8003284:	d116      	bne.n	80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003286:	4b87      	ldr	r3, [pc, #540]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003292:	4b84      	ldr	r3, [pc, #528]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	e005      	b.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800329e:	4b81      	ldr	r3, [pc, #516]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80032a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a4:	0a1b      	lsrs	r3, r3, #8
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	4a80      	ldr	r2, [pc, #512]	@ (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80032ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80032b2:	e01f      	b.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
      break;
 80032b8:	e01c      	b.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032ba:	4b7a      	ldr	r3, [pc, #488]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c6:	d102      	bne.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80032c8:	4b79      	ldr	r3, [pc, #484]	@ (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80032ca:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80032cc:	e012      	b.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
      break;
 80032d2:	e00f      	b.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80032d4:	4b73      	ldr	r3, [pc, #460]	@ (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032e0:	d102      	bne.n	80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80032e2:	4b74      	ldr	r3, [pc, #464]	@ (80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80032e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80032e6:	e005      	b.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
      break;
 80032ec:	e002      	b.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
      break;
 80032f2:	bf00      	nop
    }

    switch(PeriphClk)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032fa:	f000 80dd 	beq.w	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003304:	f200 84c1 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800330e:	f000 80d3 	beq.w	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003318:	f200 84b7 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003322:	f000 835f 	beq.w	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332c:	f200 84ad 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003336:	f000 847e 	beq.w	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003340:	f200 84a3 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800334a:	f000 82cd 	beq.w	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003354:	f200 8499 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800335e:	f000 80ab 	beq.w	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003368:	f200 848f 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003372:	f000 8090 	beq.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337c:	f200 8485 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003386:	d07f      	beq.n	8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800338e:	f200 847c 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003398:	f000 8403 	beq.w	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a2:	f200 8472 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ac:	f000 83af 	beq.w	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b6:	f200 8468 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c0:	f000 8379 	beq.w	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ca:	f200 845e 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b80      	cmp	r3, #128	@ 0x80
 80033d2:	f000 8344 	beq.w	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b80      	cmp	r3, #128	@ 0x80
 80033da:	f200 8456 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d84b      	bhi.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 844f 	beq.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	2b1f      	cmp	r3, #31
 80033f2:	f200 844a 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80033f6:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	080035e5 	.word	0x080035e5
 8003400:	08003653 	.word	0x08003653
 8003404:	08003c8b 	.word	0x08003c8b
 8003408:	080036e7 	.word	0x080036e7
 800340c:	08003c8b 	.word	0x08003c8b
 8003410:	08003c8b 	.word	0x08003c8b
 8003414:	08003c8b 	.word	0x08003c8b
 8003418:	0800376d 	.word	0x0800376d
 800341c:	08003c8b 	.word	0x08003c8b
 8003420:	08003c8b 	.word	0x08003c8b
 8003424:	08003c8b 	.word	0x08003c8b
 8003428:	08003c8b 	.word	0x08003c8b
 800342c:	08003c8b 	.word	0x08003c8b
 8003430:	08003c8b 	.word	0x08003c8b
 8003434:	08003c8b 	.word	0x08003c8b
 8003438:	080037e5 	.word	0x080037e5
 800343c:	08003c8b 	.word	0x08003c8b
 8003440:	08003c8b 	.word	0x08003c8b
 8003444:	08003c8b 	.word	0x08003c8b
 8003448:	08003c8b 	.word	0x08003c8b
 800344c:	08003c8b 	.word	0x08003c8b
 8003450:	08003c8b 	.word	0x08003c8b
 8003454:	08003c8b 	.word	0x08003c8b
 8003458:	08003c8b 	.word	0x08003c8b
 800345c:	08003c8b 	.word	0x08003c8b
 8003460:	08003c8b 	.word	0x08003c8b
 8003464:	08003c8b 	.word	0x08003c8b
 8003468:	08003c8b 	.word	0x08003c8b
 800346c:	08003c8b 	.word	0x08003c8b
 8003470:	08003c8b 	.word	0x08003c8b
 8003474:	08003c8b 	.word	0x08003c8b
 8003478:	08003867 	.word	0x08003867
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b40      	cmp	r3, #64	@ 0x40
 8003480:	f000 82c1 	beq.w	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003484:	f000 bc01 	b.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003488:	69b9      	ldr	r1, [r7, #24]
 800348a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800348e:	f000 fdd9 	bl	8004044 <RCCEx_GetSAIxPeriphCLKFreq>
 8003492:	61f8      	str	r0, [r7, #28]
      break;
 8003494:	e3fa      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003496:	69b9      	ldr	r1, [r7, #24]
 8003498:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800349c:	f000 fdd2 	bl	8004044 <RCCEx_GetSAIxPeriphCLKFreq>
 80034a0:	61f8      	str	r0, [r7, #28]
      break;
 80034a2:	e3f3      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80034a4:	40021000 	.word	0x40021000
 80034a8:	0003d090 	.word	0x0003d090
 80034ac:	080068c8 	.word	0x080068c8
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80034b8:	4ba9      	ldr	r3, [pc, #676]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034be:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80034ca:	d00c      	beq.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80034d2:	d87f      	bhi.n	80035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034da:	d04e      	beq.n	800357a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034e2:	d01d      	beq.n	8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80034e4:	e076      	b.n	80035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80034e6:	4b9e      	ldr	r3, [pc, #632]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d172      	bne.n	80035d8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80034f2:	4b9b      	ldr	r3, [pc, #620]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80034fe:	4b98      	ldr	r3, [pc, #608]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	e005      	b.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800350a:	4b95      	ldr	r3, [pc, #596]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800350c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	4a93      	ldr	r2, [pc, #588]	@ (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351c:	61fb      	str	r3, [r7, #28]
          break;
 800351e:	e05b      	b.n	80035d8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003520:	4b8f      	ldr	r3, [pc, #572]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800352c:	d156      	bne.n	80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800352e:	4b8c      	ldr	r3, [pc, #560]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800353a:	d14f      	bne.n	80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800353c:	4b88      	ldr	r3, [pc, #544]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003546:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	fb03 f202 	mul.w	r2, r3, r2
 8003550:	4b83      	ldr	r3, [pc, #524]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	3301      	adds	r3, #1
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003562:	4b7f      	ldr	r3, [pc, #508]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	0d5b      	lsrs	r3, r3, #21
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	3301      	adds	r3, #1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	61fb      	str	r3, [r7, #28]
          break;
 8003578:	e030      	b.n	80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800357a:	4b79      	ldr	r3, [pc, #484]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003586:	d12b      	bne.n	80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003588:	4b75      	ldr	r3, [pc, #468]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003594:	d124      	bne.n	80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003596:	4b72      	ldr	r3, [pc, #456]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035a0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	fb03 f202 	mul.w	r2, r3, r2
 80035aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	3301      	adds	r3, #1
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80035bc:	4b68      	ldr	r3, [pc, #416]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	0d5b      	lsrs	r3, r3, #21
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	61fb      	str	r3, [r7, #28]
          break;
 80035d2:	e005      	b.n	80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80035d4:	bf00      	nop
 80035d6:	e359      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80035d8:	bf00      	nop
 80035da:	e357      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80035dc:	bf00      	nop
 80035de:	e355      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80035e0:	bf00      	nop
        break;
 80035e2:	e353      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80035e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d827      	bhi.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80035f6:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	08003615 	.word	0x08003615
 8003604:	0800361d 	.word	0x0800361d
 8003608:	08003631 	.word	0x08003631
          frequency = HAL_RCC_GetPCLK2Freq();
 800360c:	f7ff fa7a 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 8003610:	61f8      	str	r0, [r7, #28]
          break;
 8003612:	e01d      	b.n	8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003614:	f7ff f9c8 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8003618:	61f8      	str	r0, [r7, #28]
          break;
 800361a:	e019      	b.n	8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800361c:	4b50      	ldr	r3, [pc, #320]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003628:	d10f      	bne.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800362a:	4b4f      	ldr	r3, [pc, #316]	@ (8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800362c:	61fb      	str	r3, [r7, #28]
          break;
 800362e:	e00c      	b.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003630:	4b4b      	ldr	r3, [pc, #300]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d107      	bne.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800363e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003642:	61fb      	str	r3, [r7, #28]
          break;
 8003644:	e003      	b.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003646:	bf00      	nop
 8003648:	e320      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800364a:	bf00      	nop
 800364c:	e31e      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800364e:	bf00      	nop
        break;
 8003650:	e31c      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003652:	4b43      	ldr	r3, [pc, #268]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d83a      	bhi.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003664:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	080036a1 	.word	0x080036a1
 8003670:	080036db 	.word	0x080036db
 8003674:	080036db 	.word	0x080036db
 8003678:	080036db 	.word	0x080036db
 800367c:	080036a9 	.word	0x080036a9
 8003680:	080036db 	.word	0x080036db
 8003684:	080036db 	.word	0x080036db
 8003688:	080036db 	.word	0x080036db
 800368c:	080036b1 	.word	0x080036b1
 8003690:	080036db 	.word	0x080036db
 8003694:	080036db 	.word	0x080036db
 8003698:	080036db 	.word	0x080036db
 800369c:	080036c5 	.word	0x080036c5
          frequency = HAL_RCC_GetPCLK1Freq();
 80036a0:	f7ff fa1a 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 80036a4:	61f8      	str	r0, [r7, #28]
          break;
 80036a6:	e01d      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80036a8:	f7ff f97e 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 80036ac:	61f8      	str	r0, [r7, #28]
          break;
 80036ae:	e019      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80036b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036bc:	d10f      	bne.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80036be:	4b2a      	ldr	r3, [pc, #168]	@ (8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80036c0:	61fb      	str	r3, [r7, #28]
          break;
 80036c2:	e00c      	b.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80036c4:	4b26      	ldr	r3, [pc, #152]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d107      	bne.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80036d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036d6:	61fb      	str	r3, [r7, #28]
          break;
 80036d8:	e003      	b.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80036da:	bf00      	nop
 80036dc:	e2d6      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80036de:	bf00      	nop
 80036e0:	e2d4      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80036e2:	bf00      	nop
        break;
 80036e4:	e2d2      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80036e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b30      	cmp	r3, #48	@ 0x30
 80036f6:	d021      	beq.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b30      	cmp	r3, #48	@ 0x30
 80036fc:	d829      	bhi.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b20      	cmp	r3, #32
 8003702:	d011      	beq.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b20      	cmp	r3, #32
 8003708:	d823      	bhi.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b10      	cmp	r3, #16
 8003714:	d004      	beq.n	8003720 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003716:	e01c      	b.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003718:	f7ff f9de 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 800371c:	61f8      	str	r0, [r7, #28]
          break;
 800371e:	e01d      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003720:	f7ff f942 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8003724:	61f8      	str	r0, [r7, #28]
          break;
 8003726:	e019      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003728:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003734:	d10f      	bne.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003736:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003738:	61fb      	str	r3, [r7, #28]
          break;
 800373a:	e00c      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800373c:	4b08      	ldr	r3, [pc, #32]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d107      	bne.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800374a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800374e:	61fb      	str	r3, [r7, #28]
          break;
 8003750:	e003      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003752:	bf00      	nop
 8003754:	e29a      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003756:	bf00      	nop
 8003758:	e298      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800375a:	bf00      	nop
        break;
 800375c:	e296      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	080068c8 	.word	0x080068c8
 8003768:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800376c:	4b9b      	ldr	r3, [pc, #620]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003772:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2bc0      	cmp	r3, #192	@ 0xc0
 800377c:	d021      	beq.n	80037c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2bc0      	cmp	r3, #192	@ 0xc0
 8003782:	d829      	bhi.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b80      	cmp	r3, #128	@ 0x80
 8003788:	d011      	beq.n	80037ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b80      	cmp	r3, #128	@ 0x80
 800378e:	d823      	bhi.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b40      	cmp	r3, #64	@ 0x40
 800379a:	d004      	beq.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 800379c:	e01c      	b.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800379e:	f7ff f99b 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 80037a2:	61f8      	str	r0, [r7, #28]
          break;
 80037a4:	e01d      	b.n	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80037a6:	f7ff f8ff 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 80037aa:	61f8      	str	r0, [r7, #28]
          break;
 80037ac:	e019      	b.n	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80037ae:	4b8b      	ldr	r3, [pc, #556]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ba:	d10f      	bne.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80037bc:	4b88      	ldr	r3, [pc, #544]	@ (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80037be:	61fb      	str	r3, [r7, #28]
          break;
 80037c0:	e00c      	b.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80037c2:	4b86      	ldr	r3, [pc, #536]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d107      	bne.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80037d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037d4:	61fb      	str	r3, [r7, #28]
          break;
 80037d6:	e003      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80037d8:	bf00      	nop
 80037da:	e257      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037dc:	bf00      	nop
 80037de:	e255      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037e0:	bf00      	nop
        break;
 80037e2:	e253      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80037e4:	4b7d      	ldr	r3, [pc, #500]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037f6:	d025      	beq.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037fe:	d82c      	bhi.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003806:	d013      	beq.n	8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800380e:	d824      	bhi.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d004      	beq.n	8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800381c:	d004      	beq.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800381e:	e01c      	b.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003820:	f7ff f95a 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8003824:	61f8      	str	r0, [r7, #28]
          break;
 8003826:	e01d      	b.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003828:	f7ff f8be 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 800382c:	61f8      	str	r0, [r7, #28]
          break;
 800382e:	e019      	b.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003830:	4b6a      	ldr	r3, [pc, #424]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383c:	d10f      	bne.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800383e:	4b68      	ldr	r3, [pc, #416]	@ (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003840:	61fb      	str	r3, [r7, #28]
          break;
 8003842:	e00c      	b.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003844:	4b65      	ldr	r3, [pc, #404]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d107      	bne.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003856:	61fb      	str	r3, [r7, #28]
          break;
 8003858:	e003      	b.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800385a:	bf00      	nop
 800385c:	e216      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800385e:	bf00      	nop
 8003860:	e214      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003862:	bf00      	nop
        break;
 8003864:	e212      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003866:	4b5d      	ldr	r3, [pc, #372]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003878:	d025      	beq.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003880:	d82c      	bhi.n	80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003888:	d013      	beq.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003890:	d824      	bhi.n	80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800389e:	d004      	beq.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80038a0:	e01c      	b.n	80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80038a2:	f7ff f919 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 80038a6:	61f8      	str	r0, [r7, #28]
          break;
 80038a8:	e01d      	b.n	80038e6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80038aa:	f7ff f87d 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 80038ae:	61f8      	str	r0, [r7, #28]
          break;
 80038b0:	e019      	b.n	80038e6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038b2:	4b4a      	ldr	r3, [pc, #296]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038be:	d10f      	bne.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80038c0:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80038c2:	61fb      	str	r3, [r7, #28]
          break;
 80038c4:	e00c      	b.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038c6:	4b45      	ldr	r3, [pc, #276]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d107      	bne.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80038d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038d8:	61fb      	str	r3, [r7, #28]
          break;
 80038da:	e003      	b.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80038dc:	bf00      	nop
 80038de:	e1d5      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038e0:	bf00      	nop
 80038e2:	e1d3      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038e4:	bf00      	nop
        break;
 80038e6:	e1d1      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80038e8:	4b3c      	ldr	r3, [pc, #240]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038fa:	d00c      	beq.n	8003916 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003902:	d864      	bhi.n	80039ce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003912:	d030      	beq.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003914:	e05b      	b.n	80039ce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003916:	f7ff f847 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 800391a:	61f8      	str	r0, [r7, #28]
          break;
 800391c:	e05c      	b.n	80039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800391e:	4b2f      	ldr	r3, [pc, #188]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800392a:	d152      	bne.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800392c:	4b2b      	ldr	r3, [pc, #172]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d04c      	beq.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003938:	4b28      	ldr	r3, [pc, #160]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003942:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	fb03 f202 	mul.w	r2, r3, r2
 800394c:	4b23      	ldr	r3, [pc, #140]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	3301      	adds	r3, #1
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800395e:	4b1f      	ldr	r3, [pc, #124]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	0e5b      	lsrs	r3, r3, #25
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	3301      	adds	r3, #1
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	61fb      	str	r3, [r7, #28]
          break;
 8003974:	e02d      	b.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003976:	4b19      	ldr	r3, [pc, #100]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800397e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003982:	d128      	bne.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003984:	4b15      	ldr	r3, [pc, #84]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d022      	beq.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003990:	4b12      	ldr	r3, [pc, #72]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800399a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	fb03 f202 	mul.w	r2, r3, r2
 80039a4:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	3301      	adds	r3, #1
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80039b6:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	0e5b      	lsrs	r3, r3, #25
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	3301      	adds	r3, #1
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	61fb      	str	r3, [r7, #28]
          break;
 80039cc:	e003      	b.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80039ce:	bf00      	nop
 80039d0:	e15c      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80039d2:	bf00      	nop
 80039d4:	e15a      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80039d6:	bf00      	nop
        break;
 80039d8:	e158      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80039e4:	4b9d      	ldr	r3, [pc, #628]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039ee:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80039f6:	f7ff f885 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 80039fa:	61f8      	str	r0, [r7, #28]
        break;
 80039fc:	e146      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80039fe:	f7fe ffd3 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8003a02:	61f8      	str	r0, [r7, #28]
        break;
 8003a04:	e142      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003a06:	4b95      	ldr	r3, [pc, #596]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a18:	d013      	beq.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a20:	d819      	bhi.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2e:	d004      	beq.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8003a30:	e011      	b.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a32:	f7ff f851 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8003a36:	61f8      	str	r0, [r7, #28]
          break;
 8003a38:	e010      	b.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7fe ffb5 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8003a3e:	61f8      	str	r0, [r7, #28]
          break;
 8003a40:	e00c      	b.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a42:	4b86      	ldr	r3, [pc, #536]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a4e:	d104      	bne.n	8003a5a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8003a50:	4b83      	ldr	r3, [pc, #524]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003a52:	61fb      	str	r3, [r7, #28]
          break;
 8003a54:	e001      	b.n	8003a5a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8003a56:	bf00      	nop
 8003a58:	e118      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a5a:	bf00      	nop
        break;
 8003a5c:	e116      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a70:	d013      	beq.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a78:	d819      	bhi.n	8003aae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a86:	d004      	beq.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003a88:	e011      	b.n	8003aae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a8a:	f7ff f825 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8003a8e:	61f8      	str	r0, [r7, #28]
          break;
 8003a90:	e010      	b.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a92:	f7fe ff89 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8003a96:	61f8      	str	r0, [r7, #28]
          break;
 8003a98:	e00c      	b.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a9a:	4b70      	ldr	r3, [pc, #448]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa6:	d104      	bne.n	8003ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8003aa8:	4b6d      	ldr	r3, [pc, #436]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003aaa:	61fb      	str	r3, [r7, #28]
          break;
 8003aac:	e001      	b.n	8003ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8003aae:	bf00      	nop
 8003ab0:	e0ec      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ab2:	bf00      	nop
        break;
 8003ab4:	e0ea      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003ab6:	4b69      	ldr	r3, [pc, #420]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ac8:	d013      	beq.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ad0:	d819      	bhi.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ade:	d004      	beq.n	8003aea <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8003ae0:	e011      	b.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ae2:	f7fe fff9 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8003ae6:	61f8      	str	r0, [r7, #28]
          break;
 8003ae8:	e010      	b.n	8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8003aea:	f7fe ff5d 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8003aee:	61f8      	str	r0, [r7, #28]
          break;
 8003af0:	e00c      	b.n	8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003af2:	4b5a      	ldr	r3, [pc, #360]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003afe:	d104      	bne.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8003b00:	4b57      	ldr	r3, [pc, #348]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003b02:	61fb      	str	r3, [r7, #28]
          break;
 8003b04:	e001      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8003b06:	bf00      	nop
 8003b08:	e0c0      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b0a:	bf00      	nop
        break;
 8003b0c:	e0be      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003b0e:	4b53      	ldr	r3, [pc, #332]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b14:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b20:	d02c      	beq.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b28:	d833      	bhi.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b30:	d01a      	beq.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b38:	d82b      	bhi.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b46:	d004      	beq.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003b48:	e023      	b.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b4a:	f7fe ffc5 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8003b4e:	61f8      	str	r0, [r7, #28]
          break;
 8003b50:	e026      	b.n	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003b52:	4b42      	ldr	r3, [pc, #264]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d11a      	bne.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8003b60:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003b64:	61fb      	str	r3, [r7, #28]
          break;
 8003b66:	e016      	b.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b68:	4b3c      	ldr	r3, [pc, #240]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b74:	d111      	bne.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003b76:	4b3a      	ldr	r3, [pc, #232]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003b78:	61fb      	str	r3, [r7, #28]
          break;
 8003b7a:	e00e      	b.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b7c:	4b37      	ldr	r3, [pc, #220]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d109      	bne.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8003b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b8e:	61fb      	str	r3, [r7, #28]
          break;
 8003b90:	e005      	b.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003b92:	bf00      	nop
 8003b94:	e07a      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b96:	bf00      	nop
 8003b98:	e078      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b9a:	bf00      	nop
 8003b9c:	e076      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b9e:	bf00      	nop
        break;
 8003ba0:	e074      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bb4:	d02c      	beq.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bbc:	d833      	bhi.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bc4:	d01a      	beq.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bcc:	d82b      	bhi.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bda:	d004      	beq.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003bdc:	e023      	b.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003bde:	f7fe ff7b 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8003be2:	61f8      	str	r0, [r7, #28]
          break;
 8003be4:	e026      	b.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003be6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d11a      	bne.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003bf4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003bf8:	61fb      	str	r3, [r7, #28]
          break;
 8003bfa:	e016      	b.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003bfc:	4b17      	ldr	r3, [pc, #92]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c08:	d111      	bne.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8003c0a:	4b15      	ldr	r3, [pc, #84]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003c0c:	61fb      	str	r3, [r7, #28]
          break;
 8003c0e:	e00e      	b.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c10:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8003c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c22:	61fb      	str	r3, [r7, #28]
          break;
 8003c24:	e005      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003c26:	bf00      	nop
 8003c28:	e030      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c2a:	bf00      	nop
 8003c2c:	e02e      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c2e:	bf00      	nop
 8003c30:	e02c      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c32:	bf00      	nop
        break;
 8003c34:	e02a      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003c36:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4e:	d009      	beq.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8003c50:	e012      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c52:	f7fe ff41 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8003c56:	61f8      	str	r0, [r7, #28]
          break;
 8003c58:	e00e      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c64:	4b0c      	ldr	r3, [pc, #48]	@ (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c70:	d101      	bne.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8003c72:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003c74:	61fb      	str	r3, [r7, #28]
          break;
 8003c76:	bf00      	nop
        break;
 8003c78:	e008      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e006      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e004      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003c82:	bf00      	nop
 8003c84:	e002      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003c86:	bf00      	nop
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003c8a:	bf00      	nop
    }
  }

  return(frequency);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	00f42400 	.word	0x00f42400

08003ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cae:	4b75      	ldr	r3, [pc, #468]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cba:	4b72      	ldr	r3, [pc, #456]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0203 	and.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d10d      	bne.n	8003ce6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d047      	beq.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e044      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d018      	beq.n	8003d26 <RCCEx_PLLSAI1_Config+0x86>
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d825      	bhi.n	8003d44 <RCCEx_PLLSAI1_Config+0xa4>
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d002      	beq.n	8003d02 <RCCEx_PLLSAI1_Config+0x62>
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d009      	beq.n	8003d14 <RCCEx_PLLSAI1_Config+0x74>
 8003d00:	e020      	b.n	8003d44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d02:	4b60      	ldr	r3, [pc, #384]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11d      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d12:	e01a      	b.n	8003d4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d14:	4b5b      	ldr	r3, [pc, #364]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d116      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d24:	e013      	b.n	8003d4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d26:	4b57      	ldr	r3, [pc, #348]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d32:	4b54      	ldr	r3, [pc, #336]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d42:	e006      	b.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      break;
 8003d48:	e004      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e002      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	4944      	ldr	r1, [pc, #272]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d17d      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d7c:	4b41      	ldr	r3, [pc, #260]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a40      	ldr	r2, [pc, #256]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fd fa98 	bl	80012bc <HAL_GetTick>
 8003d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d8e:	e009      	b.n	8003da4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d90:	f7fd fa94 	bl	80012bc <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d902      	bls.n	8003da4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	73fb      	strb	r3, [r7, #15]
        break;
 8003da2:	e005      	b.n	8003db0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da4:	4b37      	ldr	r3, [pc, #220]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ef      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d160      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d111      	bne.n	8003de0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dbc:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6892      	ldr	r2, [r2, #8]
 8003dcc:	0211      	lsls	r1, r2, #8
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68d2      	ldr	r2, [r2, #12]
 8003dd2:	0912      	lsrs	r2, r2, #4
 8003dd4:	0452      	lsls	r2, r2, #17
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	492a      	ldr	r1, [pc, #168]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	610b      	str	r3, [r1, #16]
 8003dde:	e027      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d112      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003de6:	4b27      	ldr	r3, [pc, #156]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6892      	ldr	r2, [r2, #8]
 8003df6:	0211      	lsls	r1, r2, #8
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6912      	ldr	r2, [r2, #16]
 8003dfc:	0852      	lsrs	r2, r2, #1
 8003dfe:	3a01      	subs	r2, #1
 8003e00:	0552      	lsls	r2, r2, #21
 8003e02:	430a      	orrs	r2, r1
 8003e04:	491f      	ldr	r1, [pc, #124]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	610b      	str	r3, [r1, #16]
 8003e0a:	e011      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6892      	ldr	r2, [r2, #8]
 8003e1c:	0211      	lsls	r1, r2, #8
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6952      	ldr	r2, [r2, #20]
 8003e22:	0852      	lsrs	r2, r2, #1
 8003e24:	3a01      	subs	r2, #1
 8003e26:	0652      	lsls	r2, r2, #25
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	4916      	ldr	r1, [pc, #88]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e30:	4b14      	ldr	r3, [pc, #80]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a13      	ldr	r2, [pc, #76]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fd fa3e 	bl	80012bc <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e42:	e009      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e44:	f7fd fa3a 	bl	80012bc <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d902      	bls.n	8003e58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	73fb      	strb	r3, [r7, #15]
          break;
 8003e56:	e005      	b.n	8003e64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ef      	beq.n	8003e44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e6a:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	4904      	ldr	r1, [pc, #16]	@ (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000

08003e88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e96:	4b6a      	ldr	r3, [pc, #424]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d018      	beq.n	8003ed4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ea2:	4b67      	ldr	r3, [pc, #412]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0203 	and.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10d      	bne.n	8003ece <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003eba:	4b61      	ldr	r3, [pc, #388]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d047      	beq.n	8003f5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
 8003ed2:	e044      	b.n	8003f5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d018      	beq.n	8003f0e <RCCEx_PLLSAI2_Config+0x86>
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d825      	bhi.n	8003f2c <RCCEx_PLLSAI2_Config+0xa4>
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d002      	beq.n	8003eea <RCCEx_PLLSAI2_Config+0x62>
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d009      	beq.n	8003efc <RCCEx_PLLSAI2_Config+0x74>
 8003ee8:	e020      	b.n	8003f2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eea:	4b55      	ldr	r3, [pc, #340]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11d      	bne.n	8003f32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efa:	e01a      	b.n	8003f32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003efc:	4b50      	ldr	r3, [pc, #320]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d116      	bne.n	8003f36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0c:	e013      	b.n	8003f36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f1a:	4b49      	ldr	r3, [pc, #292]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f2a:	e006      	b.n	8003f3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f30:	e004      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10d      	bne.n	8003f5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f42:	4b3f      	ldr	r3, [pc, #252]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	430b      	orrs	r3, r1
 8003f58:	4939      	ldr	r1, [pc, #228]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d167      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f64:	4b36      	ldr	r3, [pc, #216]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a35      	ldr	r2, [pc, #212]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f70:	f7fd f9a4 	bl	80012bc <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f76:	e009      	b.n	8003f8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f78:	f7fd f9a0 	bl	80012bc <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d902      	bls.n	8003f8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	73fb      	strb	r3, [r7, #15]
        break;
 8003f8a:	e005      	b.n	8003f98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ef      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d14a      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d111      	bne.n	8003fc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fa4:	4b26      	ldr	r3, [pc, #152]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6892      	ldr	r2, [r2, #8]
 8003fb4:	0211      	lsls	r1, r2, #8
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68d2      	ldr	r2, [r2, #12]
 8003fba:	0912      	lsrs	r2, r2, #4
 8003fbc:	0452      	lsls	r2, r2, #17
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	491f      	ldr	r1, [pc, #124]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	614b      	str	r3, [r1, #20]
 8003fc6:	e011      	b.n	8003fec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003fd0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6892      	ldr	r2, [r2, #8]
 8003fd8:	0211      	lsls	r1, r2, #8
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6912      	ldr	r2, [r2, #16]
 8003fde:	0852      	lsrs	r2, r2, #1
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0652      	lsls	r2, r2, #25
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	4916      	ldr	r1, [pc, #88]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fec:	4b14      	ldr	r3, [pc, #80]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a13      	ldr	r2, [pc, #76]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fd f960 	bl	80012bc <HAL_GetTick>
 8003ffc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ffe:	e009      	b.n	8004014 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004000:	f7fd f95c 	bl	80012bc <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d902      	bls.n	8004014 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	73fb      	strb	r3, [r7, #15]
          break;
 8004012:	e005      	b.n	8004020 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004014:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0ef      	beq.n	8004000 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004026:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	4904      	ldr	r1, [pc, #16]	@ (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004030:	4313      	orrs	r3, r2
 8004032:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000

08004044 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	@ 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004060:	d10c      	bne.n	800407c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004062:	4b6e      	ldr	r3, [pc, #440]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004068:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800406c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004074:	d112      	bne.n	800409c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004076:	4b6a      	ldr	r3, [pc, #424]	@ (8004220 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	e00f      	b.n	800409c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004082:	d10b      	bne.n	800409c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004084:	4b65      	ldr	r3, [pc, #404]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800408e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004096:	d101      	bne.n	800409c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004098:	4b61      	ldr	r3, [pc, #388]	@ (8004220 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800409a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 80b4 	bne.w	800420c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040ae:	d003      	beq.n	80040b8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040b6:	d135      	bne.n	8004124 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80040b8:	4b58      	ldr	r3, [pc, #352]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040c4:	f040 80a1 	bne.w	800420a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80040c8:	4b54      	ldr	r3, [pc, #336]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 809a 	beq.w	800420a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80040d6:	4b51      	ldr	r3, [pc, #324]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	3301      	adds	r3, #1
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80040ea:	4b4c      	ldr	r3, [pc, #304]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040f4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80040fc:	4b47      	ldr	r3, [pc, #284]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004108:	2311      	movs	r3, #17
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	e001      	b.n	8004112 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800410e:	2307      	movs	r3, #7
 8004110:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	fb03 f202 	mul.w	r2, r3, r2
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004122:	e072      	b.n	800420a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d133      	bne.n	8004192 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800412a:	4b3c      	ldr	r3, [pc, #240]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004136:	d169      	bne.n	800420c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004138:	4b38      	ldr	r3, [pc, #224]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d063      	beq.n	800420c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004144:	4b35      	ldr	r3, [pc, #212]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	3301      	adds	r3, #1
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004158:	4b30      	ldr	r3, [pc, #192]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004162:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800416a:	4b2c      	ldr	r3, [pc, #176]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004176:	2311      	movs	r3, #17
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	e001      	b.n	8004180 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800417c:	2307      	movs	r3, #7
 800417e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	fb03 f202 	mul.w	r2, r3, r2
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	e03c      	b.n	800420c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004198:	d003      	beq.n	80041a2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041a0:	d134      	bne.n	800420c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80041a2:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ae:	d12d      	bne.n	800420c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80041b0:	4b1a      	ldr	r3, [pc, #104]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d027      	beq.n	800420c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80041bc:	4b17      	ldr	r3, [pc, #92]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	3301      	adds	r3, #1
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80041d0:	4b12      	ldr	r3, [pc, #72]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041da:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80041e2:	4b0e      	ldr	r3, [pc, #56]	@ (800421c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80041ee:	2311      	movs	r3, #17
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	e001      	b.n	80041f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80041f4:	2307      	movs	r3, #7
 80041f6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	fb03 f202 	mul.w	r2, r3, r2
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	e000      	b.n	800420c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800420a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800420c:	69fb      	ldr	r3, [r7, #28]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3724      	adds	r7, #36	@ 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	001fff68 	.word	0x001fff68

08004224 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d904      	bls.n	8004242 <HAL_SAI_InitProtocol+0x1e>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	3b03      	subs	r3, #3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d812      	bhi.n	8004266 <HAL_SAI_InitProtocol+0x42>
 8004240:	e008      	b.n	8004254 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fba3 	bl	8004994 <SAI_InitI2S>
 800424e:	4603      	mov	r3, r0
 8004250:	75fb      	strb	r3, [r7, #23]
      break;
 8004252:	e00b      	b.n	800426c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fc4c 	bl	8004af8 <SAI_InitPCM>
 8004260:	4603      	mov	r3, r0
 8004262:	75fb      	strb	r3, [r7, #23]
      break;
 8004264:	e002      	b.n	800426c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	75fb      	strb	r3, [r7, #23]
      break;
 800426a:	bf00      	nop
  }

  if (status == HAL_OK)
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d104      	bne.n	800427c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f808 	bl	8004288 <HAL_SAI_Init>
 8004278:	4603      	mov	r3, r0
 800427a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800427c:	7dfb      	ldrb	r3, [r7, #23]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e155      	b.n	8004546 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fc fc2e 	bl	8000b10 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fca1 	bl	8004bfc <SAI_Disable>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e140      	b.n	8004546 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d00c      	beq.n	80042ee <HAL_SAI_Init+0x66>
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d80d      	bhi.n	80042f4 <HAL_SAI_Init+0x6c>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_SAI_Init+0x5a>
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d003      	beq.n	80042e8 <HAL_SAI_Init+0x60>
 80042e0:	e008      	b.n	80042f4 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
      break;
 80042e6:	e008      	b.n	80042fa <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80042e8:	2310      	movs	r3, #16
 80042ea:	61fb      	str	r3, [r7, #28]
      break;
 80042ec:	e005      	b.n	80042fa <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80042ee:	2320      	movs	r3, #32
 80042f0:	61fb      	str	r3, [r7, #28]
      break;
 80042f2:	e002      	b.n	80042fa <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
      break;
 80042f8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d81d      	bhi.n	800433e <HAL_SAI_Init+0xb6>
 8004302:	a201      	add	r2, pc, #4	@ (adr r2, 8004308 <HAL_SAI_Init+0x80>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	08004319 	.word	0x08004319
 800430c:	0800431f 	.word	0x0800431f
 8004310:	08004327 	.word	0x08004327
 8004314:	0800432f 	.word	0x0800432f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
      break;
 800431c:	e012      	b.n	8004344 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800431e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004322:	617b      	str	r3, [r7, #20]
      break;
 8004324:	e00e      	b.n	8004344 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004326:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800432a:	617b      	str	r3, [r7, #20]
      break;
 800432c:	e00a      	b.n	8004344 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800432e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004332:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	61fb      	str	r3, [r7, #28]
      break;
 800433c:	e002      	b.n	8004344 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
      break;
 8004342:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a81      	ldr	r2, [pc, #516]	@ (8004550 <HAL_SAI_Init+0x2c8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_SAI_Init+0xd0>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a80      	ldr	r2, [pc, #512]	@ (8004554 <HAL_SAI_Init+0x2cc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d103      	bne.n	8004360 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004358:	4a7f      	ldr	r2, [pc, #508]	@ (8004558 <HAL_SAI_Init+0x2d0>)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e002      	b.n	8004366 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004360:	4a7e      	ldr	r2, [pc, #504]	@ (800455c <HAL_SAI_Init+0x2d4>)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d041      	beq.n	80043f2 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a77      	ldr	r2, [pc, #476]	@ (8004550 <HAL_SAI_Init+0x2c8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_SAI_Init+0xfa>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a75      	ldr	r2, [pc, #468]	@ (8004554 <HAL_SAI_Init+0x2cc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d105      	bne.n	800438e <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004382:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004386:	f7fe ff1d 	bl	80031c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800438a:	6138      	str	r0, [r7, #16]
 800438c:	e004      	b.n	8004398 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800438e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004392:	f7fe ff17 	bl	80031c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004396:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	461a      	mov	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	025b      	lsls	r3, r3, #9
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a6b      	ldr	r2, [pc, #428]	@ (8004560 <HAL_SAI_Init+0x2d8>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	08da      	lsrs	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80043be:	68f9      	ldr	r1, [r7, #12]
 80043c0:	4b67      	ldr	r3, [pc, #412]	@ (8004560 <HAL_SAI_Init+0x2d8>)
 80043c2:	fba3 2301 	umull	r2, r3, r3, r1
 80043c6:	08da      	lsrs	r2, r3, #3
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	1aca      	subs	r2, r1, r3
 80043d2:	2a08      	cmp	r2, #8
 80043d4:	d904      	bls.n	80043e0 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d104      	bne.n	80043f2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	085a      	lsrs	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_SAI_Init+0x17a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d109      	bne.n	8004416 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_SAI_Init+0x186>
 800440a:	2300      	movs	r3, #0
 800440c:	e001      	b.n	8004412 <HAL_SAI_Init+0x18a>
 800440e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	e008      	b.n	8004428 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d102      	bne.n	8004424 <HAL_SAI_Init+0x19c>
 800441e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004422:	e000      	b.n	8004426 <HAL_SAI_Init+0x19e>
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b4c      	ldr	r3, [pc, #304]	@ (8004564 <HAL_SAI_Init+0x2dc>)
 8004434:	400b      	ands	r3, r1
 8004436:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6819      	ldr	r1, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800444c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004452:	431a      	orrs	r2, r3
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004460:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800446c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	051b      	lsls	r3, r3, #20
 8004474:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800448c:	f023 030f 	bic.w	r3, r3, #15
 8004490:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6899      	ldr	r1, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004568 <HAL_SAI_Init+0x2e0>)
 80044bc:	400b      	ands	r3, r1
 80044be:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80044d0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80044d6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80044dc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e2:	3b01      	subs	r3, #1
 80044e4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80044e6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68d9      	ldr	r1, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80044fe:	400b      	ands	r3, r1
 8004500:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68d9      	ldr	r1, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004510:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004516:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004518:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451e:	3b01      	subs	r3, #1
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40015404 	.word	0x40015404
 8004554:	40015424 	.word	0x40015424
 8004558:	40015400 	.word	0x40015400
 800455c:	40015800 	.word	0x40015800
 8004560:	cccccccd 	.word	0xcccccccd
 8004564:	ff05c010 	.word	0xff05c010
 8004568:	fff88000 	.word	0xfff88000

0800456c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_SAI_Abort+0x1a>
 8004582:	2302      	movs	r3, #2
 8004584:	e053      	b.n	800462e <HAL_SAI_Abort+0xc2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fb34 	bl	8004bfc <SAI_Disable>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045ac:	d125      	bne.n	80045fa <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80045bc:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b12      	cmp	r3, #18
 80045c8:	d108      	bne.n	80045dc <HAL_SAI_Abort+0x70>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fd f86a 	bl	80016b0 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b22      	cmp	r3, #34	@ 0x22
 80045e6:	d108      	bne.n	80045fa <HAL_SAI_Abort+0x8e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd f85b 	bl	80016b0 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2200      	movs	r2, #0
 8004600:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f04f 32ff 	mov.w	r2, #4294967295
 800460a:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0208 	orr.w	r2, r2, #8
 800461a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8192 	beq.w	8004972 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_SAI_IRQHandler+0x4c>
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
 8004682:	e176      	b.n	8004972 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01e      	beq.n	80046cc <HAL_SAI_IRQHandler+0x94>
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d019      	beq.n	80046cc <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2201      	movs	r2, #1
 800469e:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b22      	cmp	r3, #34	@ 0x22
 80046aa:	d101      	bne.n	80046b0 <HAL_SAI_IRQHandler+0x78>
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <HAL_SAI_IRQHandler+0x7a>
 80046b0:	2302      	movs	r3, #2
 80046b2:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f95b 	bl	8004980 <HAL_SAI_ErrorCallback>
 80046ca:	e152      	b.n	8004972 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d011      	beq.n	80046fa <HAL_SAI_IRQHandler+0xc2>
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00c      	beq.n	80046fa <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2202      	movs	r2, #2
 80046e6:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8140 	beq.w	8004972 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f6:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80046f8:	e13b      	b.n	8004972 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d055      	beq.n	80047b0 <HAL_SAI_IRQHandler+0x178>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d050      	beq.n	80047b0 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2220      	movs	r2, #32
 8004714:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471c:	f043 0204 	orr.w	r2, r3, #4
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d038      	beq.n	80047a2 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d016      	beq.n	8004766 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800473c:	4a8f      	ldr	r2, [pc, #572]	@ (800497c <HAL_SAI_IRQHandler+0x344>)
 800473e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004744:	4618      	mov	r0, r3
 8004746:	f7fc fff1 	bl	800172c <HAL_DMA_Abort_IT>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004756:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f90d 	bl	8004980 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 80fc 	beq.w	8004968 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004774:	4a81      	ldr	r2, [pc, #516]	@ (800497c <HAL_SAI_IRQHandler+0x344>)
 8004776:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	4618      	mov	r0, r3
 800477e:	f7fc ffd5 	bl	800172c <HAL_DMA_Abort_IT>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80ef 	beq.w	8004968 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004790:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f8f0 	bl	8004980 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80047a0:	e0e2      	b.n	8004968 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fee2 	bl	800456c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f8e9 	bl	8004980 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80047ae:	e0db      	b.n	8004968 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d055      	beq.n	8004866 <HAL_SAI_IRQHandler+0x22e>
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d050      	beq.n	8004866 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2240      	movs	r2, #64	@ 0x40
 80047ca:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047d2:	f043 0208 	orr.w	r2, r3, #8
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d038      	beq.n	8004858 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f2:	4a62      	ldr	r2, [pc, #392]	@ (800497c <HAL_SAI_IRQHandler+0x344>)
 80047f4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc ff96 	bl	800172c <HAL_DMA_Abort_IT>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800480c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f8b2 	bl	8004980 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80a3 	beq.w	800496c <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482a:	4a54      	ldr	r2, [pc, #336]	@ (800497c <HAL_SAI_IRQHandler+0x344>)
 800482c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	4618      	mov	r0, r3
 8004834:	f7fc ff7a 	bl	800172c <HAL_DMA_Abort_IT>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8096 	beq.w	800496c <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004846:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f895 	bl	8004980 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004856:	e089      	b.n	800496c <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff fe87 	bl	800456c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f88e 	bl	8004980 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004864:	e082      	b.n	800496c <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d061      	beq.n	8004934 <HAL_SAI_IRQHandler+0x2fc>
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d05c      	beq.n	8004934 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2204      	movs	r2, #4
 8004880:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d036      	beq.n	800490a <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d016      	beq.n	80048d2 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a8:	4a34      	ldr	r2, [pc, #208]	@ (800497c <HAL_SAI_IRQHandler+0x344>)
 80048aa:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fc ff3b 	bl	800172c <HAL_DMA_Abort_IT>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f857 	bl	8004980 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d04a      	beq.n	8004970 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	4a27      	ldr	r2, [pc, #156]	@ (800497c <HAL_SAI_IRQHandler+0x344>)
 80048e0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc ff20 	bl	800172c <HAL_DMA_Abort_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d03e      	beq.n	8004970 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f83c 	bl	8004980 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004908:	e032      	b.n	8004970 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2200      	movs	r2, #0
 8004910:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f04f 32ff 	mov.w	r2, #4294967295
 800491a:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f827 	bl	8004980 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004932:	e01d      	b.n	8004970 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	d019      	beq.n	8004972 <HAL_SAI_IRQHandler+0x33a>
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	d014      	beq.n	8004972 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2210      	movs	r2, #16
 800494e:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f80d 	bl	8004980 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8004966:	e004      	b.n	8004972 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004968:	bf00      	nop
 800496a:	e002      	b.n	8004972 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800496c:	bf00      	nop
 800496e:	e000      	b.n	8004972 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004970:	bf00      	nop
}
 8004972:	bf00      	nop
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	08004c71 	.word	0x08004c71

08004980 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <SAI_InitI2S+0x2e>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d103      	bne.n	80049ca <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049c8:	e002      	b.n	80049d0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80049d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049de:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e077      	b.n	8004aea <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d107      	bne.n	8004a10 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004a0c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a0e:	e006      	b.n	8004a1e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a16:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d84f      	bhi.n	8004ac4 <SAI_InitI2S+0x130>
 8004a24:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <SAI_InitI2S+0x98>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a3d 	.word	0x08004a3d
 8004a30:	08004a5f 	.word	0x08004a5f
 8004a34:	08004a81 	.word	0x08004a81
 8004a38:	08004aa3 	.word	0x08004aa3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2280      	movs	r2, #128	@ 0x80
 8004a40:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	011a      	lsls	r2, r3, #4
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2240      	movs	r2, #64	@ 0x40
 8004a5a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004a5c:	e035      	b.n	8004aca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2280      	movs	r2, #128	@ 0x80
 8004a62:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	019a      	lsls	r2, r3, #6
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2280      	movs	r2, #128	@ 0x80
 8004a7c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004a7e:	e024      	b.n	8004aca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	22c0      	movs	r2, #192	@ 0xc0
 8004a84:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	019a      	lsls	r2, r3, #6
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2280      	movs	r2, #128	@ 0x80
 8004a9e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004aa0:	e013      	b.n	8004aca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	22e0      	movs	r2, #224	@ 0xe0
 8004aa6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	019a      	lsls	r2, r3, #6
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2280      	movs	r2, #128	@ 0x80
 8004ac0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004ac2:	e002      	b.n	8004aca <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d10b      	bne.n	8004ae8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d102      	bne.n	8004adc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d102      	bne.n	8004ae8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8004ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop

08004af8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <SAI_InitPCM+0x2e>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d103      	bne.n	8004b2e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b2c:	e002      	b.n	8004b34 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004b40:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004b48:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b5c:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d103      	bne.n	8004b6c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b6a:	e002      	b.n	8004b72 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	220d      	movs	r2, #13
 8004b70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d837      	bhi.n	8004be8 <SAI_InitPCM+0xf0>
 8004b78:	a201      	add	r2, pc, #4	@ (adr r2, 8004b80 <SAI_InitPCM+0x88>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004ba7 	.word	0x08004ba7
 8004b88:	08004bbd 	.word	0x08004bbd
 8004b8c:	08004bd3 	.word	0x08004bd3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2280      	movs	r2, #128	@ 0x80
 8004b94:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	011a      	lsls	r2, r3, #4
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2240      	movs	r2, #64	@ 0x40
 8004ba2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004ba4:	e023      	b.n	8004bee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2280      	movs	r2, #128	@ 0x80
 8004baa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2280      	movs	r2, #128	@ 0x80
 8004bb8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004bba:	e018      	b.n	8004bee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	22c0      	movs	r2, #192	@ 0xc0
 8004bc0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2280      	movs	r2, #128	@ 0x80
 8004bce:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004bd0:	e00d      	b.n	8004bee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	22e0      	movs	r2, #224	@ 0xe0
 8004bd6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2280      	movs	r2, #128	@ 0x80
 8004be4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004be6:	e002      	b.n	8004bee <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	75fb      	strb	r3, [r7, #23]
      break;
 8004bec:	bf00      	nop
  }

  return status;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c04:	4b18      	ldr	r3, [pc, #96]	@ (8004c68 <SAI_Disable+0x6c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <SAI_Disable+0x70>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	0b1b      	lsrs	r3, r3, #12
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004c26:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	72fb      	strb	r3, [r7, #11]
      break;
 8004c42:	e009      	b.n	8004c58 <SAI_Disable+0x5c>
    }
    count--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e7      	bne.n	8004c28 <SAI_Disable+0x2c>

  return status;
 8004c58:	7afb      	ldrb	r3, [r7, #11]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	95cbec1b 	.word	0x95cbec1b

08004c70 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004c8c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9e:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d00a      	beq.n	8004cc0 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff ffa6 	bl	8004bfc <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0208 	orr.w	r2, r2, #8
 8004cbe:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff fe55 	bl	8004980 <HAL_SAI_ErrorCallback>
#endif
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e095      	b.n	8004e1c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d108      	bne.n	8004d0a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d00:	d009      	beq.n	8004d16 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	61da      	str	r2, [r3, #28]
 8004d08:	e005      	b.n	8004d16 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7fc f80f 	bl	8000d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d4c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d56:	d902      	bls.n	8004d5e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e002      	b.n	8004d64 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d6c:	d007      	beq.n	8004d7e <HAL_SPI_Init+0xa0>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d76:	d002      	beq.n	8004d7e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc0:	ea42 0103 	orr.w	r1, r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	f003 0204 	and.w	r2, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004dfa:	ea42 0103 	orr.w	r1, r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e34:	f7fc fa42 	bl	80012bc <HAL_GetTick>
 8004e38:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d001      	beq.n	8004e4e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e15c      	b.n	8005108 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_SPI_Transmit+0x36>
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e154      	b.n	8005108 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_SPI_Transmit+0x48>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e14d      	b.n	8005108 <HAL_SPI_Transmit+0x2e4>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2203      	movs	r2, #3
 8004e78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	88fa      	ldrh	r2, [r7, #6]
 8004e92:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ebe:	d10f      	bne.n	8004ee0 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ece:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ede:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eea:	2b40      	cmp	r3, #64	@ 0x40
 8004eec:	d007      	beq.n	8004efe <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004efc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f06:	d952      	bls.n	8004fae <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_SPI_Transmit+0xf2>
 8004f10:	8b7b      	ldrh	r3, [r7, #26]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d145      	bne.n	8004fa2 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	881a      	ldrh	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	1c9a      	adds	r2, r3, #2
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f3a:	e032      	b.n	8004fa2 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d112      	bne.n	8004f70 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4e:	881a      	ldrh	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5a:	1c9a      	adds	r2, r3, #2
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f6e:	e018      	b.n	8004fa2 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f70:	f7fc f9a4 	bl	80012bc <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d803      	bhi.n	8004f88 <HAL_SPI_Transmit+0x164>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d102      	bne.n	8004f8e <HAL_SPI_Transmit+0x16a>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0b2      	b.n	8005108 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1c7      	bne.n	8004f3c <HAL_SPI_Transmit+0x118>
 8004fac:	e083      	b.n	80050b6 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_SPI_Transmit+0x198>
 8004fb6:	8b7b      	ldrh	r3, [r7, #26]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d177      	bne.n	80050ac <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d912      	bls.n	8004fec <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	881a      	ldrh	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd6:	1c9a      	adds	r2, r3, #2
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b02      	subs	r3, #2
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fea:	e05f      	b.n	80050ac <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	7812      	ldrb	r2, [r2, #0]
 8004ff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005012:	e04b      	b.n	80050ac <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b02      	cmp	r3, #2
 8005020:	d12b      	bne.n	800507a <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d912      	bls.n	8005052 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	881a      	ldrh	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	1c9a      	adds	r2, r3, #2
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b02      	subs	r3, #2
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005050:	e02c      	b.n	80050ac <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	7812      	ldrb	r2, [r2, #0]
 800505e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005078:	e018      	b.n	80050ac <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800507a:	f7fc f91f 	bl	80012bc <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d803      	bhi.n	8005092 <HAL_SPI_Transmit+0x26e>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d102      	bne.n	8005098 <HAL_SPI_Transmit+0x274>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e02d      	b.n	8005108 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1ae      	bne.n	8005014 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f946 	bl	800534c <SPI_EndRxTxTransaction>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005106:	2300      	movs	r3, #0
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005120:	f7fc f8cc 	bl	80012bc <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	4413      	add	r3, r2
 800512e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005130:	f7fc f8c4 	bl	80012bc <HAL_GetTick>
 8005134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005136:	4b39      	ldr	r3, [pc, #228]	@ (800521c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	015b      	lsls	r3, r3, #5
 800513c:	0d1b      	lsrs	r3, r3, #20
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	fb02 f303 	mul.w	r3, r2, r3
 8005144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005146:	e054      	b.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d050      	beq.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005150:	f7fc f8b4 	bl	80012bc <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	429a      	cmp	r2, r3
 800515e:	d902      	bls.n	8005166 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d13d      	bne.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800517e:	d111      	bne.n	80051a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005188:	d004      	beq.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005192:	d107      	bne.n	80051a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ac:	d10f      	bne.n	80051ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e017      	b.n	8005212 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	bf0c      	ite	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	2300      	movne	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	429a      	cmp	r2, r3
 800520e:	d19b      	bne.n	8005148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000000 	.word	0x20000000

08005220 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08a      	sub	sp, #40	@ 0x28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005232:	f7fc f843 	bl	80012bc <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	4413      	add	r3, r2
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005242:	f7fc f83b 	bl	80012bc <HAL_GetTick>
 8005246:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005250:	4b3d      	ldr	r3, [pc, #244]	@ (8005348 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	00da      	lsls	r2, r3, #3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	0d1b      	lsrs	r3, r3, #20
 8005260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005262:	fb02 f303 	mul.w	r3, r2, r3
 8005266:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005268:	e060      	b.n	800532c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005270:	d107      	bne.n	8005282 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005280:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d050      	beq.n	800532c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800528a:	f7fc f817 	bl	80012bc <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005296:	429a      	cmp	r2, r3
 8005298:	d902      	bls.n	80052a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d13d      	bne.n	800531c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052b8:	d111      	bne.n	80052de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c2:	d004      	beq.n	80052ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052cc:	d107      	bne.n	80052de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e6:	d10f      	bne.n	8005308 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005306:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e010      	b.n	800533e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	3b01      	subs	r3, #1
 800532a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4013      	ands	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d196      	bne.n	800526a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3728      	adds	r7, #40	@ 0x28
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000000 	.word	0x20000000

0800534c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff ff5b 	bl	8005220 <SPI_WaitFifoStateUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e027      	b.n	80053d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2200      	movs	r2, #0
 8005388:	2180      	movs	r1, #128	@ 0x80
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff fec0 	bl	8005110 <SPI_WaitFlagStateUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e014      	b.n	80053d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff ff34 	bl	8005220 <SPI_WaitFifoStateUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c2:	f043 0220 	orr.w	r2, r3, #32
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e000      	b.n	80053d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e040      	b.n	800546c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fb fe68 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	@ 0x24
 8005404:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fb6a 	bl	8005af8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f8af 	bl	8005588 <UART_SetConfig>
 800542a:	4603      	mov	r3, r0
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e01b      	b.n	800546c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fbe9 	bl	8005c3c <UART_CheckIdleState>
 800546a:	4603      	mov	r3, r0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	@ 0x28
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005488:	2b20      	cmp	r3, #32
 800548a:	d177      	bne.n	800557c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_UART_Transmit+0x24>
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e070      	b.n	800557e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2221      	movs	r2, #33	@ 0x21
 80054a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054aa:	f7fb ff07 	bl	80012bc <HAL_GetTick>
 80054ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c8:	d108      	bne.n	80054dc <HAL_UART_Transmit+0x68>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d104      	bne.n	80054dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	e003      	b.n	80054e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054e4:	e02f      	b.n	8005546 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	2180      	movs	r1, #128	@ 0x80
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fc4b 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e03b      	b.n	800557e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10b      	bne.n	8005524 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	881a      	ldrh	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005518:	b292      	uxth	r2, r2
 800551a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	3302      	adds	r3, #2
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e007      	b.n	8005534 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3301      	adds	r3, #1
 8005532:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1c9      	bne.n	80054e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2200      	movs	r2, #0
 800555a:	2140      	movs	r1, #64	@ 0x40
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fc15 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e005      	b.n	800557e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e000      	b.n	800557e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800557c:	2302      	movs	r3, #2
  }
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800558c:	b08a      	sub	sp, #40	@ 0x28
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4ba4      	ldr	r3, [pc, #656]	@ (8005848 <UART_SetConfig+0x2c0>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a99      	ldr	r2, [pc, #612]	@ (800584c <UART_SetConfig+0x2c4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f0:	4313      	orrs	r3, r2
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005604:	430a      	orrs	r2, r1
 8005606:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a90      	ldr	r2, [pc, #576]	@ (8005850 <UART_SetConfig+0x2c8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d126      	bne.n	8005660 <UART_SetConfig+0xd8>
 8005612:	4b90      	ldr	r3, [pc, #576]	@ (8005854 <UART_SetConfig+0x2cc>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	2b03      	cmp	r3, #3
 800561e:	d81b      	bhi.n	8005658 <UART_SetConfig+0xd0>
 8005620:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <UART_SetConfig+0xa0>)
 8005622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005626:	bf00      	nop
 8005628:	08005639 	.word	0x08005639
 800562c:	08005649 	.word	0x08005649
 8005630:	08005641 	.word	0x08005641
 8005634:	08005651 	.word	0x08005651
 8005638:	2301      	movs	r3, #1
 800563a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800563e:	e116      	b.n	800586e <UART_SetConfig+0x2e6>
 8005640:	2302      	movs	r3, #2
 8005642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005646:	e112      	b.n	800586e <UART_SetConfig+0x2e6>
 8005648:	2304      	movs	r3, #4
 800564a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800564e:	e10e      	b.n	800586e <UART_SetConfig+0x2e6>
 8005650:	2308      	movs	r3, #8
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005656:	e10a      	b.n	800586e <UART_SetConfig+0x2e6>
 8005658:	2310      	movs	r3, #16
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800565e:	e106      	b.n	800586e <UART_SetConfig+0x2e6>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a7c      	ldr	r2, [pc, #496]	@ (8005858 <UART_SetConfig+0x2d0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d138      	bne.n	80056dc <UART_SetConfig+0x154>
 800566a:	4b7a      	ldr	r3, [pc, #488]	@ (8005854 <UART_SetConfig+0x2cc>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005670:	f003 030c 	and.w	r3, r3, #12
 8005674:	2b0c      	cmp	r3, #12
 8005676:	d82d      	bhi.n	80056d4 <UART_SetConfig+0x14c>
 8005678:	a201      	add	r2, pc, #4	@ (adr r2, 8005680 <UART_SetConfig+0xf8>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	080056b5 	.word	0x080056b5
 8005684:	080056d5 	.word	0x080056d5
 8005688:	080056d5 	.word	0x080056d5
 800568c:	080056d5 	.word	0x080056d5
 8005690:	080056c5 	.word	0x080056c5
 8005694:	080056d5 	.word	0x080056d5
 8005698:	080056d5 	.word	0x080056d5
 800569c:	080056d5 	.word	0x080056d5
 80056a0:	080056bd 	.word	0x080056bd
 80056a4:	080056d5 	.word	0x080056d5
 80056a8:	080056d5 	.word	0x080056d5
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056cd 	.word	0x080056cd
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ba:	e0d8      	b.n	800586e <UART_SetConfig+0x2e6>
 80056bc:	2302      	movs	r3, #2
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056c2:	e0d4      	b.n	800586e <UART_SetConfig+0x2e6>
 80056c4:	2304      	movs	r3, #4
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ca:	e0d0      	b.n	800586e <UART_SetConfig+0x2e6>
 80056cc:	2308      	movs	r3, #8
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d2:	e0cc      	b.n	800586e <UART_SetConfig+0x2e6>
 80056d4:	2310      	movs	r3, #16
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056da:	e0c8      	b.n	800586e <UART_SetConfig+0x2e6>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a5e      	ldr	r2, [pc, #376]	@ (800585c <UART_SetConfig+0x2d4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d125      	bne.n	8005732 <UART_SetConfig+0x1aa>
 80056e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005854 <UART_SetConfig+0x2cc>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80056f0:	2b30      	cmp	r3, #48	@ 0x30
 80056f2:	d016      	beq.n	8005722 <UART_SetConfig+0x19a>
 80056f4:	2b30      	cmp	r3, #48	@ 0x30
 80056f6:	d818      	bhi.n	800572a <UART_SetConfig+0x1a2>
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d00a      	beq.n	8005712 <UART_SetConfig+0x18a>
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d814      	bhi.n	800572a <UART_SetConfig+0x1a2>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <UART_SetConfig+0x182>
 8005704:	2b10      	cmp	r3, #16
 8005706:	d008      	beq.n	800571a <UART_SetConfig+0x192>
 8005708:	e00f      	b.n	800572a <UART_SetConfig+0x1a2>
 800570a:	2300      	movs	r3, #0
 800570c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005710:	e0ad      	b.n	800586e <UART_SetConfig+0x2e6>
 8005712:	2302      	movs	r3, #2
 8005714:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005718:	e0a9      	b.n	800586e <UART_SetConfig+0x2e6>
 800571a:	2304      	movs	r3, #4
 800571c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005720:	e0a5      	b.n	800586e <UART_SetConfig+0x2e6>
 8005722:	2308      	movs	r3, #8
 8005724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005728:	e0a1      	b.n	800586e <UART_SetConfig+0x2e6>
 800572a:	2310      	movs	r3, #16
 800572c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005730:	e09d      	b.n	800586e <UART_SetConfig+0x2e6>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a4a      	ldr	r2, [pc, #296]	@ (8005860 <UART_SetConfig+0x2d8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d125      	bne.n	8005788 <UART_SetConfig+0x200>
 800573c:	4b45      	ldr	r3, [pc, #276]	@ (8005854 <UART_SetConfig+0x2cc>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005742:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005746:	2bc0      	cmp	r3, #192	@ 0xc0
 8005748:	d016      	beq.n	8005778 <UART_SetConfig+0x1f0>
 800574a:	2bc0      	cmp	r3, #192	@ 0xc0
 800574c:	d818      	bhi.n	8005780 <UART_SetConfig+0x1f8>
 800574e:	2b80      	cmp	r3, #128	@ 0x80
 8005750:	d00a      	beq.n	8005768 <UART_SetConfig+0x1e0>
 8005752:	2b80      	cmp	r3, #128	@ 0x80
 8005754:	d814      	bhi.n	8005780 <UART_SetConfig+0x1f8>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <UART_SetConfig+0x1d8>
 800575a:	2b40      	cmp	r3, #64	@ 0x40
 800575c:	d008      	beq.n	8005770 <UART_SetConfig+0x1e8>
 800575e:	e00f      	b.n	8005780 <UART_SetConfig+0x1f8>
 8005760:	2300      	movs	r3, #0
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005766:	e082      	b.n	800586e <UART_SetConfig+0x2e6>
 8005768:	2302      	movs	r3, #2
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800576e:	e07e      	b.n	800586e <UART_SetConfig+0x2e6>
 8005770:	2304      	movs	r3, #4
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005776:	e07a      	b.n	800586e <UART_SetConfig+0x2e6>
 8005778:	2308      	movs	r3, #8
 800577a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800577e:	e076      	b.n	800586e <UART_SetConfig+0x2e6>
 8005780:	2310      	movs	r3, #16
 8005782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005786:	e072      	b.n	800586e <UART_SetConfig+0x2e6>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a35      	ldr	r2, [pc, #212]	@ (8005864 <UART_SetConfig+0x2dc>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d12a      	bne.n	80057e8 <UART_SetConfig+0x260>
 8005792:	4b30      	ldr	r3, [pc, #192]	@ (8005854 <UART_SetConfig+0x2cc>)
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057a0:	d01a      	beq.n	80057d8 <UART_SetConfig+0x250>
 80057a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057a6:	d81b      	bhi.n	80057e0 <UART_SetConfig+0x258>
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ac:	d00c      	beq.n	80057c8 <UART_SetConfig+0x240>
 80057ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057b2:	d815      	bhi.n	80057e0 <UART_SetConfig+0x258>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <UART_SetConfig+0x238>
 80057b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057bc:	d008      	beq.n	80057d0 <UART_SetConfig+0x248>
 80057be:	e00f      	b.n	80057e0 <UART_SetConfig+0x258>
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c6:	e052      	b.n	800586e <UART_SetConfig+0x2e6>
 80057c8:	2302      	movs	r3, #2
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ce:	e04e      	b.n	800586e <UART_SetConfig+0x2e6>
 80057d0:	2304      	movs	r3, #4
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057d6:	e04a      	b.n	800586e <UART_SetConfig+0x2e6>
 80057d8:	2308      	movs	r3, #8
 80057da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057de:	e046      	b.n	800586e <UART_SetConfig+0x2e6>
 80057e0:	2310      	movs	r3, #16
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057e6:	e042      	b.n	800586e <UART_SetConfig+0x2e6>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a17      	ldr	r2, [pc, #92]	@ (800584c <UART_SetConfig+0x2c4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d13a      	bne.n	8005868 <UART_SetConfig+0x2e0>
 80057f2:	4b18      	ldr	r3, [pc, #96]	@ (8005854 <UART_SetConfig+0x2cc>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80057fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005800:	d01a      	beq.n	8005838 <UART_SetConfig+0x2b0>
 8005802:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005806:	d81b      	bhi.n	8005840 <UART_SetConfig+0x2b8>
 8005808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800580c:	d00c      	beq.n	8005828 <UART_SetConfig+0x2a0>
 800580e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005812:	d815      	bhi.n	8005840 <UART_SetConfig+0x2b8>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <UART_SetConfig+0x298>
 8005818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800581c:	d008      	beq.n	8005830 <UART_SetConfig+0x2a8>
 800581e:	e00f      	b.n	8005840 <UART_SetConfig+0x2b8>
 8005820:	2300      	movs	r3, #0
 8005822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005826:	e022      	b.n	800586e <UART_SetConfig+0x2e6>
 8005828:	2302      	movs	r3, #2
 800582a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800582e:	e01e      	b.n	800586e <UART_SetConfig+0x2e6>
 8005830:	2304      	movs	r3, #4
 8005832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005836:	e01a      	b.n	800586e <UART_SetConfig+0x2e6>
 8005838:	2308      	movs	r3, #8
 800583a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800583e:	e016      	b.n	800586e <UART_SetConfig+0x2e6>
 8005840:	2310      	movs	r3, #16
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005846:	e012      	b.n	800586e <UART_SetConfig+0x2e6>
 8005848:	efff69f3 	.word	0xefff69f3
 800584c:	40008000 	.word	0x40008000
 8005850:	40013800 	.word	0x40013800
 8005854:	40021000 	.word	0x40021000
 8005858:	40004400 	.word	0x40004400
 800585c:	40004800 	.word	0x40004800
 8005860:	40004c00 	.word	0x40004c00
 8005864:	40005000 	.word	0x40005000
 8005868:	2310      	movs	r3, #16
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a9f      	ldr	r2, [pc, #636]	@ (8005af0 <UART_SetConfig+0x568>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d17a      	bne.n	800596e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005878:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800587c:	2b08      	cmp	r3, #8
 800587e:	d824      	bhi.n	80058ca <UART_SetConfig+0x342>
 8005880:	a201      	add	r2, pc, #4	@ (adr r2, 8005888 <UART_SetConfig+0x300>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058ad 	.word	0x080058ad
 800588c:	080058cb 	.word	0x080058cb
 8005890:	080058b5 	.word	0x080058b5
 8005894:	080058cb 	.word	0x080058cb
 8005898:	080058bb 	.word	0x080058bb
 800589c:	080058cb 	.word	0x080058cb
 80058a0:	080058cb 	.word	0x080058cb
 80058a4:	080058cb 	.word	0x080058cb
 80058a8:	080058c3 	.word	0x080058c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ac:	f7fd f914 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 80058b0:	61f8      	str	r0, [r7, #28]
        break;
 80058b2:	e010      	b.n	80058d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b4:	4b8f      	ldr	r3, [pc, #572]	@ (8005af4 <UART_SetConfig+0x56c>)
 80058b6:	61fb      	str	r3, [r7, #28]
        break;
 80058b8:	e00d      	b.n	80058d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ba:	f7fd f875 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 80058be:	61f8      	str	r0, [r7, #28]
        break;
 80058c0:	e009      	b.n	80058d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058c6:	61fb      	str	r3, [r7, #28]
        break;
 80058c8:	e005      	b.n	80058d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80fb 	beq.w	8005ad4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d305      	bcc.n	80058fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d903      	bls.n	8005902 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005900:	e0e8      	b.n	8005ad4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	2200      	movs	r2, #0
 8005906:	461c      	mov	r4, r3
 8005908:	4615      	mov	r5, r2
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	022b      	lsls	r3, r5, #8
 8005914:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005918:	0222      	lsls	r2, r4, #8
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	6849      	ldr	r1, [r1, #4]
 800591e:	0849      	lsrs	r1, r1, #1
 8005920:	2000      	movs	r0, #0
 8005922:	4688      	mov	r8, r1
 8005924:	4681      	mov	r9, r0
 8005926:	eb12 0a08 	adds.w	sl, r2, r8
 800592a:	eb43 0b09 	adc.w	fp, r3, r9
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593c:	4650      	mov	r0, sl
 800593e:	4659      	mov	r1, fp
 8005940:	f7fa fc42 	bl	80001c8 <__aeabi_uldivmod>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4613      	mov	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005952:	d308      	bcc.n	8005966 <UART_SetConfig+0x3de>
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800595a:	d204      	bcs.n	8005966 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	e0b6      	b.n	8005ad4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800596c:	e0b2      	b.n	8005ad4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005976:	d15e      	bne.n	8005a36 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005978:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800597c:	2b08      	cmp	r3, #8
 800597e:	d828      	bhi.n	80059d2 <UART_SetConfig+0x44a>
 8005980:	a201      	add	r2, pc, #4	@ (adr r2, 8005988 <UART_SetConfig+0x400>)
 8005982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005986:	bf00      	nop
 8005988:	080059ad 	.word	0x080059ad
 800598c:	080059b5 	.word	0x080059b5
 8005990:	080059bd 	.word	0x080059bd
 8005994:	080059d3 	.word	0x080059d3
 8005998:	080059c3 	.word	0x080059c3
 800599c:	080059d3 	.word	0x080059d3
 80059a0:	080059d3 	.word	0x080059d3
 80059a4:	080059d3 	.word	0x080059d3
 80059a8:	080059cb 	.word	0x080059cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ac:	f7fd f894 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 80059b0:	61f8      	str	r0, [r7, #28]
        break;
 80059b2:	e014      	b.n	80059de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b4:	f7fd f8a6 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 80059b8:	61f8      	str	r0, [r7, #28]
        break;
 80059ba:	e010      	b.n	80059de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059bc:	4b4d      	ldr	r3, [pc, #308]	@ (8005af4 <UART_SetConfig+0x56c>)
 80059be:	61fb      	str	r3, [r7, #28]
        break;
 80059c0:	e00d      	b.n	80059de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059c2:	f7fc fff1 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 80059c6:	61f8      	str	r0, [r7, #28]
        break;
 80059c8:	e009      	b.n	80059de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ce:	61fb      	str	r3, [r7, #28]
        break;
 80059d0:	e005      	b.n	80059de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d077      	beq.n	8005ad4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	005a      	lsls	r2, r3, #1
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	085b      	lsrs	r3, r3, #1
 80059ee:	441a      	add	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b0f      	cmp	r3, #15
 80059fe:	d916      	bls.n	8005a2e <UART_SetConfig+0x4a6>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a06:	d212      	bcs.n	8005a2e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f023 030f 	bic.w	r3, r3, #15
 8005a10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	8afb      	ldrh	r3, [r7, #22]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	8afa      	ldrh	r2, [r7, #22]
 8005a2a:	60da      	str	r2, [r3, #12]
 8005a2c:	e052      	b.n	8005ad4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a34:	e04e      	b.n	8005ad4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d827      	bhi.n	8005a8e <UART_SetConfig+0x506>
 8005a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <UART_SetConfig+0x4bc>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a69 	.word	0x08005a69
 8005a48:	08005a71 	.word	0x08005a71
 8005a4c:	08005a79 	.word	0x08005a79
 8005a50:	08005a8f 	.word	0x08005a8f
 8005a54:	08005a7f 	.word	0x08005a7f
 8005a58:	08005a8f 	.word	0x08005a8f
 8005a5c:	08005a8f 	.word	0x08005a8f
 8005a60:	08005a8f 	.word	0x08005a8f
 8005a64:	08005a87 	.word	0x08005a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a68:	f7fd f836 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8005a6c:	61f8      	str	r0, [r7, #28]
        break;
 8005a6e:	e014      	b.n	8005a9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a70:	f7fd f848 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 8005a74:	61f8      	str	r0, [r7, #28]
        break;
 8005a76:	e010      	b.n	8005a9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a78:	4b1e      	ldr	r3, [pc, #120]	@ (8005af4 <UART_SetConfig+0x56c>)
 8005a7a:	61fb      	str	r3, [r7, #28]
        break;
 8005a7c:	e00d      	b.n	8005a9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a7e:	f7fc ff93 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8005a82:	61f8      	str	r0, [r7, #28]
        break;
 8005a84:	e009      	b.n	8005a9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a8a:	61fb      	str	r3, [r7, #28]
        break;
 8005a8c:	e005      	b.n	8005a9a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a98:	bf00      	nop
    }

    if (pclk != 0U)
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d019      	beq.n	8005ad4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	085a      	lsrs	r2, r3, #1
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	441a      	add	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2b0f      	cmp	r3, #15
 8005ab8:	d909      	bls.n	8005ace <UART_SetConfig+0x546>
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ac0:	d205      	bcs.n	8005ace <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60da      	str	r2, [r3, #12]
 8005acc:	e002      	b.n	8005ad4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ae0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3728      	adds	r7, #40	@ 0x28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aee:	bf00      	nop
 8005af0:	40008000 	.word	0x40008000
 8005af4:	00f42400 	.word	0x00f42400

08005af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bf6:	d10a      	bne.n	8005c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b098      	sub	sp, #96	@ 0x60
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c4c:	f7fb fb36 	bl	80012bc <HAL_GetTick>
 8005c50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d12e      	bne.n	8005cbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f88c 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d021      	beq.n	8005cbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e6      	bne.n	8005c7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e062      	b.n	8005d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d149      	bne.n	8005d60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f856 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d03c      	beq.n	8005d60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d04:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e6      	bne.n	8005ce6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d38:	61fa      	str	r2, [r7, #28]
 8005d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	69b9      	ldr	r1, [r7, #24]
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	617b      	str	r3, [r7, #20]
   return(result);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e011      	b.n	8005d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3758      	adds	r7, #88	@ 0x58
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9c:	e04f      	b.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d04b      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fb fa89 	bl	80012bc <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e04e      	b.n	8005e5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d037      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b80      	cmp	r3, #128	@ 0x80
 8005dd2:	d034      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b40      	cmp	r3, #64	@ 0x40
 8005dd8:	d031      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d110      	bne.n	8005e0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2208      	movs	r2, #8
 8005dee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f838 	bl	8005e66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e029      	b.n	8005e5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e18:	d111      	bne.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f81e 	bl	8005e66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e00f      	b.n	8005e5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4013      	ands	r3, r2
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	bf0c      	ite	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	2300      	movne	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d0a0      	beq.n	8005d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b095      	sub	sp, #84	@ 0x54
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e6      	bne.n	8005e6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	f023 0301 	bic.w	r3, r3, #1
 8005eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e5      	bne.n	8005ea0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d118      	bne.n	8005f0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f023 0310 	bic.w	r3, r3, #16
 8005ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6979      	ldr	r1, [r7, #20]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	613b      	str	r3, [r7, #16]
   return(result);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e6      	bne.n	8005edc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f22:	bf00      	nop
 8005f24:	3754      	adds	r7, #84	@ 0x54
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <std>:
 8005f30:	2300      	movs	r3, #0
 8005f32:	b510      	push	{r4, lr}
 8005f34:	4604      	mov	r4, r0
 8005f36:	e9c0 3300 	strd	r3, r3, [r0]
 8005f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f3e:	6083      	str	r3, [r0, #8]
 8005f40:	8181      	strh	r1, [r0, #12]
 8005f42:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f44:	81c2      	strh	r2, [r0, #14]
 8005f46:	6183      	str	r3, [r0, #24]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	305c      	adds	r0, #92	@ 0x5c
 8005f4e:	f000 f9e7 	bl	8006320 <memset>
 8005f52:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <std+0x58>)
 8005f54:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f56:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <std+0x5c>)
 8005f58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f90 <std+0x60>)
 8005f5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f94 <std+0x64>)
 8005f60:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f62:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <std+0x68>)
 8005f64:	6224      	str	r4, [r4, #32]
 8005f66:	429c      	cmp	r4, r3
 8005f68:	d006      	beq.n	8005f78 <std+0x48>
 8005f6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f6e:	4294      	cmp	r4, r2
 8005f70:	d002      	beq.n	8005f78 <std+0x48>
 8005f72:	33d0      	adds	r3, #208	@ 0xd0
 8005f74:	429c      	cmp	r4, r3
 8005f76:	d105      	bne.n	8005f84 <std+0x54>
 8005f78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f80:	f000 ba46 	b.w	8006410 <__retarget_lock_init_recursive>
 8005f84:	bd10      	pop	{r4, pc}
 8005f86:	bf00      	nop
 8005f88:	08006171 	.word	0x08006171
 8005f8c:	08006193 	.word	0x08006193
 8005f90:	080061cb 	.word	0x080061cb
 8005f94:	080061ef 	.word	0x080061ef
 8005f98:	20000374 	.word	0x20000374

08005f9c <stdio_exit_handler>:
 8005f9c:	4a02      	ldr	r2, [pc, #8]	@ (8005fa8 <stdio_exit_handler+0xc>)
 8005f9e:	4903      	ldr	r1, [pc, #12]	@ (8005fac <stdio_exit_handler+0x10>)
 8005fa0:	4803      	ldr	r0, [pc, #12]	@ (8005fb0 <stdio_exit_handler+0x14>)
 8005fa2:	f000 b869 	b.w	8006078 <_fwalk_sglue>
 8005fa6:	bf00      	nop
 8005fa8:	2000000c 	.word	0x2000000c
 8005fac:	08006711 	.word	0x08006711
 8005fb0:	2000001c 	.word	0x2000001c

08005fb4 <cleanup_stdio>:
 8005fb4:	6841      	ldr	r1, [r0, #4]
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe8 <cleanup_stdio+0x34>)
 8005fb8:	4299      	cmp	r1, r3
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	d001      	beq.n	8005fc4 <cleanup_stdio+0x10>
 8005fc0:	f000 fba6 	bl	8006710 <_fflush_r>
 8005fc4:	68a1      	ldr	r1, [r4, #8]
 8005fc6:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <cleanup_stdio+0x38>)
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	d002      	beq.n	8005fd2 <cleanup_stdio+0x1e>
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 fb9f 	bl	8006710 <_fflush_r>
 8005fd2:	68e1      	ldr	r1, [r4, #12]
 8005fd4:	4b06      	ldr	r3, [pc, #24]	@ (8005ff0 <cleanup_stdio+0x3c>)
 8005fd6:	4299      	cmp	r1, r3
 8005fd8:	d004      	beq.n	8005fe4 <cleanup_stdio+0x30>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fe0:	f000 bb96 	b.w	8006710 <_fflush_r>
 8005fe4:	bd10      	pop	{r4, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000374 	.word	0x20000374
 8005fec:	200003dc 	.word	0x200003dc
 8005ff0:	20000444 	.word	0x20000444

08005ff4 <global_stdio_init.part.0>:
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <global_stdio_init.part.0+0x30>)
 8005ff8:	4c0b      	ldr	r4, [pc, #44]	@ (8006028 <global_stdio_init.part.0+0x34>)
 8005ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800602c <global_stdio_init.part.0+0x38>)
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	4620      	mov	r0, r4
 8006000:	2200      	movs	r2, #0
 8006002:	2104      	movs	r1, #4
 8006004:	f7ff ff94 	bl	8005f30 <std>
 8006008:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800600c:	2201      	movs	r2, #1
 800600e:	2109      	movs	r1, #9
 8006010:	f7ff ff8e 	bl	8005f30 <std>
 8006014:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006018:	2202      	movs	r2, #2
 800601a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800601e:	2112      	movs	r1, #18
 8006020:	f7ff bf86 	b.w	8005f30 <std>
 8006024:	200004ac 	.word	0x200004ac
 8006028:	20000374 	.word	0x20000374
 800602c:	08005f9d 	.word	0x08005f9d

08006030 <__sfp_lock_acquire>:
 8006030:	4801      	ldr	r0, [pc, #4]	@ (8006038 <__sfp_lock_acquire+0x8>)
 8006032:	f000 b9ee 	b.w	8006412 <__retarget_lock_acquire_recursive>
 8006036:	bf00      	nop
 8006038:	200004b5 	.word	0x200004b5

0800603c <__sfp_lock_release>:
 800603c:	4801      	ldr	r0, [pc, #4]	@ (8006044 <__sfp_lock_release+0x8>)
 800603e:	f000 b9e9 	b.w	8006414 <__retarget_lock_release_recursive>
 8006042:	bf00      	nop
 8006044:	200004b5 	.word	0x200004b5

08006048 <__sinit>:
 8006048:	b510      	push	{r4, lr}
 800604a:	4604      	mov	r4, r0
 800604c:	f7ff fff0 	bl	8006030 <__sfp_lock_acquire>
 8006050:	6a23      	ldr	r3, [r4, #32]
 8006052:	b11b      	cbz	r3, 800605c <__sinit+0x14>
 8006054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006058:	f7ff bff0 	b.w	800603c <__sfp_lock_release>
 800605c:	4b04      	ldr	r3, [pc, #16]	@ (8006070 <__sinit+0x28>)
 800605e:	6223      	str	r3, [r4, #32]
 8006060:	4b04      	ldr	r3, [pc, #16]	@ (8006074 <__sinit+0x2c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1f5      	bne.n	8006054 <__sinit+0xc>
 8006068:	f7ff ffc4 	bl	8005ff4 <global_stdio_init.part.0>
 800606c:	e7f2      	b.n	8006054 <__sinit+0xc>
 800606e:	bf00      	nop
 8006070:	08005fb5 	.word	0x08005fb5
 8006074:	200004ac 	.word	0x200004ac

08006078 <_fwalk_sglue>:
 8006078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800607c:	4607      	mov	r7, r0
 800607e:	4688      	mov	r8, r1
 8006080:	4614      	mov	r4, r2
 8006082:	2600      	movs	r6, #0
 8006084:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006088:	f1b9 0901 	subs.w	r9, r9, #1
 800608c:	d505      	bpl.n	800609a <_fwalk_sglue+0x22>
 800608e:	6824      	ldr	r4, [r4, #0]
 8006090:	2c00      	cmp	r4, #0
 8006092:	d1f7      	bne.n	8006084 <_fwalk_sglue+0xc>
 8006094:	4630      	mov	r0, r6
 8006096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d907      	bls.n	80060b0 <_fwalk_sglue+0x38>
 80060a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060a4:	3301      	adds	r3, #1
 80060a6:	d003      	beq.n	80060b0 <_fwalk_sglue+0x38>
 80060a8:	4629      	mov	r1, r5
 80060aa:	4638      	mov	r0, r7
 80060ac:	47c0      	blx	r8
 80060ae:	4306      	orrs	r6, r0
 80060b0:	3568      	adds	r5, #104	@ 0x68
 80060b2:	e7e9      	b.n	8006088 <_fwalk_sglue+0x10>

080060b4 <_puts_r>:
 80060b4:	6a03      	ldr	r3, [r0, #32]
 80060b6:	b570      	push	{r4, r5, r6, lr}
 80060b8:	6884      	ldr	r4, [r0, #8]
 80060ba:	4605      	mov	r5, r0
 80060bc:	460e      	mov	r6, r1
 80060be:	b90b      	cbnz	r3, 80060c4 <_puts_r+0x10>
 80060c0:	f7ff ffc2 	bl	8006048 <__sinit>
 80060c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060c6:	07db      	lsls	r3, r3, #31
 80060c8:	d405      	bmi.n	80060d6 <_puts_r+0x22>
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	0598      	lsls	r0, r3, #22
 80060ce:	d402      	bmi.n	80060d6 <_puts_r+0x22>
 80060d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060d2:	f000 f99e 	bl	8006412 <__retarget_lock_acquire_recursive>
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	0719      	lsls	r1, r3, #28
 80060da:	d502      	bpl.n	80060e2 <_puts_r+0x2e>
 80060dc:	6923      	ldr	r3, [r4, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d135      	bne.n	800614e <_puts_r+0x9a>
 80060e2:	4621      	mov	r1, r4
 80060e4:	4628      	mov	r0, r5
 80060e6:	f000 f8c5 	bl	8006274 <__swsetup_r>
 80060ea:	b380      	cbz	r0, 800614e <_puts_r+0x9a>
 80060ec:	f04f 35ff 	mov.w	r5, #4294967295
 80060f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060f2:	07da      	lsls	r2, r3, #31
 80060f4:	d405      	bmi.n	8006102 <_puts_r+0x4e>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	059b      	lsls	r3, r3, #22
 80060fa:	d402      	bmi.n	8006102 <_puts_r+0x4e>
 80060fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060fe:	f000 f989 	bl	8006414 <__retarget_lock_release_recursive>
 8006102:	4628      	mov	r0, r5
 8006104:	bd70      	pop	{r4, r5, r6, pc}
 8006106:	2b00      	cmp	r3, #0
 8006108:	da04      	bge.n	8006114 <_puts_r+0x60>
 800610a:	69a2      	ldr	r2, [r4, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	dc17      	bgt.n	8006140 <_puts_r+0x8c>
 8006110:	290a      	cmp	r1, #10
 8006112:	d015      	beq.n	8006140 <_puts_r+0x8c>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	6022      	str	r2, [r4, #0]
 800611a:	7019      	strb	r1, [r3, #0]
 800611c:	68a3      	ldr	r3, [r4, #8]
 800611e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006122:	3b01      	subs	r3, #1
 8006124:	60a3      	str	r3, [r4, #8]
 8006126:	2900      	cmp	r1, #0
 8006128:	d1ed      	bne.n	8006106 <_puts_r+0x52>
 800612a:	2b00      	cmp	r3, #0
 800612c:	da11      	bge.n	8006152 <_puts_r+0x9e>
 800612e:	4622      	mov	r2, r4
 8006130:	210a      	movs	r1, #10
 8006132:	4628      	mov	r0, r5
 8006134:	f000 f85f 	bl	80061f6 <__swbuf_r>
 8006138:	3001      	adds	r0, #1
 800613a:	d0d7      	beq.n	80060ec <_puts_r+0x38>
 800613c:	250a      	movs	r5, #10
 800613e:	e7d7      	b.n	80060f0 <_puts_r+0x3c>
 8006140:	4622      	mov	r2, r4
 8006142:	4628      	mov	r0, r5
 8006144:	f000 f857 	bl	80061f6 <__swbuf_r>
 8006148:	3001      	adds	r0, #1
 800614a:	d1e7      	bne.n	800611c <_puts_r+0x68>
 800614c:	e7ce      	b.n	80060ec <_puts_r+0x38>
 800614e:	3e01      	subs	r6, #1
 8006150:	e7e4      	b.n	800611c <_puts_r+0x68>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	6022      	str	r2, [r4, #0]
 8006158:	220a      	movs	r2, #10
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e7ee      	b.n	800613c <_puts_r+0x88>
	...

08006160 <puts>:
 8006160:	4b02      	ldr	r3, [pc, #8]	@ (800616c <puts+0xc>)
 8006162:	4601      	mov	r1, r0
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	f7ff bfa5 	b.w	80060b4 <_puts_r>
 800616a:	bf00      	nop
 800616c:	20000018 	.word	0x20000018

08006170 <__sread>:
 8006170:	b510      	push	{r4, lr}
 8006172:	460c      	mov	r4, r1
 8006174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006178:	f000 f8fc 	bl	8006374 <_read_r>
 800617c:	2800      	cmp	r0, #0
 800617e:	bfab      	itete	ge
 8006180:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006182:	89a3      	ldrhlt	r3, [r4, #12]
 8006184:	181b      	addge	r3, r3, r0
 8006186:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800618a:	bfac      	ite	ge
 800618c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800618e:	81a3      	strhlt	r3, [r4, #12]
 8006190:	bd10      	pop	{r4, pc}

08006192 <__swrite>:
 8006192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006196:	461f      	mov	r7, r3
 8006198:	898b      	ldrh	r3, [r1, #12]
 800619a:	05db      	lsls	r3, r3, #23
 800619c:	4605      	mov	r5, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	4616      	mov	r6, r2
 80061a2:	d505      	bpl.n	80061b0 <__swrite+0x1e>
 80061a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a8:	2302      	movs	r3, #2
 80061aa:	2200      	movs	r2, #0
 80061ac:	f000 f8d0 	bl	8006350 <_lseek_r>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	4632      	mov	r2, r6
 80061be:	463b      	mov	r3, r7
 80061c0:	4628      	mov	r0, r5
 80061c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061c6:	f000 b8e7 	b.w	8006398 <_write_r>

080061ca <__sseek>:
 80061ca:	b510      	push	{r4, lr}
 80061cc:	460c      	mov	r4, r1
 80061ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d2:	f000 f8bd 	bl	8006350 <_lseek_r>
 80061d6:	1c43      	adds	r3, r0, #1
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	bf15      	itete	ne
 80061dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061e6:	81a3      	strheq	r3, [r4, #12]
 80061e8:	bf18      	it	ne
 80061ea:	81a3      	strhne	r3, [r4, #12]
 80061ec:	bd10      	pop	{r4, pc}

080061ee <__sclose>:
 80061ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f2:	f000 b89d 	b.w	8006330 <_close_r>

080061f6 <__swbuf_r>:
 80061f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f8:	460e      	mov	r6, r1
 80061fa:	4614      	mov	r4, r2
 80061fc:	4605      	mov	r5, r0
 80061fe:	b118      	cbz	r0, 8006208 <__swbuf_r+0x12>
 8006200:	6a03      	ldr	r3, [r0, #32]
 8006202:	b90b      	cbnz	r3, 8006208 <__swbuf_r+0x12>
 8006204:	f7ff ff20 	bl	8006048 <__sinit>
 8006208:	69a3      	ldr	r3, [r4, #24]
 800620a:	60a3      	str	r3, [r4, #8]
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	071a      	lsls	r2, r3, #28
 8006210:	d501      	bpl.n	8006216 <__swbuf_r+0x20>
 8006212:	6923      	ldr	r3, [r4, #16]
 8006214:	b943      	cbnz	r3, 8006228 <__swbuf_r+0x32>
 8006216:	4621      	mov	r1, r4
 8006218:	4628      	mov	r0, r5
 800621a:	f000 f82b 	bl	8006274 <__swsetup_r>
 800621e:	b118      	cbz	r0, 8006228 <__swbuf_r+0x32>
 8006220:	f04f 37ff 	mov.w	r7, #4294967295
 8006224:	4638      	mov	r0, r7
 8006226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	6922      	ldr	r2, [r4, #16]
 800622c:	1a98      	subs	r0, r3, r2
 800622e:	6963      	ldr	r3, [r4, #20]
 8006230:	b2f6      	uxtb	r6, r6
 8006232:	4283      	cmp	r3, r0
 8006234:	4637      	mov	r7, r6
 8006236:	dc05      	bgt.n	8006244 <__swbuf_r+0x4e>
 8006238:	4621      	mov	r1, r4
 800623a:	4628      	mov	r0, r5
 800623c:	f000 fa68 	bl	8006710 <_fflush_r>
 8006240:	2800      	cmp	r0, #0
 8006242:	d1ed      	bne.n	8006220 <__swbuf_r+0x2a>
 8006244:	68a3      	ldr	r3, [r4, #8]
 8006246:	3b01      	subs	r3, #1
 8006248:	60a3      	str	r3, [r4, #8]
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	701e      	strb	r6, [r3, #0]
 8006252:	6962      	ldr	r2, [r4, #20]
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	429a      	cmp	r2, r3
 8006258:	d004      	beq.n	8006264 <__swbuf_r+0x6e>
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	07db      	lsls	r3, r3, #31
 800625e:	d5e1      	bpl.n	8006224 <__swbuf_r+0x2e>
 8006260:	2e0a      	cmp	r6, #10
 8006262:	d1df      	bne.n	8006224 <__swbuf_r+0x2e>
 8006264:	4621      	mov	r1, r4
 8006266:	4628      	mov	r0, r5
 8006268:	f000 fa52 	bl	8006710 <_fflush_r>
 800626c:	2800      	cmp	r0, #0
 800626e:	d0d9      	beq.n	8006224 <__swbuf_r+0x2e>
 8006270:	e7d6      	b.n	8006220 <__swbuf_r+0x2a>
	...

08006274 <__swsetup_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4b29      	ldr	r3, [pc, #164]	@ (800631c <__swsetup_r+0xa8>)
 8006278:	4605      	mov	r5, r0
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	460c      	mov	r4, r1
 800627e:	b118      	cbz	r0, 8006288 <__swsetup_r+0x14>
 8006280:	6a03      	ldr	r3, [r0, #32]
 8006282:	b90b      	cbnz	r3, 8006288 <__swsetup_r+0x14>
 8006284:	f7ff fee0 	bl	8006048 <__sinit>
 8006288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800628c:	0719      	lsls	r1, r3, #28
 800628e:	d422      	bmi.n	80062d6 <__swsetup_r+0x62>
 8006290:	06da      	lsls	r2, r3, #27
 8006292:	d407      	bmi.n	80062a4 <__swsetup_r+0x30>
 8006294:	2209      	movs	r2, #9
 8006296:	602a      	str	r2, [r5, #0]
 8006298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	f04f 30ff 	mov.w	r0, #4294967295
 80062a2:	e033      	b.n	800630c <__swsetup_r+0x98>
 80062a4:	0758      	lsls	r0, r3, #29
 80062a6:	d512      	bpl.n	80062ce <__swsetup_r+0x5a>
 80062a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062aa:	b141      	cbz	r1, 80062be <__swsetup_r+0x4a>
 80062ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062b0:	4299      	cmp	r1, r3
 80062b2:	d002      	beq.n	80062ba <__swsetup_r+0x46>
 80062b4:	4628      	mov	r0, r5
 80062b6:	f000 f8af 	bl	8006418 <_free_r>
 80062ba:	2300      	movs	r3, #0
 80062bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062c4:	81a3      	strh	r3, [r4, #12]
 80062c6:	2300      	movs	r3, #0
 80062c8:	6063      	str	r3, [r4, #4]
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	f043 0308 	orr.w	r3, r3, #8
 80062d4:	81a3      	strh	r3, [r4, #12]
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	b94b      	cbnz	r3, 80062ee <__swsetup_r+0x7a>
 80062da:	89a3      	ldrh	r3, [r4, #12]
 80062dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062e4:	d003      	beq.n	80062ee <__swsetup_r+0x7a>
 80062e6:	4621      	mov	r1, r4
 80062e8:	4628      	mov	r0, r5
 80062ea:	f000 fa5f 	bl	80067ac <__smakebuf_r>
 80062ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062f2:	f013 0201 	ands.w	r2, r3, #1
 80062f6:	d00a      	beq.n	800630e <__swsetup_r+0x9a>
 80062f8:	2200      	movs	r2, #0
 80062fa:	60a2      	str	r2, [r4, #8]
 80062fc:	6962      	ldr	r2, [r4, #20]
 80062fe:	4252      	negs	r2, r2
 8006300:	61a2      	str	r2, [r4, #24]
 8006302:	6922      	ldr	r2, [r4, #16]
 8006304:	b942      	cbnz	r2, 8006318 <__swsetup_r+0xa4>
 8006306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800630a:	d1c5      	bne.n	8006298 <__swsetup_r+0x24>
 800630c:	bd38      	pop	{r3, r4, r5, pc}
 800630e:	0799      	lsls	r1, r3, #30
 8006310:	bf58      	it	pl
 8006312:	6962      	ldrpl	r2, [r4, #20]
 8006314:	60a2      	str	r2, [r4, #8]
 8006316:	e7f4      	b.n	8006302 <__swsetup_r+0x8e>
 8006318:	2000      	movs	r0, #0
 800631a:	e7f7      	b.n	800630c <__swsetup_r+0x98>
 800631c:	20000018 	.word	0x20000018

08006320 <memset>:
 8006320:	4402      	add	r2, r0
 8006322:	4603      	mov	r3, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	d100      	bne.n	800632a <memset+0xa>
 8006328:	4770      	bx	lr
 800632a:	f803 1b01 	strb.w	r1, [r3], #1
 800632e:	e7f9      	b.n	8006324 <memset+0x4>

08006330 <_close_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4d06      	ldr	r5, [pc, #24]	@ (800634c <_close_r+0x1c>)
 8006334:	2300      	movs	r3, #0
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	602b      	str	r3, [r5, #0]
 800633c:	f7fa fe1b 	bl	8000f76 <_close>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d102      	bne.n	800634a <_close_r+0x1a>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	b103      	cbz	r3, 800634a <_close_r+0x1a>
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	200004b0 	.word	0x200004b0

08006350 <_lseek_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4d07      	ldr	r5, [pc, #28]	@ (8006370 <_lseek_r+0x20>)
 8006354:	4604      	mov	r4, r0
 8006356:	4608      	mov	r0, r1
 8006358:	4611      	mov	r1, r2
 800635a:	2200      	movs	r2, #0
 800635c:	602a      	str	r2, [r5, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	f7fa fe30 	bl	8000fc4 <_lseek>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_lseek_r+0x1e>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_lseek_r+0x1e>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	200004b0 	.word	0x200004b0

08006374 <_read_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d07      	ldr	r5, [pc, #28]	@ (8006394 <_read_r+0x20>)
 8006378:	4604      	mov	r4, r0
 800637a:	4608      	mov	r0, r1
 800637c:	4611      	mov	r1, r2
 800637e:	2200      	movs	r2, #0
 8006380:	602a      	str	r2, [r5, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	f7fa fdbe 	bl	8000f04 <_read>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_read_r+0x1e>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_read_r+0x1e>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	200004b0 	.word	0x200004b0

08006398 <_write_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4d07      	ldr	r5, [pc, #28]	@ (80063b8 <_write_r+0x20>)
 800639c:	4604      	mov	r4, r0
 800639e:	4608      	mov	r0, r1
 80063a0:	4611      	mov	r1, r2
 80063a2:	2200      	movs	r2, #0
 80063a4:	602a      	str	r2, [r5, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f7fa fdc9 	bl	8000f3e <_write>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d102      	bne.n	80063b6 <_write_r+0x1e>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	b103      	cbz	r3, 80063b6 <_write_r+0x1e>
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	200004b0 	.word	0x200004b0

080063bc <__errno>:
 80063bc:	4b01      	ldr	r3, [pc, #4]	@ (80063c4 <__errno+0x8>)
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000018 	.word	0x20000018

080063c8 <__libc_init_array>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006400 <__libc_init_array+0x38>)
 80063cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006404 <__libc_init_array+0x3c>)
 80063ce:	1b64      	subs	r4, r4, r5
 80063d0:	10a4      	asrs	r4, r4, #2
 80063d2:	2600      	movs	r6, #0
 80063d4:	42a6      	cmp	r6, r4
 80063d6:	d109      	bne.n	80063ec <__libc_init_array+0x24>
 80063d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006408 <__libc_init_array+0x40>)
 80063da:	4c0c      	ldr	r4, [pc, #48]	@ (800640c <__libc_init_array+0x44>)
 80063dc:	f000 fa54 	bl	8006888 <_init>
 80063e0:	1b64      	subs	r4, r4, r5
 80063e2:	10a4      	asrs	r4, r4, #2
 80063e4:	2600      	movs	r6, #0
 80063e6:	42a6      	cmp	r6, r4
 80063e8:	d105      	bne.n	80063f6 <__libc_init_array+0x2e>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f0:	4798      	blx	r3
 80063f2:	3601      	adds	r6, #1
 80063f4:	e7ee      	b.n	80063d4 <__libc_init_array+0xc>
 80063f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fa:	4798      	blx	r3
 80063fc:	3601      	adds	r6, #1
 80063fe:	e7f2      	b.n	80063e6 <__libc_init_array+0x1e>
 8006400:	08006900 	.word	0x08006900
 8006404:	08006900 	.word	0x08006900
 8006408:	08006900 	.word	0x08006900
 800640c:	08006904 	.word	0x08006904

08006410 <__retarget_lock_init_recursive>:
 8006410:	4770      	bx	lr

08006412 <__retarget_lock_acquire_recursive>:
 8006412:	4770      	bx	lr

08006414 <__retarget_lock_release_recursive>:
 8006414:	4770      	bx	lr
	...

08006418 <_free_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4605      	mov	r5, r0
 800641c:	2900      	cmp	r1, #0
 800641e:	d041      	beq.n	80064a4 <_free_r+0x8c>
 8006420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006424:	1f0c      	subs	r4, r1, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	bfb8      	it	lt
 800642a:	18e4      	addlt	r4, r4, r3
 800642c:	f000 f8e0 	bl	80065f0 <__malloc_lock>
 8006430:	4a1d      	ldr	r2, [pc, #116]	@ (80064a8 <_free_r+0x90>)
 8006432:	6813      	ldr	r3, [r2, #0]
 8006434:	b933      	cbnz	r3, 8006444 <_free_r+0x2c>
 8006436:	6063      	str	r3, [r4, #4]
 8006438:	6014      	str	r4, [r2, #0]
 800643a:	4628      	mov	r0, r5
 800643c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006440:	f000 b8dc 	b.w	80065fc <__malloc_unlock>
 8006444:	42a3      	cmp	r3, r4
 8006446:	d908      	bls.n	800645a <_free_r+0x42>
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	1821      	adds	r1, r4, r0
 800644c:	428b      	cmp	r3, r1
 800644e:	bf01      	itttt	eq
 8006450:	6819      	ldreq	r1, [r3, #0]
 8006452:	685b      	ldreq	r3, [r3, #4]
 8006454:	1809      	addeq	r1, r1, r0
 8006456:	6021      	streq	r1, [r4, #0]
 8006458:	e7ed      	b.n	8006436 <_free_r+0x1e>
 800645a:	461a      	mov	r2, r3
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	b10b      	cbz	r3, 8006464 <_free_r+0x4c>
 8006460:	42a3      	cmp	r3, r4
 8006462:	d9fa      	bls.n	800645a <_free_r+0x42>
 8006464:	6811      	ldr	r1, [r2, #0]
 8006466:	1850      	adds	r0, r2, r1
 8006468:	42a0      	cmp	r0, r4
 800646a:	d10b      	bne.n	8006484 <_free_r+0x6c>
 800646c:	6820      	ldr	r0, [r4, #0]
 800646e:	4401      	add	r1, r0
 8006470:	1850      	adds	r0, r2, r1
 8006472:	4283      	cmp	r3, r0
 8006474:	6011      	str	r1, [r2, #0]
 8006476:	d1e0      	bne.n	800643a <_free_r+0x22>
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	6053      	str	r3, [r2, #4]
 800647e:	4408      	add	r0, r1
 8006480:	6010      	str	r0, [r2, #0]
 8006482:	e7da      	b.n	800643a <_free_r+0x22>
 8006484:	d902      	bls.n	800648c <_free_r+0x74>
 8006486:	230c      	movs	r3, #12
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	e7d6      	b.n	800643a <_free_r+0x22>
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	1821      	adds	r1, r4, r0
 8006490:	428b      	cmp	r3, r1
 8006492:	bf04      	itt	eq
 8006494:	6819      	ldreq	r1, [r3, #0]
 8006496:	685b      	ldreq	r3, [r3, #4]
 8006498:	6063      	str	r3, [r4, #4]
 800649a:	bf04      	itt	eq
 800649c:	1809      	addeq	r1, r1, r0
 800649e:	6021      	streq	r1, [r4, #0]
 80064a0:	6054      	str	r4, [r2, #4]
 80064a2:	e7ca      	b.n	800643a <_free_r+0x22>
 80064a4:	bd38      	pop	{r3, r4, r5, pc}
 80064a6:	bf00      	nop
 80064a8:	200004bc 	.word	0x200004bc

080064ac <sbrk_aligned>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	4e0f      	ldr	r6, [pc, #60]	@ (80064ec <sbrk_aligned+0x40>)
 80064b0:	460c      	mov	r4, r1
 80064b2:	6831      	ldr	r1, [r6, #0]
 80064b4:	4605      	mov	r5, r0
 80064b6:	b911      	cbnz	r1, 80064be <sbrk_aligned+0x12>
 80064b8:	f000 f9d6 	bl	8006868 <_sbrk_r>
 80064bc:	6030      	str	r0, [r6, #0]
 80064be:	4621      	mov	r1, r4
 80064c0:	4628      	mov	r0, r5
 80064c2:	f000 f9d1 	bl	8006868 <_sbrk_r>
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	d103      	bne.n	80064d2 <sbrk_aligned+0x26>
 80064ca:	f04f 34ff 	mov.w	r4, #4294967295
 80064ce:	4620      	mov	r0, r4
 80064d0:	bd70      	pop	{r4, r5, r6, pc}
 80064d2:	1cc4      	adds	r4, r0, #3
 80064d4:	f024 0403 	bic.w	r4, r4, #3
 80064d8:	42a0      	cmp	r0, r4
 80064da:	d0f8      	beq.n	80064ce <sbrk_aligned+0x22>
 80064dc:	1a21      	subs	r1, r4, r0
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 f9c2 	bl	8006868 <_sbrk_r>
 80064e4:	3001      	adds	r0, #1
 80064e6:	d1f2      	bne.n	80064ce <sbrk_aligned+0x22>
 80064e8:	e7ef      	b.n	80064ca <sbrk_aligned+0x1e>
 80064ea:	bf00      	nop
 80064ec:	200004b8 	.word	0x200004b8

080064f0 <_malloc_r>:
 80064f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064f4:	1ccd      	adds	r5, r1, #3
 80064f6:	f025 0503 	bic.w	r5, r5, #3
 80064fa:	3508      	adds	r5, #8
 80064fc:	2d0c      	cmp	r5, #12
 80064fe:	bf38      	it	cc
 8006500:	250c      	movcc	r5, #12
 8006502:	2d00      	cmp	r5, #0
 8006504:	4606      	mov	r6, r0
 8006506:	db01      	blt.n	800650c <_malloc_r+0x1c>
 8006508:	42a9      	cmp	r1, r5
 800650a:	d904      	bls.n	8006516 <_malloc_r+0x26>
 800650c:	230c      	movs	r3, #12
 800650e:	6033      	str	r3, [r6, #0]
 8006510:	2000      	movs	r0, #0
 8006512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065ec <_malloc_r+0xfc>
 800651a:	f000 f869 	bl	80065f0 <__malloc_lock>
 800651e:	f8d8 3000 	ldr.w	r3, [r8]
 8006522:	461c      	mov	r4, r3
 8006524:	bb44      	cbnz	r4, 8006578 <_malloc_r+0x88>
 8006526:	4629      	mov	r1, r5
 8006528:	4630      	mov	r0, r6
 800652a:	f7ff ffbf 	bl	80064ac <sbrk_aligned>
 800652e:	1c43      	adds	r3, r0, #1
 8006530:	4604      	mov	r4, r0
 8006532:	d158      	bne.n	80065e6 <_malloc_r+0xf6>
 8006534:	f8d8 4000 	ldr.w	r4, [r8]
 8006538:	4627      	mov	r7, r4
 800653a:	2f00      	cmp	r7, #0
 800653c:	d143      	bne.n	80065c6 <_malloc_r+0xd6>
 800653e:	2c00      	cmp	r4, #0
 8006540:	d04b      	beq.n	80065da <_malloc_r+0xea>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	4639      	mov	r1, r7
 8006546:	4630      	mov	r0, r6
 8006548:	eb04 0903 	add.w	r9, r4, r3
 800654c:	f000 f98c 	bl	8006868 <_sbrk_r>
 8006550:	4581      	cmp	r9, r0
 8006552:	d142      	bne.n	80065da <_malloc_r+0xea>
 8006554:	6821      	ldr	r1, [r4, #0]
 8006556:	1a6d      	subs	r5, r5, r1
 8006558:	4629      	mov	r1, r5
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff ffa6 	bl	80064ac <sbrk_aligned>
 8006560:	3001      	adds	r0, #1
 8006562:	d03a      	beq.n	80065da <_malloc_r+0xea>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	442b      	add	r3, r5
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	f8d8 3000 	ldr.w	r3, [r8]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	bb62      	cbnz	r2, 80065cc <_malloc_r+0xdc>
 8006572:	f8c8 7000 	str.w	r7, [r8]
 8006576:	e00f      	b.n	8006598 <_malloc_r+0xa8>
 8006578:	6822      	ldr	r2, [r4, #0]
 800657a:	1b52      	subs	r2, r2, r5
 800657c:	d420      	bmi.n	80065c0 <_malloc_r+0xd0>
 800657e:	2a0b      	cmp	r2, #11
 8006580:	d917      	bls.n	80065b2 <_malloc_r+0xc2>
 8006582:	1961      	adds	r1, r4, r5
 8006584:	42a3      	cmp	r3, r4
 8006586:	6025      	str	r5, [r4, #0]
 8006588:	bf18      	it	ne
 800658a:	6059      	strne	r1, [r3, #4]
 800658c:	6863      	ldr	r3, [r4, #4]
 800658e:	bf08      	it	eq
 8006590:	f8c8 1000 	streq.w	r1, [r8]
 8006594:	5162      	str	r2, [r4, r5]
 8006596:	604b      	str	r3, [r1, #4]
 8006598:	4630      	mov	r0, r6
 800659a:	f000 f82f 	bl	80065fc <__malloc_unlock>
 800659e:	f104 000b 	add.w	r0, r4, #11
 80065a2:	1d23      	adds	r3, r4, #4
 80065a4:	f020 0007 	bic.w	r0, r0, #7
 80065a8:	1ac2      	subs	r2, r0, r3
 80065aa:	bf1c      	itt	ne
 80065ac:	1a1b      	subne	r3, r3, r0
 80065ae:	50a3      	strne	r3, [r4, r2]
 80065b0:	e7af      	b.n	8006512 <_malloc_r+0x22>
 80065b2:	6862      	ldr	r2, [r4, #4]
 80065b4:	42a3      	cmp	r3, r4
 80065b6:	bf0c      	ite	eq
 80065b8:	f8c8 2000 	streq.w	r2, [r8]
 80065bc:	605a      	strne	r2, [r3, #4]
 80065be:	e7eb      	b.n	8006598 <_malloc_r+0xa8>
 80065c0:	4623      	mov	r3, r4
 80065c2:	6864      	ldr	r4, [r4, #4]
 80065c4:	e7ae      	b.n	8006524 <_malloc_r+0x34>
 80065c6:	463c      	mov	r4, r7
 80065c8:	687f      	ldr	r7, [r7, #4]
 80065ca:	e7b6      	b.n	800653a <_malloc_r+0x4a>
 80065cc:	461a      	mov	r2, r3
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	42a3      	cmp	r3, r4
 80065d2:	d1fb      	bne.n	80065cc <_malloc_r+0xdc>
 80065d4:	2300      	movs	r3, #0
 80065d6:	6053      	str	r3, [r2, #4]
 80065d8:	e7de      	b.n	8006598 <_malloc_r+0xa8>
 80065da:	230c      	movs	r3, #12
 80065dc:	6033      	str	r3, [r6, #0]
 80065de:	4630      	mov	r0, r6
 80065e0:	f000 f80c 	bl	80065fc <__malloc_unlock>
 80065e4:	e794      	b.n	8006510 <_malloc_r+0x20>
 80065e6:	6005      	str	r5, [r0, #0]
 80065e8:	e7d6      	b.n	8006598 <_malloc_r+0xa8>
 80065ea:	bf00      	nop
 80065ec:	200004bc 	.word	0x200004bc

080065f0 <__malloc_lock>:
 80065f0:	4801      	ldr	r0, [pc, #4]	@ (80065f8 <__malloc_lock+0x8>)
 80065f2:	f7ff bf0e 	b.w	8006412 <__retarget_lock_acquire_recursive>
 80065f6:	bf00      	nop
 80065f8:	200004b4 	.word	0x200004b4

080065fc <__malloc_unlock>:
 80065fc:	4801      	ldr	r0, [pc, #4]	@ (8006604 <__malloc_unlock+0x8>)
 80065fe:	f7ff bf09 	b.w	8006414 <__retarget_lock_release_recursive>
 8006602:	bf00      	nop
 8006604:	200004b4 	.word	0x200004b4

08006608 <__sflush_r>:
 8006608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006610:	0716      	lsls	r6, r2, #28
 8006612:	4605      	mov	r5, r0
 8006614:	460c      	mov	r4, r1
 8006616:	d454      	bmi.n	80066c2 <__sflush_r+0xba>
 8006618:	684b      	ldr	r3, [r1, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	dc02      	bgt.n	8006624 <__sflush_r+0x1c>
 800661e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	dd48      	ble.n	80066b6 <__sflush_r+0xae>
 8006624:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006626:	2e00      	cmp	r6, #0
 8006628:	d045      	beq.n	80066b6 <__sflush_r+0xae>
 800662a:	2300      	movs	r3, #0
 800662c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006630:	682f      	ldr	r7, [r5, #0]
 8006632:	6a21      	ldr	r1, [r4, #32]
 8006634:	602b      	str	r3, [r5, #0]
 8006636:	d030      	beq.n	800669a <__sflush_r+0x92>
 8006638:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	0759      	lsls	r1, r3, #29
 800663e:	d505      	bpl.n	800664c <__sflush_r+0x44>
 8006640:	6863      	ldr	r3, [r4, #4]
 8006642:	1ad2      	subs	r2, r2, r3
 8006644:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006646:	b10b      	cbz	r3, 800664c <__sflush_r+0x44>
 8006648:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800664a:	1ad2      	subs	r2, r2, r3
 800664c:	2300      	movs	r3, #0
 800664e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006650:	6a21      	ldr	r1, [r4, #32]
 8006652:	4628      	mov	r0, r5
 8006654:	47b0      	blx	r6
 8006656:	1c43      	adds	r3, r0, #1
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	d106      	bne.n	800666a <__sflush_r+0x62>
 800665c:	6829      	ldr	r1, [r5, #0]
 800665e:	291d      	cmp	r1, #29
 8006660:	d82b      	bhi.n	80066ba <__sflush_r+0xb2>
 8006662:	4a2a      	ldr	r2, [pc, #168]	@ (800670c <__sflush_r+0x104>)
 8006664:	410a      	asrs	r2, r1
 8006666:	07d6      	lsls	r6, r2, #31
 8006668:	d427      	bmi.n	80066ba <__sflush_r+0xb2>
 800666a:	2200      	movs	r2, #0
 800666c:	6062      	str	r2, [r4, #4]
 800666e:	04d9      	lsls	r1, r3, #19
 8006670:	6922      	ldr	r2, [r4, #16]
 8006672:	6022      	str	r2, [r4, #0]
 8006674:	d504      	bpl.n	8006680 <__sflush_r+0x78>
 8006676:	1c42      	adds	r2, r0, #1
 8006678:	d101      	bne.n	800667e <__sflush_r+0x76>
 800667a:	682b      	ldr	r3, [r5, #0]
 800667c:	b903      	cbnz	r3, 8006680 <__sflush_r+0x78>
 800667e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006680:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006682:	602f      	str	r7, [r5, #0]
 8006684:	b1b9      	cbz	r1, 80066b6 <__sflush_r+0xae>
 8006686:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800668a:	4299      	cmp	r1, r3
 800668c:	d002      	beq.n	8006694 <__sflush_r+0x8c>
 800668e:	4628      	mov	r0, r5
 8006690:	f7ff fec2 	bl	8006418 <_free_r>
 8006694:	2300      	movs	r3, #0
 8006696:	6363      	str	r3, [r4, #52]	@ 0x34
 8006698:	e00d      	b.n	80066b6 <__sflush_r+0xae>
 800669a:	2301      	movs	r3, #1
 800669c:	4628      	mov	r0, r5
 800669e:	47b0      	blx	r6
 80066a0:	4602      	mov	r2, r0
 80066a2:	1c50      	adds	r0, r2, #1
 80066a4:	d1c9      	bne.n	800663a <__sflush_r+0x32>
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0c6      	beq.n	800663a <__sflush_r+0x32>
 80066ac:	2b1d      	cmp	r3, #29
 80066ae:	d001      	beq.n	80066b4 <__sflush_r+0xac>
 80066b0:	2b16      	cmp	r3, #22
 80066b2:	d11e      	bne.n	80066f2 <__sflush_r+0xea>
 80066b4:	602f      	str	r7, [r5, #0]
 80066b6:	2000      	movs	r0, #0
 80066b8:	e022      	b.n	8006700 <__sflush_r+0xf8>
 80066ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066be:	b21b      	sxth	r3, r3
 80066c0:	e01b      	b.n	80066fa <__sflush_r+0xf2>
 80066c2:	690f      	ldr	r7, [r1, #16]
 80066c4:	2f00      	cmp	r7, #0
 80066c6:	d0f6      	beq.n	80066b6 <__sflush_r+0xae>
 80066c8:	0793      	lsls	r3, r2, #30
 80066ca:	680e      	ldr	r6, [r1, #0]
 80066cc:	bf08      	it	eq
 80066ce:	694b      	ldreq	r3, [r1, #20]
 80066d0:	600f      	str	r7, [r1, #0]
 80066d2:	bf18      	it	ne
 80066d4:	2300      	movne	r3, #0
 80066d6:	eba6 0807 	sub.w	r8, r6, r7
 80066da:	608b      	str	r3, [r1, #8]
 80066dc:	f1b8 0f00 	cmp.w	r8, #0
 80066e0:	dde9      	ble.n	80066b6 <__sflush_r+0xae>
 80066e2:	6a21      	ldr	r1, [r4, #32]
 80066e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066e6:	4643      	mov	r3, r8
 80066e8:	463a      	mov	r2, r7
 80066ea:	4628      	mov	r0, r5
 80066ec:	47b0      	blx	r6
 80066ee:	2800      	cmp	r0, #0
 80066f0:	dc08      	bgt.n	8006704 <__sflush_r+0xfc>
 80066f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066fa:	81a3      	strh	r3, [r4, #12]
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006704:	4407      	add	r7, r0
 8006706:	eba8 0800 	sub.w	r8, r8, r0
 800670a:	e7e7      	b.n	80066dc <__sflush_r+0xd4>
 800670c:	dfbffffe 	.word	0xdfbffffe

08006710 <_fflush_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	690b      	ldr	r3, [r1, #16]
 8006714:	4605      	mov	r5, r0
 8006716:	460c      	mov	r4, r1
 8006718:	b913      	cbnz	r3, 8006720 <_fflush_r+0x10>
 800671a:	2500      	movs	r5, #0
 800671c:	4628      	mov	r0, r5
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	b118      	cbz	r0, 800672a <_fflush_r+0x1a>
 8006722:	6a03      	ldr	r3, [r0, #32]
 8006724:	b90b      	cbnz	r3, 800672a <_fflush_r+0x1a>
 8006726:	f7ff fc8f 	bl	8006048 <__sinit>
 800672a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f3      	beq.n	800671a <_fflush_r+0xa>
 8006732:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006734:	07d0      	lsls	r0, r2, #31
 8006736:	d404      	bmi.n	8006742 <_fflush_r+0x32>
 8006738:	0599      	lsls	r1, r3, #22
 800673a:	d402      	bmi.n	8006742 <_fflush_r+0x32>
 800673c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800673e:	f7ff fe68 	bl	8006412 <__retarget_lock_acquire_recursive>
 8006742:	4628      	mov	r0, r5
 8006744:	4621      	mov	r1, r4
 8006746:	f7ff ff5f 	bl	8006608 <__sflush_r>
 800674a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800674c:	07da      	lsls	r2, r3, #31
 800674e:	4605      	mov	r5, r0
 8006750:	d4e4      	bmi.n	800671c <_fflush_r+0xc>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	059b      	lsls	r3, r3, #22
 8006756:	d4e1      	bmi.n	800671c <_fflush_r+0xc>
 8006758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800675a:	f7ff fe5b 	bl	8006414 <__retarget_lock_release_recursive>
 800675e:	e7dd      	b.n	800671c <_fflush_r+0xc>

08006760 <__swhatbuf_r>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	460c      	mov	r4, r1
 8006764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006768:	2900      	cmp	r1, #0
 800676a:	b096      	sub	sp, #88	@ 0x58
 800676c:	4615      	mov	r5, r2
 800676e:	461e      	mov	r6, r3
 8006770:	da0d      	bge.n	800678e <__swhatbuf_r+0x2e>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006778:	f04f 0100 	mov.w	r1, #0
 800677c:	bf14      	ite	ne
 800677e:	2340      	movne	r3, #64	@ 0x40
 8006780:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006784:	2000      	movs	r0, #0
 8006786:	6031      	str	r1, [r6, #0]
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	b016      	add	sp, #88	@ 0x58
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	466a      	mov	r2, sp
 8006790:	f000 f848 	bl	8006824 <_fstat_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	dbec      	blt.n	8006772 <__swhatbuf_r+0x12>
 8006798:	9901      	ldr	r1, [sp, #4]
 800679a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800679e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067a2:	4259      	negs	r1, r3
 80067a4:	4159      	adcs	r1, r3
 80067a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067aa:	e7eb      	b.n	8006784 <__swhatbuf_r+0x24>

080067ac <__smakebuf_r>:
 80067ac:	898b      	ldrh	r3, [r1, #12]
 80067ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067b0:	079d      	lsls	r5, r3, #30
 80067b2:	4606      	mov	r6, r0
 80067b4:	460c      	mov	r4, r1
 80067b6:	d507      	bpl.n	80067c8 <__smakebuf_r+0x1c>
 80067b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	2301      	movs	r3, #1
 80067c2:	6163      	str	r3, [r4, #20]
 80067c4:	b003      	add	sp, #12
 80067c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c8:	ab01      	add	r3, sp, #4
 80067ca:	466a      	mov	r2, sp
 80067cc:	f7ff ffc8 	bl	8006760 <__swhatbuf_r>
 80067d0:	9f00      	ldr	r7, [sp, #0]
 80067d2:	4605      	mov	r5, r0
 80067d4:	4639      	mov	r1, r7
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff fe8a 	bl	80064f0 <_malloc_r>
 80067dc:	b948      	cbnz	r0, 80067f2 <__smakebuf_r+0x46>
 80067de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e2:	059a      	lsls	r2, r3, #22
 80067e4:	d4ee      	bmi.n	80067c4 <__smakebuf_r+0x18>
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	f043 0302 	orr.w	r3, r3, #2
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	e7e2      	b.n	80067b8 <__smakebuf_r+0xc>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	6020      	str	r0, [r4, #0]
 80067f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	9b01      	ldr	r3, [sp, #4]
 80067fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006802:	b15b      	cbz	r3, 800681c <__smakebuf_r+0x70>
 8006804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006808:	4630      	mov	r0, r6
 800680a:	f000 f81d 	bl	8006848 <_isatty_r>
 800680e:	b128      	cbz	r0, 800681c <__smakebuf_r+0x70>
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	f023 0303 	bic.w	r3, r3, #3
 8006816:	f043 0301 	orr.w	r3, r3, #1
 800681a:	81a3      	strh	r3, [r4, #12]
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	431d      	orrs	r5, r3
 8006820:	81a5      	strh	r5, [r4, #12]
 8006822:	e7cf      	b.n	80067c4 <__smakebuf_r+0x18>

08006824 <_fstat_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d07      	ldr	r5, [pc, #28]	@ (8006844 <_fstat_r+0x20>)
 8006828:	2300      	movs	r3, #0
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	4611      	mov	r1, r2
 8006830:	602b      	str	r3, [r5, #0]
 8006832:	f7fa fbac 	bl	8000f8e <_fstat>
 8006836:	1c43      	adds	r3, r0, #1
 8006838:	d102      	bne.n	8006840 <_fstat_r+0x1c>
 800683a:	682b      	ldr	r3, [r5, #0]
 800683c:	b103      	cbz	r3, 8006840 <_fstat_r+0x1c>
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	bd38      	pop	{r3, r4, r5, pc}
 8006842:	bf00      	nop
 8006844:	200004b0 	.word	0x200004b0

08006848 <_isatty_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d06      	ldr	r5, [pc, #24]	@ (8006864 <_isatty_r+0x1c>)
 800684c:	2300      	movs	r3, #0
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	f7fa fbab 	bl	8000fae <_isatty>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_isatty_r+0x1a>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_isatty_r+0x1a>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	200004b0 	.word	0x200004b0

08006868 <_sbrk_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4d06      	ldr	r5, [pc, #24]	@ (8006884 <_sbrk_r+0x1c>)
 800686c:	2300      	movs	r3, #0
 800686e:	4604      	mov	r4, r0
 8006870:	4608      	mov	r0, r1
 8006872:	602b      	str	r3, [r5, #0]
 8006874:	f7fa fbb4 	bl	8000fe0 <_sbrk>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_sbrk_r+0x1a>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	b103      	cbz	r3, 8006882 <_sbrk_r+0x1a>
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	200004b0 	.word	0x200004b0

08006888 <_init>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	bf00      	nop
 800688c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688e:	bc08      	pop	{r3}
 8006890:	469e      	mov	lr, r3
 8006892:	4770      	bx	lr

08006894 <_fini>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	bf00      	nop
 8006898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689a:	bc08      	pop	{r3}
 800689c:	469e      	mov	lr, r3
 800689e:	4770      	bx	lr
